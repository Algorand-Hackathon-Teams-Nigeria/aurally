/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils'
import type {
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  CoreAppCallArgs,
  RawAppCallArgs,
  AppState,
  TealTemplateParams,
  ABIAppCallArg,
} from '@algorandfoundation/algokit-utils/types/app'
import type {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client'
import type { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec'
import type { SendTransactionResult, TransactionToSign, SendTransactionFrom } from '@algorandfoundation/algokit-utils/types/transaction'
import type { TransactionWithSigner } from 'algosdk'
import { Algodv2, OnApplicationComplete, Transaction, AtomicTransactionComposer } from 'algosdk'
export const APP_SPEC: AppSpec = {
  "hints": {
    "register_creator(acfg,string,string)(string,uint64,string,string,uint64)": {
      "structs": {
        "output": {
          "name": "AurallyCreative",
          "elements": [
            [
              "creative_type",
              "string"
            ],
            [
              "minted",
              "uint64"
            ],
            [
              "fullname",
              "string"
            ],
            [
              "username",
              "string"
            ],
            [
              "d_nft_id",
              "uint64"
            ]
          ]
        }
      },
      "call_config": {
        "no_op": "CALL"
      }
    },
    "create_sound_nft(acfg,string,string,string,string,string,string,uint64,string,string,string,uint64,bool)(uint64,uint64,string,string,string,string,string,uint64,string,string,string,address,bool)": {
      "structs": {
        "output": {
          "name": "SoundNFT",
          "elements": [
            [
              "asset_id",
              "uint64"
            ],
            [
              "supply",
              "uint64"
            ],
            [
              "title",
              "string"
            ],
            [
              "label",
              "string"
            ],
            [
              "artist",
              "string"
            ],
            [
              "release_date",
              "string"
            ],
            [
              "genre",
              "string"
            ],
            [
              "price",
              "uint64"
            ],
            [
              "cover_image_ipfs",
              "string"
            ],
            [
              "audio_sample_ipfs",
              "string"
            ],
            [
              "full_track_ipfs",
              "string"
            ],
            [
              "owner",
              "address"
            ],
            [
              "for_sale",
              "bool"
            ]
          ]
        }
      },
      "call_config": {
        "no_op": "CALL"
      }
    },
    "hello(string)string": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDgKcHVzaGludCAwIC8vIDAKcmV0dXJu"
  },
  "state": {
    "global": {
      "num_byte_slices": 0,
      "num_uints": 0
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "schema": {
    "global": {
      "declared": {},
      "reserved": {}
    },
    "local": {
      "declared": {},
      "reserved": {}
    }
  },
  "contract": {
    "name": "Aurally",
    "methods": [
      {
        "name": "register_creator",
        "args": [
          {
            "type": "acfg",
            "name": "txn"
          },
          {
            "type": "string",
            "name": "fullname"
          },
          {
            "type": "string",
            "name": "username"
          }
        ],
        "returns": {
          "type": "(string,uint64,string,string,uint64)"
        }
      },
      {
        "name": "create_sound_nft",
        "args": [
          {
            "type": "acfg",
            "name": "txn"
          },
          {
            "type": "string",
            "name": "asset_key"
          },
          {
            "type": "string",
            "name": "title"
          },
          {
            "type": "string",
            "name": "label"
          },
          {
            "type": "string",
            "name": "artist"
          },
          {
            "type": "string",
            "name": "release_date"
          },
          {
            "type": "string",
            "name": "genre"
          },
          {
            "type": "uint64",
            "name": "price"
          },
          {
            "type": "string",
            "name": "cover_image_ipfs"
          },
          {
            "type": "string",
            "name": "audio_sample_ipfs"
          },
          {
            "type": "string",
            "name": "full_track_ipfs"
          },
          {
            "type": "uint64",
            "name": "supply"
          },
          {
            "type": "bool",
            "name": "for_sale"
          }
        ],
        "returns": {
          "type": "(uint64,uint64,string,string,string,string,string,uint64,string,string,string,address,bool)"
        }
      },
      {
        "name": "hello",
        "args": [
          {
            "type": "string",
            "name": "name"
          }
        ],
        "returns": {
          "type": "string"
        }
      }
    ],
    "networks": {}
  },
  "bare_call_config": {
    "no_op": "CREATE"
  }
}

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp =  { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC }
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn =  { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC }
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut =  { onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC }
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp =  { onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC }
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp =  { onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC }
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt 
   */
  asBigInt(): bigint
  /**
   * Gets the state value as a number.
   */
  asNumber(): number
}
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array
  /**
   * Gets the state value as a string
   */
  asString(): string
}

/**
 * Defines the types of available calls and state of the Aurally smart contract.
 */
export type Aurally = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'register_creator(acfg,string,string)(string,uint64,string,string,uint64)' | 'register_creator', {
      argsObj: {
        txn: TransactionToSign | Transaction | Promise<SendTransactionResult>
        fullname: string
        username: string
      }
      argsTuple: [txn: TransactionToSign | Transaction | Promise<SendTransactionResult>, fullname: string, username: string]
      returns: AurallyCreative
    }>
    & Record<'create_sound_nft(acfg,string,string,string,string,string,string,uint64,string,string,string,uint64,bool)(uint64,uint64,string,string,string,string,string,uint64,string,string,string,address,bool)' | 'create_sound_nft', {
      argsObj: {
        txn: TransactionToSign | Transaction | Promise<SendTransactionResult>
        asset_key: string
        title: string
        label: string
        artist: string
        release_date: string
        genre: string
        price: bigint | number
        cover_image_ipfs: string
        audio_sample_ipfs: string
        full_track_ipfs: string
        supply: bigint | number
        for_sale: boolean
      }
      argsTuple: [txn: TransactionToSign | Transaction | Promise<SendTransactionResult>, asset_key: string, title: string, label: string, artist: string, release_date: string, genre: string, price: bigint | number, cover_image_ipfs: string, audio_sample_ipfs: string, full_track_ipfs: string, supply: bigint | number, for_sale: boolean]
      returns: SoundNft
    }>
    & Record<'hello(string)string' | 'hello', {
      argsObj: {
        name: string
      }
      argsTuple: [name: string]
      returns: string
    }>
}
/**
 * Defines the possible abi call signatures
 */
export type AurallySig = keyof Aurally['methods']
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends AurallySig | undefined> = {
  method: TSignature
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>
} & AppClientCallCoreParams & CoreAppCallArgs
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>
/**
 * Represents a AurallyCreative result as a struct
 */
export type AurallyCreative = {
  creative_type: string
  minted: bigint
  fullname: string
  username: string
  d_nft_id: bigint
}
/**
 * Converts the tuple representation of a AurallyCreative to the struct representation
 */
export function AurallyCreative([creative_type, minted, fullname, username, d_nft_id]: [string, bigint, string, string, bigint] ) {
  return {
    creative_type,
    minted,
    fullname,
    username,
    d_nft_id,
  }
}
/**
 * Represents a SoundNFT result as a struct
 */
export type SoundNft = {
  asset_id: bigint
  supply: bigint
  title: string
  label: string
  artist: string
  release_date: string
  genre: string
  price: bigint
  cover_image_ipfs: string
  audio_sample_ipfs: string
  full_track_ipfs: string
  owner: string
  for_sale: boolean
}
/**
 * Converts the tuple representation of a SoundNFT to the struct representation
 */
export function SoundNft([asset_id, supply, title, label, artist, release_date, genre, price, cover_image_ipfs, audio_sample_ipfs, full_track_ipfs, owner, for_sale]: [bigint, bigint, string, string, string, string, string, bigint, string, string, string, string, boolean] ) {
  return {
    asset_id,
    supply,
    title,
    label,
    artist,
    release_date,
    genre,
    price,
    cover_image_ipfs,
    audio_sample_ipfs,
    full_track_ipfs,
    owner,
    for_sale,
  }
}
/**
 * Maps a method signature from the Aurally smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends AurallySig> = Aurally['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the Aurally smart contract to the method's return type
 */
export type MethodReturn<TSignature extends AurallySig> = Aurally['methods'][TSignature]['returns']

/**
 * A factory for available 'create' calls
 */
export type AurallyCreateCalls = (typeof AurallyCallFactory)['create']
/**
 * Defines supported create methods for this smart contract
 */
export type AurallyCreateCallParams =
  | (TypedCallParams<undefined> & (OnCompleteNoOp))
/**
 * Defines arguments required for the deploy method.
 */
export type AurallyDeployArgs = {
  deployTimeParams?: TealTemplateParams
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: AurallyCreateCalls) => AurallyCreateCallParams
}


/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class AurallyCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the Aurally smart contract using a bare call
       *
       * @param params Any parameters for the call
       * @returns A TypedCallParams object for the call
       */
      bare(params: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return {
          method: undefined,
          methodArgs: undefined,
          ...params,
        }
      },
    }
  }

  /**
   * Constructs a no op call for the register_creator(acfg,string,string)(string,uint64,string,string,uint64) ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static registerCreator(args: MethodArgs<'register_creator(acfg,string,string)(string,uint64,string,string,uint64)'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'register_creator(acfg,string,string)(string,uint64,string,string,uint64)' as const,
      methodArgs: Array.isArray(args) ? args : [args.txn, args.fullname, args.username],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the create_sound_nft(acfg,string,string,string,string,string,string,uint64,string,string,string,uint64,bool)(uint64,uint64,string,string,string,string,string,uint64,string,string,string,address,bool) ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static createSoundNft(args: MethodArgs<'create_sound_nft(acfg,string,string,string,string,string,string,uint64,string,string,string,uint64,bool)(uint64,uint64,string,string,string,string,string,uint64,string,string,string,address,bool)'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'create_sound_nft(acfg,string,string,string,string,string,string,uint64,string,string,string,uint64,bool)(uint64,uint64,string,string,string,string,string,uint64,string,string,string,address,bool)' as const,
      methodArgs: Array.isArray(args) ? args : [args.txn, args.asset_key, args.title, args.label, args.artist, args.release_date, args.genre, args.price, args.cover_image_ipfs, args.audio_sample_ipfs, args.full_track_ipfs, args.supply, args.for_sale],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the hello(string)string ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static hello(args: MethodArgs<'hello(string)string'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'hello(string)string' as const,
      methodArgs: Array.isArray(args) ? args : [args.name],
      ...params,
    }
  }
}

/**
 * A client to make calls to the Aurally smart contract
 */
export class AurallyClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient

  private readonly sender: SendTransactionFrom | undefined

  /**
   * Creates a new instance of `AurallyClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender
    this.appClient = algokit.getAppClient({
      ...appDetails,
      app: APP_SPEC
    }, algod)
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn>(result: AppCallTransactionResult, returnValueFormatter?: (value: any) => TReturn): AppCallTransactionResultOfType<TReturn> {
    if(result.return?.decodeError) {
      throw result.return.decodeError
    }
    const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
      ? returnValueFormatter(result.return.returnValue)
      : result.return?.returnValue as TReturn | undefined
      return { ...result, return: returnValue }
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof Aurally['methods']>(typedCallParams: TypedCallParams<TSignature>, returnValueFormatter?: (value: any) => MethodReturn<TSignature>) {
    return this.mapReturnValue<MethodReturn<TSignature>>(await this.appClient.call(typedCallParams), returnValueFormatter)
  }

  /**
   * Idempotently deploys the Aurally smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(params: AurallyDeployArgs & AppClientDeployCoreParams = {}): ReturnType<ApplicationClient['deploy']> {
    const createArgs = params.createCall?.(AurallyCallFactory.create)
    return this.appClient.deploy({
      ...params,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    })
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this
    return {
      /**
       * Creates a new instance of the Aurally smart contract using a bare call.
       *
       * @param args The arguments for the bare call
       * @returns The create result
       */
      bare(args: BareCallArgs & AppClientCallCoreParams & AppClientCompilationParams & CoreAppCallArgs & (OnCompleteNoOp) = {}): Promise<AppCallTransactionResultOfType<undefined>> {
        return $this.appClient.create(args) as unknown as Promise<AppCallTransactionResultOfType<undefined>>
      },
    }
  }

  /**
   * Makes a clear_state call to an existing instance of the Aurally smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args)
  }

  /**
   * Calls the register_creator(acfg,string,string)(string,uint64,string,string,uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public registerCreator(args: MethodArgs<'register_creator(acfg,string,string)(string,uint64,string,string,uint64)'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AurallyCallFactory.registerCreator(args, params), AurallyCreative)
  }

  /**
   * Calls the create_sound_nft(acfg,string,string,string,string,string,string,uint64,string,string,string,uint64,bool)(uint64,uint64,string,string,string,string,string,uint64,string,string,string,address,bool) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public createSoundNft(args: MethodArgs<'create_sound_nft(acfg,string,string,string,string,string,string,uint64,string,string,string,uint64,bool)(uint64,uint64,string,string,string,string,string,uint64,string,string,string,address,bool)'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AurallyCallFactory.createSoundNft(args, params), SoundNft)
  }

  /**
   * Calls the hello(string)string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public hello(args: MethodArgs<'hello(string)string'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AurallyCallFactory.hello(args, params))
  }

  public compose(): AurallyComposer {
    const client = this
    const atc = new AtomicTransactionComposer()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: any) => any)> = []
    return {
      registerCreator(args: MethodArgs<'register_creator(acfg,string,string)(string,uint64,string,string,uint64)'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.registerCreator(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(AurallyCreative)
        return this
      },
      createSoundNft(args: MethodArgs<'create_sound_nft(acfg,string,string,string,string,string,string,uint64,string,string,string,uint64,bool)(uint64,uint64,string,string,string,string,string,uint64,string,string,string,address,bool)'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.createSoundNft(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(SoundNFT)
        return this
      },
      hello(args: MethodArgs<'hello(string)string'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.hello(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      clearState(args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearState({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom) {
        promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)))
        return this
      },
      async atc() {
        await promiseChain
        return atc
      },
      async execute() {
        await promiseChain
        const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams: {} }, client.algod)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      }
    } as unknown as AurallyComposer
  }
}
export type AurallyComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the register_creator(acfg,string,string)(string,uint64,string,string,uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  registerCreator(args: MethodArgs<'register_creator(acfg,string,string)(string,uint64,string,string,uint64)'>, params?: AppClientCallCoreParams & CoreAppCallArgs): AurallyComposer<[...TReturns, MethodReturn<'register_creator(acfg,string,string)(string,uint64,string,string,uint64)'>]>

  /**
   * Calls the create_sound_nft(acfg,string,string,string,string,string,string,uint64,string,string,string,uint64,bool)(uint64,uint64,string,string,string,string,string,uint64,string,string,string,address,bool) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createSoundNft(args: MethodArgs<'create_sound_nft(acfg,string,string,string,string,string,string,uint64,string,string,string,uint64,bool)(uint64,uint64,string,string,string,string,string,uint64,string,string,string,address,bool)'>, params?: AppClientCallCoreParams & CoreAppCallArgs): AurallyComposer<[...TReturns, MethodReturn<'create_sound_nft(acfg,string,string,string,string,string,string,uint64,string,string,string,uint64,bool)(uint64,uint64,string,string,string,string,string,uint64,string,string,string,address,bool)'>]>

  /**
   * Calls the hello(string)string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  hello(args: MethodArgs<'hello(string)string'>, params?: AppClientCallCoreParams & CoreAppCallArgs): AurallyComposer<[...TReturns, MethodReturn<'hello(string)string'>]>

  /**
   * Makes a clear_state call to an existing instance of the Aurally smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs): AurallyComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom): AurallyComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>
  /**
   * Executes the transaction group and returns an array of results
   */
  execute(): Promise<AurallyComposerResults<TReturns>>
}
export type AurallyComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns
  groupId: string
  txIds: string[]
  transactions: Transaction[]
}
