/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils'
import type {
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  CoreAppCallArgs,
  RawAppCallArgs,
  AppState,
  TealTemplateParams,
  ABIAppCallArg,
} from '@algorandfoundation/algokit-utils/types/app'
import type {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client'
import type { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec'
import type { SendTransactionResult, TransactionToSign, SendTransactionFrom } from '@algorandfoundation/algokit-utils/types/transaction'
import type { TransactionWithSigner } from 'algosdk'
import { Algodv2, OnApplicationComplete, Transaction, AtomicTransactionComposer } from 'algosdk'
export const APP_SPEC: AppSpec = {
  "hints": {
    "promote_to_admin(pay,account)string": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "demote_from_admin(pay,account)string": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "register_creator(txn,string,string)(bool,bool,uint64,string,string,uint64)": {
      "structs": {
        "output": {
          "name": "AurallyCreative",
          "elements": [
            [
              "is_music_creative",
              "bool"
            ],
            [
              "is_art_creative",
              "bool"
            ],
            [
              "minted",
              "uint64"
            ],
            [
              "fullname",
              "string"
            ],
            [
              "username",
              "string"
            ],
            [
              "d_nft_id",
              "uint64"
            ]
          ]
        }
      },
      "call_config": {
        "no_op": "CALL"
      }
    },
    "create_sound_nft(txn,string,string,string,string,string,string,string,uint64,string,string,string,uint64,bool,asset,account)(uint64,uint64,string,string,string,string,string,uint64,string,string,string,address,bool)": {
      "structs": {
        "output": {
          "name": "SoundNFT",
          "elements": [
            [
              "asset_id",
              "uint64"
            ],
            [
              "supply",
              "uint64"
            ],
            [
              "title",
              "string"
            ],
            [
              "label",
              "string"
            ],
            [
              "artist",
              "string"
            ],
            [
              "release_date",
              "string"
            ],
            [
              "genre",
              "string"
            ],
            [
              "price",
              "uint64"
            ],
            [
              "cover_image_ipfs",
              "string"
            ],
            [
              "audio_sample_ipfs",
              "string"
            ],
            [
              "full_track_ipfs",
              "string"
            ],
            [
              "owner",
              "address"
            ],
            [
              "for_sale",
              "bool"
            ]
          ]
        }
      },
      "call_config": {
        "no_op": "CALL"
      }
    },
    "create_art_nft(txn,string,string,string,uint64,string,string,uint64,bool,asset,account)(uint64,string,string,uint64,string,string,uint64,uint64,address,bool)": {
      "structs": {
        "output": {
          "name": "ArtNFT",
          "elements": [
            [
              "asset_id",
              "uint64"
            ],
            [
              "title",
              "string"
            ],
            [
              "name",
              "string"
            ],
            [
              "supply",
              "uint64"
            ],
            [
              "description",
              "string"
            ],
            [
              "ipfs_location",
              "string"
            ],
            [
              "price",
              "uint64"
            ],
            [
              "sold_price",
              "uint64"
            ],
            [
              "owner",
              "address"
            ],
            [
              "for_sale",
              "bool"
            ]
          ]
        }
      },
      "call_config": {
        "no_op": "CALL"
      }
    },
    "create_art_auction(pay,string,string,uint64,uint64,uint64)(address,string,string,uint64,uint64,uint64,uint64,address)": {
      "structs": {
        "output": {
          "name": "ArtAuctionItem",
          "elements": [
            [
              "auctioneer",
              "address"
            ],
            [
              "item_id",
              "string"
            ],
            [
              "item_name",
              "string"
            ],
            [
              "min_bid",
              "uint64"
            ],
            [
              "starts_at",
              "uint64"
            ],
            [
              "ends_at",
              "uint64"
            ],
            [
              "highest_bid",
              "uint64"
            ],
            [
              "highest_bidder",
              "address"
            ]
          ]
        }
      },
      "call_config": {
        "no_op": "CALL"
      }
    },
    "bid_on_art_auction(pay,string,uint64)(address,string,string,uint64,uint64,uint64,uint64,address)": {
      "structs": {
        "output": {
          "name": "ArtAuctionItem",
          "elements": [
            [
              "auctioneer",
              "address"
            ],
            [
              "item_id",
              "string"
            ],
            [
              "item_name",
              "string"
            ],
            [
              "min_bid",
              "uint64"
            ],
            [
              "starts_at",
              "uint64"
            ],
            [
              "ends_at",
              "uint64"
            ],
            [
              "highest_bid",
              "uint64"
            ],
            [
              "highest_bidder",
              "address"
            ]
          ]
        }
      },
      "call_config": {
        "no_op": "CALL"
      }
    },
    "complete_art_auction(pay,string)(uint64,string,string,uint64,string,string,uint64,uint64,address,bool)": {
      "structs": {
        "output": {
          "name": "ArtNFT",
          "elements": [
            [
              "asset_id",
              "uint64"
            ],
            [
              "title",
              "string"
            ],
            [
              "name",
              "string"
            ],
            [
              "supply",
              "uint64"
            ],
            [
              "description",
              "string"
            ],
            [
              "ipfs_location",
              "string"
            ],
            [
              "price",
              "uint64"
            ],
            [
              "sold_price",
              "uint64"
            ],
            [
              "owner",
              "address"
            ],
            [
              "for_sale",
              "bool"
            ]
          ]
        }
      },
      "call_config": {
        "no_op": "CALL"
      }
    },
    "purchase_nft(pay,axfer,string,string,account,asset,asset,axfer,account)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "transfer_nft(pay,address,string,string)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "create_proposal(pay,string,string)(string,uint64,uint64,string)": {
      "structs": {
        "output": {
          "name": "Proposal",
          "elements": [
            [
              "proposal_id",
              "string"
            ],
            [
              "yes_votes",
              "uint64"
            ],
            [
              "no_votes",
              "uint64"
            ],
            [
              "details",
              "string"
            ]
          ]
        }
      },
      "call_config": {
        "no_op": "CALL"
      }
    },
    "vote_on_proposal(pay,bool,asset,account,string)(string,uint64,uint64,string)": {
      "structs": {
        "output": {
          "name": "Proposal",
          "elements": [
            [
              "proposal_id",
              "string"
            ],
            [
              "yes_votes",
              "uint64"
            ],
            [
              "no_votes",
              "uint64"
            ],
            [
              "details",
              "string"
            ]
          ]
        }
      },
      "call_config": {
        "no_op": "CALL"
      }
    },
    "end_proposal_voting(pay,string)(string,uint64,uint64,string)": {
      "structs": {
        "output": {
          "name": "Proposal",
          "elements": [
            [
              "proposal_id",
              "string"
            ],
            [
              "yes_votes",
              "uint64"
            ],
            [
              "no_votes",
              "uint64"
            ],
            [
              "details",
              "string"
            ]
          ]
        }
      },
      "call_config": {
        "no_op": "CALL"
      }
    },
    "unfreeze_auras(pay,asset,account)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "create_aura_tokens()(uint64,string,uint64)": {
      "structs": {
        "output": {
          "name": "AurallyToken",
          "elements": [
            [
              "asset_id",
              "uint64"
            ],
            [
              "asset_key",
              "string"
            ],
            [
              "asset_total",
              "uint64"
            ]
          ]
        }
      },
      "call_config": {
        "no_op": "CALL"
      }
    },
    "hello(string)string": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDgKcHVzaGludCAwIC8vIDAKcmV0dXJu"
  },
  "state": {
    "global": {
      "num_byte_slices": 1,
      "num_uints": 0
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "schema": {
    "global": {
      "declared": {
        "active_proposal": {
          "type": "bytes",
          "key": "active_proposal",
          "descr": ""
        }
      },
      "reserved": {}
    },
    "local": {
      "declared": {},
      "reserved": {}
    }
  },
  "contract": {
    "name": "Aurally",
    "methods": [
      {
        "name": "promote_to_admin",
        "args": [
          {
            "type": "pay",
            "name": "txn"
          },
          {
            "type": "account",
            "name": "acc"
          }
        ],
        "returns": {
          "type": "string"
        }
      },
      {
        "name": "demote_from_admin",
        "args": [
          {
            "type": "pay",
            "name": "txn"
          },
          {
            "type": "account",
            "name": "acc"
          }
        ],
        "returns": {
          "type": "string"
        }
      },
      {
        "name": "register_creator",
        "args": [
          {
            "type": "txn",
            "name": "txn"
          },
          {
            "type": "string",
            "name": "fullname"
          },
          {
            "type": "string",
            "name": "username"
          }
        ],
        "returns": {
          "type": "(bool,bool,uint64,string,string,uint64)"
        }
      },
      {
        "name": "create_sound_nft",
        "args": [
          {
            "type": "txn",
            "name": "txn"
          },
          {
            "type": "string",
            "name": "nft_name"
          },
          {
            "type": "string",
            "name": "asset_key"
          },
          {
            "type": "string",
            "name": "title"
          },
          {
            "type": "string",
            "name": "label"
          },
          {
            "type": "string",
            "name": "artist"
          },
          {
            "type": "string",
            "name": "release_date"
          },
          {
            "type": "string",
            "name": "genre"
          },
          {
            "type": "uint64",
            "name": "price"
          },
          {
            "type": "string",
            "name": "cover_image_ipfs"
          },
          {
            "type": "string",
            "name": "audio_sample_ipfs"
          },
          {
            "type": "string",
            "name": "full_track_ipfs"
          },
          {
            "type": "uint64",
            "name": "supply"
          },
          {
            "type": "bool",
            "name": "for_sale"
          },
          {
            "type": "asset",
            "name": "aura_asset"
          },
          {
            "type": "account",
            "name": "creator"
          }
        ],
        "returns": {
          "type": "(uint64,uint64,string,string,string,string,string,uint64,string,string,string,address,bool)"
        }
      },
      {
        "name": "create_art_nft",
        "args": [
          {
            "type": "txn",
            "name": "txn"
          },
          {
            "type": "string",
            "name": "nft_name"
          },
          {
            "type": "string",
            "name": "title"
          },
          {
            "type": "string",
            "name": "name"
          },
          {
            "type": "uint64",
            "name": "supply"
          },
          {
            "type": "string",
            "name": "description"
          },
          {
            "type": "string",
            "name": "ipfs_location"
          },
          {
            "type": "uint64",
            "name": "price"
          },
          {
            "type": "bool",
            "name": "for_sale"
          },
          {
            "type": "asset",
            "name": "aura_asset"
          },
          {
            "type": "account",
            "name": "creator"
          }
        ],
        "returns": {
          "type": "(uint64,string,string,uint64,string,string,uint64,uint64,address,bool)"
        }
      },
      {
        "name": "create_art_auction",
        "args": [
          {
            "type": "pay",
            "name": "txn"
          },
          {
            "type": "string",
            "name": "auction_key"
          },
          {
            "type": "string",
            "name": "ipfs_location"
          },
          {
            "type": "uint64",
            "name": "min_bid"
          },
          {
            "type": "uint64",
            "name": "starts_at"
          },
          {
            "type": "uint64",
            "name": "ends_at"
          }
        ],
        "returns": {
          "type": "(address,string,string,uint64,uint64,uint64,uint64,address)"
        }
      },
      {
        "name": "bid_on_art_auction",
        "args": [
          {
            "type": "pay",
            "name": "txn"
          },
          {
            "type": "string",
            "name": "auction_key"
          },
          {
            "type": "uint64",
            "name": "bid_ammount"
          }
        ],
        "returns": {
          "type": "(address,string,string,uint64,uint64,uint64,uint64,address)"
        }
      },
      {
        "name": "complete_art_auction",
        "args": [
          {
            "type": "pay",
            "name": "txn"
          },
          {
            "type": "string",
            "name": "auction_key"
          }
        ],
        "returns": {
          "type": "(uint64,string,string,uint64,string,string,uint64,uint64,address,bool)"
        }
      },
      {
        "name": "purchase_nft",
        "args": [
          {
            "type": "pay",
            "name": "txn"
          },
          {
            "type": "axfer",
            "name": "optin_txn"
          },
          {
            "type": "string",
            "name": "asset_key"
          },
          {
            "type": "string",
            "name": "nft_type"
          },
          {
            "type": "account",
            "name": "seller"
          },
          {
            "type": "asset",
            "name": "sound_nft_id"
          },
          {
            "type": "asset",
            "name": "aura_id"
          },
          {
            "type": "axfer",
            "name": "aura_optin_txn"
          },
          {
            "type": "account",
            "name": "buyer"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "transfer_nft",
        "args": [
          {
            "type": "pay",
            "name": "txn"
          },
          {
            "type": "address",
            "name": "to"
          },
          {
            "type": "string",
            "name": "asset_key"
          },
          {
            "type": "string",
            "name": "nft_type"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "create_proposal",
        "args": [
          {
            "type": "pay",
            "name": "txn"
          },
          {
            "type": "string",
            "name": "proposal_key"
          },
          {
            "type": "string",
            "name": "proposal_detail"
          }
        ],
        "returns": {
          "type": "(string,uint64,uint64,string)"
        }
      },
      {
        "name": "vote_on_proposal",
        "args": [
          {
            "type": "pay",
            "name": "txn"
          },
          {
            "type": "bool",
            "name": "vote_for"
          },
          {
            "type": "asset",
            "name": "aura_id"
          },
          {
            "type": "account",
            "name": "voter"
          },
          {
            "type": "string",
            "name": "proposal_key"
          }
        ],
        "returns": {
          "type": "(string,uint64,uint64,string)"
        }
      },
      {
        "name": "end_proposal_voting",
        "args": [
          {
            "type": "pay",
            "name": "txn"
          },
          {
            "type": "string",
            "name": "proposal_key"
          }
        ],
        "returns": {
          "type": "(string,uint64,uint64,string)"
        }
      },
      {
        "name": "unfreeze_auras",
        "args": [
          {
            "type": "pay",
            "name": "txn"
          },
          {
            "type": "asset",
            "name": "aura"
          },
          {
            "type": "account",
            "name": "acc"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "create_aura_tokens",
        "args": [],
        "returns": {
          "type": "(uint64,string,uint64)"
        }
      },
      {
        "name": "hello",
        "args": [
          {
            "type": "string",
            "name": "name"
          }
        ],
        "returns": {
          "type": "string"
        }
      }
    ],
    "networks": {}
  },
  "bare_call_config": {
    "delete_application": "CALL",
    "no_op": "CREATE",
    "update_application": "CALL"
  }
}

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp =  { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC }
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn =  { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC }
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut =  { onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC }
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp =  { onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC }
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp =  { onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC }
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt 
   */
  asBigInt(): bigint
  /**
   * Gets the state value as a number.
   */
  asNumber(): number
}
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array
  /**
   * Gets the state value as a string
   */
  asString(): string
}

/**
 * Defines the types of available calls and state of the Aurally smart contract.
 */
export type Aurally = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'promote_to_admin(pay,account)string' | 'promote_to_admin', {
      argsObj: {
        txn: TransactionToSign | Transaction | Promise<SendTransactionResult>
        acc: string | Uint8Array
      }
      argsTuple: [txn: TransactionToSign | Transaction | Promise<SendTransactionResult>, acc: string | Uint8Array]
      returns: string
    }>
    & Record<'demote_from_admin(pay,account)string' | 'demote_from_admin', {
      argsObj: {
        txn: TransactionToSign | Transaction | Promise<SendTransactionResult>
        acc: string | Uint8Array
      }
      argsTuple: [txn: TransactionToSign | Transaction | Promise<SendTransactionResult>, acc: string | Uint8Array]
      returns: string
    }>
    & Record<'register_creator(txn,string,string)(bool,bool,uint64,string,string,uint64)' | 'register_creator', {
      argsObj: {
        txn: TransactionToSign | Transaction | Promise<SendTransactionResult>
        fullname: string
        username: string
      }
      argsTuple: [txn: TransactionToSign | Transaction | Promise<SendTransactionResult>, fullname: string, username: string]
      returns: AurallyCreative
    }>
    & Record<'create_sound_nft(txn,string,string,string,string,string,string,string,uint64,string,string,string,uint64,bool,asset,account)(uint64,uint64,string,string,string,string,string,uint64,string,string,string,address,bool)' | 'create_sound_nft', {
      argsObj: {
        txn: TransactionToSign | Transaction | Promise<SendTransactionResult>
        nft_name: string
        asset_key: string
        title: string
        label: string
        artist: string
        release_date: string
        genre: string
        price: bigint | number
        cover_image_ipfs: string
        audio_sample_ipfs: string
        full_track_ipfs: string
        supply: bigint | number
        for_sale: boolean
        aura_asset: number | bigint
        creator: string | Uint8Array
      }
      argsTuple: [txn: TransactionToSign | Transaction | Promise<SendTransactionResult>, nft_name: string, asset_key: string, title: string, label: string, artist: string, release_date: string, genre: string, price: bigint | number, cover_image_ipfs: string, audio_sample_ipfs: string, full_track_ipfs: string, supply: bigint | number, for_sale: boolean, aura_asset: number | bigint, creator: string | Uint8Array]
      returns: SoundNft
    }>
    & Record<'create_art_nft(txn,string,string,string,uint64,string,string,uint64,bool,asset,account)(uint64,string,string,uint64,string,string,uint64,uint64,address,bool)' | 'create_art_nft', {
      argsObj: {
        txn: TransactionToSign | Transaction | Promise<SendTransactionResult>
        nft_name: string
        title: string
        name: string
        supply: bigint | number
        description: string
        ipfs_location: string
        price: bigint | number
        for_sale: boolean
        aura_asset: number | bigint
        creator: string | Uint8Array
      }
      argsTuple: [txn: TransactionToSign | Transaction | Promise<SendTransactionResult>, nft_name: string, title: string, name: string, supply: bigint | number, description: string, ipfs_location: string, price: bigint | number, for_sale: boolean, aura_asset: number | bigint, creator: string | Uint8Array]
      returns: ArtNft
    }>
    & Record<'create_art_auction(pay,string,string,uint64,uint64,uint64)(address,string,string,uint64,uint64,uint64,uint64,address)' | 'create_art_auction', {
      argsObj: {
        txn: TransactionToSign | Transaction | Promise<SendTransactionResult>
        auction_key: string
        ipfs_location: string
        min_bid: bigint | number
        starts_at: bigint | number
        ends_at: bigint | number
      }
      argsTuple: [txn: TransactionToSign | Transaction | Promise<SendTransactionResult>, auction_key: string, ipfs_location: string, min_bid: bigint | number, starts_at: bigint | number, ends_at: bigint | number]
      returns: ArtAuctionItem
    }>
    & Record<'bid_on_art_auction(pay,string,uint64)(address,string,string,uint64,uint64,uint64,uint64,address)' | 'bid_on_art_auction', {
      argsObj: {
        txn: TransactionToSign | Transaction | Promise<SendTransactionResult>
        auction_key: string
        bid_ammount: bigint | number
      }
      argsTuple: [txn: TransactionToSign | Transaction | Promise<SendTransactionResult>, auction_key: string, bid_ammount: bigint | number]
      returns: ArtAuctionItem
    }>
    & Record<'complete_art_auction(pay,string)(uint64,string,string,uint64,string,string,uint64,uint64,address,bool)' | 'complete_art_auction', {
      argsObj: {
        txn: TransactionToSign | Transaction | Promise<SendTransactionResult>
        auction_key: string
      }
      argsTuple: [txn: TransactionToSign | Transaction | Promise<SendTransactionResult>, auction_key: string]
      returns: ArtNft
    }>
    & Record<'purchase_nft(pay,axfer,string,string,account,asset,asset,axfer,account)void' | 'purchase_nft', {
      argsObj: {
        txn: TransactionToSign | Transaction | Promise<SendTransactionResult>
        optin_txn: TransactionToSign | Transaction | Promise<SendTransactionResult>
        asset_key: string
        nft_type: string
        seller: string | Uint8Array
        sound_nft_id: number | bigint
        aura_id: number | bigint
        aura_optin_txn: TransactionToSign | Transaction | Promise<SendTransactionResult>
        buyer: string | Uint8Array
      }
      argsTuple: [txn: TransactionToSign | Transaction | Promise<SendTransactionResult>, optin_txn: TransactionToSign | Transaction | Promise<SendTransactionResult>, asset_key: string, nft_type: string, seller: string | Uint8Array, sound_nft_id: number | bigint, aura_id: number | bigint, aura_optin_txn: TransactionToSign | Transaction | Promise<SendTransactionResult>, buyer: string | Uint8Array]
      returns: void
    }>
    & Record<'transfer_nft(pay,address,string,string)void' | 'transfer_nft', {
      argsObj: {
        txn: TransactionToSign | Transaction | Promise<SendTransactionResult>
        to: string
        asset_key: string
        nft_type: string
      }
      argsTuple: [txn: TransactionToSign | Transaction | Promise<SendTransactionResult>, to: string, asset_key: string, nft_type: string]
      returns: void
    }>
    & Record<'create_proposal(pay,string,string)(string,uint64,uint64,string)' | 'create_proposal', {
      argsObj: {
        txn: TransactionToSign | Transaction | Promise<SendTransactionResult>
        proposal_key: string
        proposal_detail: string
      }
      argsTuple: [txn: TransactionToSign | Transaction | Promise<SendTransactionResult>, proposal_key: string, proposal_detail: string]
      returns: Proposal
    }>
    & Record<'vote_on_proposal(pay,bool,asset,account,string)(string,uint64,uint64,string)' | 'vote_on_proposal', {
      argsObj: {
        txn: TransactionToSign | Transaction | Promise<SendTransactionResult>
        vote_for: boolean
        aura_id: number | bigint
        voter: string | Uint8Array
        proposal_key: string
      }
      argsTuple: [txn: TransactionToSign | Transaction | Promise<SendTransactionResult>, vote_for: boolean, aura_id: number | bigint, voter: string | Uint8Array, proposal_key: string]
      returns: Proposal
    }>
    & Record<'end_proposal_voting(pay,string)(string,uint64,uint64,string)' | 'end_proposal_voting', {
      argsObj: {
        txn: TransactionToSign | Transaction | Promise<SendTransactionResult>
        proposal_key: string
      }
      argsTuple: [txn: TransactionToSign | Transaction | Promise<SendTransactionResult>, proposal_key: string]
      returns: Proposal
    }>
    & Record<'unfreeze_auras(pay,asset,account)void' | 'unfreeze_auras', {
      argsObj: {
        txn: TransactionToSign | Transaction | Promise<SendTransactionResult>
        aura: number | bigint
        acc: string | Uint8Array
      }
      argsTuple: [txn: TransactionToSign | Transaction | Promise<SendTransactionResult>, aura: number | bigint, acc: string | Uint8Array]
      returns: void
    }>
    & Record<'create_aura_tokens()(uint64,string,uint64)' | 'create_aura_tokens', {
      argsObj: {
      }
      argsTuple: []
      returns: AurallyToken
    }>
    & Record<'hello(string)string' | 'hello', {
      argsObj: {
        name: string
      }
      argsTuple: [name: string]
      returns: string
    }>
  /**
   * Defines the shape of the global and local state of the application.
   */
  state: {
    global: {
      'active_proposal'?: BinaryState
    }
  }
}
/**
 * Defines the possible abi call signatures
 */
export type AurallySig = keyof Aurally['methods']
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends AurallySig | undefined> = {
  method: TSignature
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>
} & AppClientCallCoreParams & CoreAppCallArgs
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>
/**
 * Represents a AurallyCreative result as a struct
 */
export type AurallyCreative = {
  is_music_creative: boolean
  is_art_creative: boolean
  minted: bigint
  fullname: string
  username: string
  d_nft_id: bigint
}
/**
 * Converts the tuple representation of a AurallyCreative to the struct representation
 */
export function AurallyCreative([is_music_creative, is_art_creative, minted, fullname, username, d_nft_id]: [boolean, boolean, bigint, string, string, bigint] ) {
  return {
    is_music_creative,
    is_art_creative,
    minted,
    fullname,
    username,
    d_nft_id,
  }
}
/**
 * Represents a SoundNFT result as a struct
 */
export type SoundNft = {
  asset_id: bigint
  supply: bigint
  title: string
  label: string
  artist: string
  release_date: string
  genre: string
  price: bigint
  cover_image_ipfs: string
  audio_sample_ipfs: string
  full_track_ipfs: string
  owner: string
  for_sale: boolean
}
/**
 * Converts the tuple representation of a SoundNFT to the struct representation
 */
export function SoundNft([asset_id, supply, title, label, artist, release_date, genre, price, cover_image_ipfs, audio_sample_ipfs, full_track_ipfs, owner, for_sale]: [bigint, bigint, string, string, string, string, string, bigint, string, string, string, string, boolean] ) {
  return {
    asset_id,
    supply,
    title,
    label,
    artist,
    release_date,
    genre,
    price,
    cover_image_ipfs,
    audio_sample_ipfs,
    full_track_ipfs,
    owner,
    for_sale,
  }
}
/**
 * Represents a ArtNFT result as a struct
 */
export type ArtNft = {
  asset_id: bigint
  title: string
  name: string
  supply: bigint
  description: string
  ipfs_location: string
  price: bigint
  sold_price: bigint
  owner: string
  for_sale: boolean
}
/**
 * Converts the tuple representation of a ArtNFT to the struct representation
 */
export function ArtNft([asset_id, title, name, supply, description, ipfs_location, price, sold_price, owner, for_sale]: [bigint, string, string, bigint, string, string, bigint, bigint, string, boolean] ) {
  return {
    asset_id,
    title,
    name,
    supply,
    description,
    ipfs_location,
    price,
    sold_price,
    owner,
    for_sale,
  }
}
/**
 * Represents a ArtAuctionItem result as a struct
 */
export type ArtAuctionItem = {
  auctioneer: string
  item_id: string
  item_name: string
  min_bid: bigint
  starts_at: bigint
  ends_at: bigint
  highest_bid: bigint
  highest_bidder: string
}
/**
 * Converts the tuple representation of a ArtAuctionItem to the struct representation
 */
export function ArtAuctionItem([auctioneer, item_id, item_name, min_bid, starts_at, ends_at, highest_bid, highest_bidder]: [string, string, string, bigint, bigint, bigint, bigint, string] ) {
  return {
    auctioneer,
    item_id,
    item_name,
    min_bid,
    starts_at,
    ends_at,
    highest_bid,
    highest_bidder,
  }
}
/**
 * Represents a ArtAuctionItem result as a struct
 */
export type ArtAuctionItem = {
  auctioneer: string
  item_id: string
  item_name: string
  min_bid: bigint
  starts_at: bigint
  ends_at: bigint
  highest_bid: bigint
  highest_bidder: string
}
/**
 * Converts the tuple representation of a ArtAuctionItem to the struct representation
 */
export function ArtAuctionItem([auctioneer, item_id, item_name, min_bid, starts_at, ends_at, highest_bid, highest_bidder]: [string, string, string, bigint, bigint, bigint, bigint, string] ) {
  return {
    auctioneer,
    item_id,
    item_name,
    min_bid,
    starts_at,
    ends_at,
    highest_bid,
    highest_bidder,
  }
}
/**
 * Represents a ArtNFT result as a struct
 */
export type ArtNft = {
  asset_id: bigint
  title: string
  name: string
  supply: bigint
  description: string
  ipfs_location: string
  price: bigint
  sold_price: bigint
  owner: string
  for_sale: boolean
}
/**
 * Converts the tuple representation of a ArtNFT to the struct representation
 */
export function ArtNft([asset_id, title, name, supply, description, ipfs_location, price, sold_price, owner, for_sale]: [bigint, string, string, bigint, string, string, bigint, bigint, string, boolean] ) {
  return {
    asset_id,
    title,
    name,
    supply,
    description,
    ipfs_location,
    price,
    sold_price,
    owner,
    for_sale,
  }
}
/**
 * Represents a Proposal result as a struct
 */
export type Proposal = {
  proposal_id: string
  yes_votes: bigint
  no_votes: bigint
  details: string
}
/**
 * Converts the tuple representation of a Proposal to the struct representation
 */
export function Proposal([proposal_id, yes_votes, no_votes, details]: [string, bigint, bigint, string] ) {
  return {
    proposal_id,
    yes_votes,
    no_votes,
    details,
  }
}
/**
 * Represents a Proposal result as a struct
 */
export type Proposal = {
  proposal_id: string
  yes_votes: bigint
  no_votes: bigint
  details: string
}
/**
 * Converts the tuple representation of a Proposal to the struct representation
 */
export function Proposal([proposal_id, yes_votes, no_votes, details]: [string, bigint, bigint, string] ) {
  return {
    proposal_id,
    yes_votes,
    no_votes,
    details,
  }
}
/**
 * Represents a Proposal result as a struct
 */
export type Proposal = {
  proposal_id: string
  yes_votes: bigint
  no_votes: bigint
  details: string
}
/**
 * Converts the tuple representation of a Proposal to the struct representation
 */
export function Proposal([proposal_id, yes_votes, no_votes, details]: [string, bigint, bigint, string] ) {
  return {
    proposal_id,
    yes_votes,
    no_votes,
    details,
  }
}
/**
 * Represents a AurallyToken result as a struct
 */
export type AurallyToken = {
  asset_id: bigint
  asset_key: string
  asset_total: bigint
}
/**
 * Converts the tuple representation of a AurallyToken to the struct representation
 */
export function AurallyToken([asset_id, asset_key, asset_total]: [bigint, string, bigint] ) {
  return {
    asset_id,
    asset_key,
    asset_total,
  }
}
/**
 * Maps a method signature from the Aurally smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends AurallySig> = Aurally['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the Aurally smart contract to the method's return type
 */
export type MethodReturn<TSignature extends AurallySig> = Aurally['methods'][TSignature]['returns']

/**
 * A factory for available 'create' calls
 */
export type AurallyCreateCalls = (typeof AurallyCallFactory)['create']
/**
 * Defines supported create methods for this smart contract
 */
export type AurallyCreateCallParams =
  | (TypedCallParams<undefined> & (OnCompleteNoOp))
/**
 * A factory for available 'update' calls
 */
export type AurallyUpdateCalls = (typeof AurallyCallFactory)['update']
/**
 * Defines supported update methods for this smart contract
 */
export type AurallyUpdateCallParams =
  | TypedCallParams<undefined>
/**
 * A factory for available 'delete' calls
 */
export type AurallyDeleteCalls = (typeof AurallyCallFactory)['delete']
/**
 * Defines supported delete methods for this smart contract
 */
export type AurallyDeleteCallParams =
  | TypedCallParams<undefined>
/**
 * Defines arguments required for the deploy method.
 */
export type AurallyDeployArgs = {
  deployTimeParams?: TealTemplateParams
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: AurallyCreateCalls) => AurallyCreateCallParams
  /**
   * A delegate which takes a update call factory and returns the update call params for this smart contract
   */
  updateCall?: (callFactory: AurallyUpdateCalls) => AurallyUpdateCallParams
  /**
   * A delegate which takes a delete call factory and returns the delete call params for this smart contract
   */
  deleteCall?: (callFactory: AurallyDeleteCalls) => AurallyDeleteCallParams
}


/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class AurallyCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the Aurally smart contract using a bare call
       *
       * @param params Any parameters for the call
       * @returns A TypedCallParams object for the call
       */
      bare(params: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return {
          method: undefined,
          methodArgs: undefined,
          ...params,
        }
      },
    }
  }

  /**
   * Gets available update call factories
   */
  static get update() {
    return {
      /**
       * Constructs an update call for the Aurally smart contract using a bare call
       *
       * @param params Any parameters for the call
       * @returns A TypedCallParams object for the call
       */
      bare(params: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams = {}) {
        return {
          method: undefined,
          methodArgs: undefined,
          ...params,
        }
      },
    }
  }

  /**
   * Gets available delete call factories
   */
  static get delete() {
    return {
      /**
       * Constructs a delete call for the Aurally smart contract using a bare call
       *
       * @param params Any parameters for the call
       * @returns A TypedCallParams object for the call
       */
      bare(params: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
        return {
          method: undefined,
          methodArgs: undefined,
          ...params,
        }
      },
    }
  }

  /**
   * Constructs a no op call for the promote_to_admin(pay,account)string ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static promoteToAdmin(args: MethodArgs<'promote_to_admin(pay,account)string'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'promote_to_admin(pay,account)string' as const,
      methodArgs: Array.isArray(args) ? args : [args.txn, args.acc],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the demote_from_admin(pay,account)string ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static demoteFromAdmin(args: MethodArgs<'demote_from_admin(pay,account)string'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'demote_from_admin(pay,account)string' as const,
      methodArgs: Array.isArray(args) ? args : [args.txn, args.acc],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the register_creator(txn,string,string)(bool,bool,uint64,string,string,uint64) ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static registerCreator(args: MethodArgs<'register_creator(txn,string,string)(bool,bool,uint64,string,string,uint64)'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'register_creator(txn,string,string)(bool,bool,uint64,string,string,uint64)' as const,
      methodArgs: Array.isArray(args) ? args : [args.txn, args.fullname, args.username],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the create_sound_nft(txn,string,string,string,string,string,string,string,uint64,string,string,string,uint64,bool,asset,account)(uint64,uint64,string,string,string,string,string,uint64,string,string,string,address,bool) ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static createSoundNft(args: MethodArgs<'create_sound_nft(txn,string,string,string,string,string,string,string,uint64,string,string,string,uint64,bool,asset,account)(uint64,uint64,string,string,string,string,string,uint64,string,string,string,address,bool)'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'create_sound_nft(txn,string,string,string,string,string,string,string,uint64,string,string,string,uint64,bool,asset,account)(uint64,uint64,string,string,string,string,string,uint64,string,string,string,address,bool)' as const,
      methodArgs: Array.isArray(args) ? args : [args.txn, args.nft_name, args.asset_key, args.title, args.label, args.artist, args.release_date, args.genre, args.price, args.cover_image_ipfs, args.audio_sample_ipfs, args.full_track_ipfs, args.supply, args.for_sale, args.aura_asset, args.creator],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the create_art_nft(txn,string,string,string,uint64,string,string,uint64,bool,asset,account)(uint64,string,string,uint64,string,string,uint64,uint64,address,bool) ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static createArtNft(args: MethodArgs<'create_art_nft(txn,string,string,string,uint64,string,string,uint64,bool,asset,account)(uint64,string,string,uint64,string,string,uint64,uint64,address,bool)'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'create_art_nft(txn,string,string,string,uint64,string,string,uint64,bool,asset,account)(uint64,string,string,uint64,string,string,uint64,uint64,address,bool)' as const,
      methodArgs: Array.isArray(args) ? args : [args.txn, args.nft_name, args.title, args.name, args.supply, args.description, args.ipfs_location, args.price, args.for_sale, args.aura_asset, args.creator],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the create_art_auction(pay,string,string,uint64,uint64,uint64)(address,string,string,uint64,uint64,uint64,uint64,address) ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static createArtAuction(args: MethodArgs<'create_art_auction(pay,string,string,uint64,uint64,uint64)(address,string,string,uint64,uint64,uint64,uint64,address)'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'create_art_auction(pay,string,string,uint64,uint64,uint64)(address,string,string,uint64,uint64,uint64,uint64,address)' as const,
      methodArgs: Array.isArray(args) ? args : [args.txn, args.auction_key, args.ipfs_location, args.min_bid, args.starts_at, args.ends_at],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the bid_on_art_auction(pay,string,uint64)(address,string,string,uint64,uint64,uint64,uint64,address) ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static bidOnArtAuction(args: MethodArgs<'bid_on_art_auction(pay,string,uint64)(address,string,string,uint64,uint64,uint64,uint64,address)'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'bid_on_art_auction(pay,string,uint64)(address,string,string,uint64,uint64,uint64,uint64,address)' as const,
      methodArgs: Array.isArray(args) ? args : [args.txn, args.auction_key, args.bid_ammount],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the complete_art_auction(pay,string)(uint64,string,string,uint64,string,string,uint64,uint64,address,bool) ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static completeArtAuction(args: MethodArgs<'complete_art_auction(pay,string)(uint64,string,string,uint64,string,string,uint64,uint64,address,bool)'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'complete_art_auction(pay,string)(uint64,string,string,uint64,string,string,uint64,uint64,address,bool)' as const,
      methodArgs: Array.isArray(args) ? args : [args.txn, args.auction_key],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the purchase_nft(pay,axfer,string,string,account,asset,asset,axfer,account)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static purchaseNft(args: MethodArgs<'purchase_nft(pay,axfer,string,string,account,asset,asset,axfer,account)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'purchase_nft(pay,axfer,string,string,account,asset,asset,axfer,account)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.txn, args.optin_txn, args.asset_key, args.nft_type, args.seller, args.sound_nft_id, args.aura_id, args.aura_optin_txn, args.buyer],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the transfer_nft(pay,address,string,string)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static transferNft(args: MethodArgs<'transfer_nft(pay,address,string,string)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'transfer_nft(pay,address,string,string)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.txn, args.to, args.asset_key, args.nft_type],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the create_proposal(pay,string,string)(string,uint64,uint64,string) ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static createProposal(args: MethodArgs<'create_proposal(pay,string,string)(string,uint64,uint64,string)'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'create_proposal(pay,string,string)(string,uint64,uint64,string)' as const,
      methodArgs: Array.isArray(args) ? args : [args.txn, args.proposal_key, args.proposal_detail],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the vote_on_proposal(pay,bool,asset,account,string)(string,uint64,uint64,string) ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static voteOnProposal(args: MethodArgs<'vote_on_proposal(pay,bool,asset,account,string)(string,uint64,uint64,string)'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'vote_on_proposal(pay,bool,asset,account,string)(string,uint64,uint64,string)' as const,
      methodArgs: Array.isArray(args) ? args : [args.txn, args.vote_for, args.aura_id, args.voter, args.proposal_key],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the end_proposal_voting(pay,string)(string,uint64,uint64,string) ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static endProposalVoting(args: MethodArgs<'end_proposal_voting(pay,string)(string,uint64,uint64,string)'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'end_proposal_voting(pay,string)(string,uint64,uint64,string)' as const,
      methodArgs: Array.isArray(args) ? args : [args.txn, args.proposal_key],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the unfreeze_auras(pay,asset,account)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static unfreezeAuras(args: MethodArgs<'unfreeze_auras(pay,asset,account)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'unfreeze_auras(pay,asset,account)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.txn, args.aura, args.acc],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the create_aura_tokens()(uint64,string,uint64) ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static createAuraTokens(args: MethodArgs<'create_aura_tokens()(uint64,string,uint64)'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'create_aura_tokens()(uint64,string,uint64)' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the hello(string)string ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static hello(args: MethodArgs<'hello(string)string'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'hello(string)string' as const,
      methodArgs: Array.isArray(args) ? args : [args.name],
      ...params,
    }
  }
}

/**
 * A client to make calls to the Aurally smart contract
 */
export class AurallyClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient

  private readonly sender: SendTransactionFrom | undefined

  /**
   * Creates a new instance of `AurallyClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender
    this.appClient = algokit.getAppClient({
      ...appDetails,
      app: APP_SPEC
    }, algod)
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn>(result: AppCallTransactionResult, returnValueFormatter?: (value: any) => TReturn): AppCallTransactionResultOfType<TReturn> {
    if(result.return?.decodeError) {
      throw result.return.decodeError
    }
    const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
      ? returnValueFormatter(result.return.returnValue)
      : result.return?.returnValue as TReturn | undefined
      return { ...result, return: returnValue }
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof Aurally['methods']>(typedCallParams: TypedCallParams<TSignature>, returnValueFormatter?: (value: any) => MethodReturn<TSignature>) {
    return this.mapReturnValue<MethodReturn<TSignature>>(await this.appClient.call(typedCallParams), returnValueFormatter)
  }

  /**
   * Idempotently deploys the Aurally smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(params: AurallyDeployArgs & AppClientDeployCoreParams = {}): ReturnType<ApplicationClient['deploy']> {
    const createArgs = params.createCall?.(AurallyCallFactory.create)
    const updateArgs = params.updateCall?.(AurallyCallFactory.update)
    const deleteArgs = params.deleteCall?.(AurallyCallFactory.delete)
    return this.appClient.deploy({
      ...params,
      updateArgs,
      deleteArgs,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    })
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this
    return {
      /**
       * Creates a new instance of the Aurally smart contract using a bare call.
       *
       * @param args The arguments for the bare call
       * @returns The create result
       */
      bare(args: BareCallArgs & AppClientCallCoreParams & AppClientCompilationParams & CoreAppCallArgs & (OnCompleteNoOp) = {}): Promise<AppCallTransactionResultOfType<undefined>> {
        return $this.appClient.create(args) as unknown as Promise<AppCallTransactionResultOfType<undefined>>
      },
    }
  }

  /**
   * Gets available update methods
   */
  public get update() {
    const $this = this
    return {
      /**
       * Updates an existing instance of the Aurally smart contract using a bare call.
       *
       * @param args The arguments for the bare call
       * @returns The update result
       */
      bare(args: BareCallArgs & AppClientCallCoreParams & AppClientCompilationParams & CoreAppCallArgs = {}): Promise<AppCallTransactionResultOfType<undefined>> {
        return $this.appClient.update(args) as unknown as Promise<AppCallTransactionResultOfType<undefined>>
      },
    }
  }

  /**
   * Gets available delete methods
   */
  public get delete() {
    const $this = this
    return {
      /**
       * Deletes an existing instance of the Aurally smart contract using a bare call.
       *
       * @param args The arguments for the bare call
       * @returns The delete result
       */
      bare(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}): Promise<AppCallTransactionResultOfType<undefined>> {
        return $this.appClient.delete(args) as unknown as Promise<AppCallTransactionResultOfType<undefined>>
      },
    }
  }

  /**
   * Makes a clear_state call to an existing instance of the Aurally smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args)
  }

  /**
   * Calls the promote_to_admin(pay,account)string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public promoteToAdmin(args: MethodArgs<'promote_to_admin(pay,account)string'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AurallyCallFactory.promoteToAdmin(args, params))
  }

  /**
   * Calls the demote_from_admin(pay,account)string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public demoteFromAdmin(args: MethodArgs<'demote_from_admin(pay,account)string'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AurallyCallFactory.demoteFromAdmin(args, params))
  }

  /**
   * Calls the register_creator(txn,string,string)(bool,bool,uint64,string,string,uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public registerCreator(args: MethodArgs<'register_creator(txn,string,string)(bool,bool,uint64,string,string,uint64)'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AurallyCallFactory.registerCreator(args, params), AurallyCreative)
  }

  /**
   * Calls the create_sound_nft(txn,string,string,string,string,string,string,string,uint64,string,string,string,uint64,bool,asset,account)(uint64,uint64,string,string,string,string,string,uint64,string,string,string,address,bool) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public createSoundNft(args: MethodArgs<'create_sound_nft(txn,string,string,string,string,string,string,string,uint64,string,string,string,uint64,bool,asset,account)(uint64,uint64,string,string,string,string,string,uint64,string,string,string,address,bool)'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AurallyCallFactory.createSoundNft(args, params), SoundNft)
  }

  /**
   * Calls the create_art_nft(txn,string,string,string,uint64,string,string,uint64,bool,asset,account)(uint64,string,string,uint64,string,string,uint64,uint64,address,bool) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public createArtNft(args: MethodArgs<'create_art_nft(txn,string,string,string,uint64,string,string,uint64,bool,asset,account)(uint64,string,string,uint64,string,string,uint64,uint64,address,bool)'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AurallyCallFactory.createArtNft(args, params), ArtNft)
  }

  /**
   * Calls the create_art_auction(pay,string,string,uint64,uint64,uint64)(address,string,string,uint64,uint64,uint64,uint64,address) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public createArtAuction(args: MethodArgs<'create_art_auction(pay,string,string,uint64,uint64,uint64)(address,string,string,uint64,uint64,uint64,uint64,address)'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AurallyCallFactory.createArtAuction(args, params), ArtAuctionItem)
  }

  /**
   * Calls the bid_on_art_auction(pay,string,uint64)(address,string,string,uint64,uint64,uint64,uint64,address) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public bidOnArtAuction(args: MethodArgs<'bid_on_art_auction(pay,string,uint64)(address,string,string,uint64,uint64,uint64,uint64,address)'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AurallyCallFactory.bidOnArtAuction(args, params), ArtAuctionItem)
  }

  /**
   * Calls the complete_art_auction(pay,string)(uint64,string,string,uint64,string,string,uint64,uint64,address,bool) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public completeArtAuction(args: MethodArgs<'complete_art_auction(pay,string)(uint64,string,string,uint64,string,string,uint64,uint64,address,bool)'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AurallyCallFactory.completeArtAuction(args, params), ArtNft)
  }

  /**
   * Calls the purchase_nft(pay,axfer,string,string,account,asset,asset,axfer,account)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public purchaseNft(args: MethodArgs<'purchase_nft(pay,axfer,string,string,account,asset,asset,axfer,account)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AurallyCallFactory.purchaseNft(args, params))
  }

  /**
   * Calls the transfer_nft(pay,address,string,string)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public transferNft(args: MethodArgs<'transfer_nft(pay,address,string,string)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AurallyCallFactory.transferNft(args, params))
  }

  /**
   * Calls the create_proposal(pay,string,string)(string,uint64,uint64,string) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public createProposal(args: MethodArgs<'create_proposal(pay,string,string)(string,uint64,uint64,string)'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AurallyCallFactory.createProposal(args, params), Proposal)
  }

  /**
   * Calls the vote_on_proposal(pay,bool,asset,account,string)(string,uint64,uint64,string) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public voteOnProposal(args: MethodArgs<'vote_on_proposal(pay,bool,asset,account,string)(string,uint64,uint64,string)'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AurallyCallFactory.voteOnProposal(args, params), Proposal)
  }

  /**
   * Calls the end_proposal_voting(pay,string)(string,uint64,uint64,string) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public endProposalVoting(args: MethodArgs<'end_proposal_voting(pay,string)(string,uint64,uint64,string)'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AurallyCallFactory.endProposalVoting(args, params), Proposal)
  }

  /**
   * Calls the unfreeze_auras(pay,asset,account)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public unfreezeAuras(args: MethodArgs<'unfreeze_auras(pay,asset,account)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AurallyCallFactory.unfreezeAuras(args, params))
  }

  /**
   * Calls the create_aura_tokens()(uint64,string,uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public createAuraTokens(args: MethodArgs<'create_aura_tokens()(uint64,string,uint64)'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AurallyCallFactory.createAuraTokens(args, params), AurallyToken)
  }

  /**
   * Calls the hello(string)string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public hello(args: MethodArgs<'hello(string)string'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AurallyCallFactory.hello(args, params))
  }

  /**
   * Extracts a binary state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns A BinaryState instance containing the state value, or undefined if the key was not found
   */
  private static getBinaryState(state: AppState, key: string): BinaryState | undefined {
    const value = state[key]
    if (!value) return undefined
    if (!('valueRaw' in value))
      throw new Error(`Failed to parse state value for ${key}; received an int when expected a byte array`)
    return {
      asString(): string {
        return value.value
      },
      asByteArray(): Uint8Array {
        return value.valueRaw
      }
    }
  }

  /**
   * Extracts a integer state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns An IntegerState instance containing the state value, or undefined if the key was not found
   */
  private static getIntegerState(state: AppState, key: string): IntegerState | undefined {
    const value = state[key]
    if (!value) return undefined
    if ('valueRaw' in value)
      throw new Error(`Failed to parse state value for ${key}; received a byte array when expected a number`)
    return {
      asBigInt() {
        return typeof value.value === 'bigint' ? value.value : BigInt(value.value)
      },
      asNumber(): number {
        return typeof value.value === 'bigint' ? Number(value.value) : value.value
      },
    }
  }

  /**
   * Returns the smart contract's global state wrapped in a strongly typed accessor with options to format the stored value
   */
  public async getGlobalState(): Promise<Aurally['state']['global']> {
    const state = await this.appClient.getGlobalState()
    return {
      get active_proposal() {
        return AurallyClient.getBinaryState(state, 'active_proposal')
      },
    }
  }

  public compose(): AurallyComposer {
    const client = this
    const atc = new AtomicTransactionComposer()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: any) => any)> = []
    return {
      promoteToAdmin(args: MethodArgs<'promote_to_admin(pay,account)string'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.promoteToAdmin(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      demoteFromAdmin(args: MethodArgs<'demote_from_admin(pay,account)string'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.demoteFromAdmin(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      registerCreator(args: MethodArgs<'register_creator(txn,string,string)(bool,bool,uint64,string,string,uint64)'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.registerCreator(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(AurallyCreative)
        return this
      },
      createSoundNft(args: MethodArgs<'create_sound_nft(txn,string,string,string,string,string,string,string,uint64,string,string,string,uint64,bool,asset,account)(uint64,uint64,string,string,string,string,string,uint64,string,string,string,address,bool)'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.createSoundNft(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(SoundNFT)
        return this
      },
      createArtNft(args: MethodArgs<'create_art_nft(txn,string,string,string,uint64,string,string,uint64,bool,asset,account)(uint64,string,string,uint64,string,string,uint64,uint64,address,bool)'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.createArtNft(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(ArtNFT)
        return this
      },
      createArtAuction(args: MethodArgs<'create_art_auction(pay,string,string,uint64,uint64,uint64)(address,string,string,uint64,uint64,uint64,uint64,address)'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.createArtAuction(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(ArtAuctionItem)
        return this
      },
      bidOnArtAuction(args: MethodArgs<'bid_on_art_auction(pay,string,uint64)(address,string,string,uint64,uint64,uint64,uint64,address)'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.bidOnArtAuction(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(ArtAuctionItem)
        return this
      },
      completeArtAuction(args: MethodArgs<'complete_art_auction(pay,string)(uint64,string,string,uint64,string,string,uint64,uint64,address,bool)'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.completeArtAuction(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(ArtNFT)
        return this
      },
      purchaseNft(args: MethodArgs<'purchase_nft(pay,axfer,string,string,account,asset,asset,axfer,account)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.purchaseNft(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      transferNft(args: MethodArgs<'transfer_nft(pay,address,string,string)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.transferNft(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      createProposal(args: MethodArgs<'create_proposal(pay,string,string)(string,uint64,uint64,string)'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.createProposal(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(Proposal)
        return this
      },
      voteOnProposal(args: MethodArgs<'vote_on_proposal(pay,bool,asset,account,string)(string,uint64,uint64,string)'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.voteOnProposal(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(Proposal)
        return this
      },
      endProposalVoting(args: MethodArgs<'end_proposal_voting(pay,string)(string,uint64,uint64,string)'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.endProposalVoting(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(Proposal)
        return this
      },
      unfreezeAuras(args: MethodArgs<'unfreeze_auras(pay,asset,account)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.unfreezeAuras(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      createAuraTokens(args: MethodArgs<'create_aura_tokens()(uint64,string,uint64)'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.createAuraTokens(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(AurallyToken)
        return this
      },
      hello(args: MethodArgs<'hello(string)string'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.hello(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      get update() {
        const $this = this
        return {
          bare(args?: BareCallArgs & AppClientCallCoreParams & AppClientCompilationParams & CoreAppCallArgs) {
            promiseChain = promiseChain.then(() => client.update.bare({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
            resultMappers.push(undefined)
            return $this
          },
        }
      },
      get delete() {
        const $this = this
        return {
          bare(args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs) {
            promiseChain = promiseChain.then(() => client.delete.bare({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
            resultMappers.push(undefined)
            return $this
          },
        }
      },
      clearState(args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearState({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom) {
        promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)))
        return this
      },
      async atc() {
        await promiseChain
        return atc
      },
      async execute() {
        await promiseChain
        const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams: {} }, client.algod)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      }
    } as unknown as AurallyComposer
  }
}
export type AurallyComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the promote_to_admin(pay,account)string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  promoteToAdmin(args: MethodArgs<'promote_to_admin(pay,account)string'>, params?: AppClientCallCoreParams & CoreAppCallArgs): AurallyComposer<[...TReturns, MethodReturn<'promote_to_admin(pay,account)string'>]>

  /**
   * Calls the demote_from_admin(pay,account)string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  demoteFromAdmin(args: MethodArgs<'demote_from_admin(pay,account)string'>, params?: AppClientCallCoreParams & CoreAppCallArgs): AurallyComposer<[...TReturns, MethodReturn<'demote_from_admin(pay,account)string'>]>

  /**
   * Calls the register_creator(txn,string,string)(bool,bool,uint64,string,string,uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  registerCreator(args: MethodArgs<'register_creator(txn,string,string)(bool,bool,uint64,string,string,uint64)'>, params?: AppClientCallCoreParams & CoreAppCallArgs): AurallyComposer<[...TReturns, MethodReturn<'register_creator(txn,string,string)(bool,bool,uint64,string,string,uint64)'>]>

  /**
   * Calls the create_sound_nft(txn,string,string,string,string,string,string,string,uint64,string,string,string,uint64,bool,asset,account)(uint64,uint64,string,string,string,string,string,uint64,string,string,string,address,bool) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createSoundNft(args: MethodArgs<'create_sound_nft(txn,string,string,string,string,string,string,string,uint64,string,string,string,uint64,bool,asset,account)(uint64,uint64,string,string,string,string,string,uint64,string,string,string,address,bool)'>, params?: AppClientCallCoreParams & CoreAppCallArgs): AurallyComposer<[...TReturns, MethodReturn<'create_sound_nft(txn,string,string,string,string,string,string,string,uint64,string,string,string,uint64,bool,asset,account)(uint64,uint64,string,string,string,string,string,uint64,string,string,string,address,bool)'>]>

  /**
   * Calls the create_art_nft(txn,string,string,string,uint64,string,string,uint64,bool,asset,account)(uint64,string,string,uint64,string,string,uint64,uint64,address,bool) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createArtNft(args: MethodArgs<'create_art_nft(txn,string,string,string,uint64,string,string,uint64,bool,asset,account)(uint64,string,string,uint64,string,string,uint64,uint64,address,bool)'>, params?: AppClientCallCoreParams & CoreAppCallArgs): AurallyComposer<[...TReturns, MethodReturn<'create_art_nft(txn,string,string,string,uint64,string,string,uint64,bool,asset,account)(uint64,string,string,uint64,string,string,uint64,uint64,address,bool)'>]>

  /**
   * Calls the create_art_auction(pay,string,string,uint64,uint64,uint64)(address,string,string,uint64,uint64,uint64,uint64,address) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createArtAuction(args: MethodArgs<'create_art_auction(pay,string,string,uint64,uint64,uint64)(address,string,string,uint64,uint64,uint64,uint64,address)'>, params?: AppClientCallCoreParams & CoreAppCallArgs): AurallyComposer<[...TReturns, MethodReturn<'create_art_auction(pay,string,string,uint64,uint64,uint64)(address,string,string,uint64,uint64,uint64,uint64,address)'>]>

  /**
   * Calls the bid_on_art_auction(pay,string,uint64)(address,string,string,uint64,uint64,uint64,uint64,address) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  bidOnArtAuction(args: MethodArgs<'bid_on_art_auction(pay,string,uint64)(address,string,string,uint64,uint64,uint64,uint64,address)'>, params?: AppClientCallCoreParams & CoreAppCallArgs): AurallyComposer<[...TReturns, MethodReturn<'bid_on_art_auction(pay,string,uint64)(address,string,string,uint64,uint64,uint64,uint64,address)'>]>

  /**
   * Calls the complete_art_auction(pay,string)(uint64,string,string,uint64,string,string,uint64,uint64,address,bool) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  completeArtAuction(args: MethodArgs<'complete_art_auction(pay,string)(uint64,string,string,uint64,string,string,uint64,uint64,address,bool)'>, params?: AppClientCallCoreParams & CoreAppCallArgs): AurallyComposer<[...TReturns, MethodReturn<'complete_art_auction(pay,string)(uint64,string,string,uint64,string,string,uint64,uint64,address,bool)'>]>

  /**
   * Calls the purchase_nft(pay,axfer,string,string,account,asset,asset,axfer,account)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  purchaseNft(args: MethodArgs<'purchase_nft(pay,axfer,string,string,account,asset,asset,axfer,account)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): AurallyComposer<[...TReturns, MethodReturn<'purchase_nft(pay,axfer,string,string,account,asset,asset,axfer,account)void'>]>

  /**
   * Calls the transfer_nft(pay,address,string,string)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  transferNft(args: MethodArgs<'transfer_nft(pay,address,string,string)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): AurallyComposer<[...TReturns, MethodReturn<'transfer_nft(pay,address,string,string)void'>]>

  /**
   * Calls the create_proposal(pay,string,string)(string,uint64,uint64,string) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createProposal(args: MethodArgs<'create_proposal(pay,string,string)(string,uint64,uint64,string)'>, params?: AppClientCallCoreParams & CoreAppCallArgs): AurallyComposer<[...TReturns, MethodReturn<'create_proposal(pay,string,string)(string,uint64,uint64,string)'>]>

  /**
   * Calls the vote_on_proposal(pay,bool,asset,account,string)(string,uint64,uint64,string) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  voteOnProposal(args: MethodArgs<'vote_on_proposal(pay,bool,asset,account,string)(string,uint64,uint64,string)'>, params?: AppClientCallCoreParams & CoreAppCallArgs): AurallyComposer<[...TReturns, MethodReturn<'vote_on_proposal(pay,bool,asset,account,string)(string,uint64,uint64,string)'>]>

  /**
   * Calls the end_proposal_voting(pay,string)(string,uint64,uint64,string) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  endProposalVoting(args: MethodArgs<'end_proposal_voting(pay,string)(string,uint64,uint64,string)'>, params?: AppClientCallCoreParams & CoreAppCallArgs): AurallyComposer<[...TReturns, MethodReturn<'end_proposal_voting(pay,string)(string,uint64,uint64,string)'>]>

  /**
   * Calls the unfreeze_auras(pay,asset,account)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  unfreezeAuras(args: MethodArgs<'unfreeze_auras(pay,asset,account)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): AurallyComposer<[...TReturns, MethodReturn<'unfreeze_auras(pay,asset,account)void'>]>

  /**
   * Calls the create_aura_tokens()(uint64,string,uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createAuraTokens(args: MethodArgs<'create_aura_tokens()(uint64,string,uint64)'>, params?: AppClientCallCoreParams & CoreAppCallArgs): AurallyComposer<[...TReturns, MethodReturn<'create_aura_tokens()(uint64,string,uint64)'>]>

  /**
   * Calls the hello(string)string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  hello(args: MethodArgs<'hello(string)string'>, params?: AppClientCallCoreParams & CoreAppCallArgs): AurallyComposer<[...TReturns, MethodReturn<'hello(string)string'>]>

  /**
   * Gets available update methods
   */
  readonly update: {
    /**
     * Updates an existing instance of the Aurally smart contract using a bare call.
     *
     * @param args The arguments for the bare call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    bare(args?: BareCallArgs & AppClientCallCoreParams & AppClientCompilationParams & CoreAppCallArgs): AurallyComposer<[...TReturns, undefined]>
  }

  /**
   * Gets available delete methods
   */
  readonly delete: {
    /**
     * Deletes an existing instance of the Aurally smart contract using a bare call.
     *
     * @param args The arguments for the bare call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    bare(args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs): AurallyComposer<[...TReturns, undefined]>
  }

  /**
   * Makes a clear_state call to an existing instance of the Aurally smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs): AurallyComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom): AurallyComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>
  /**
   * Executes the transaction group and returns an array of results
   */
  execute(): Promise<AurallyComposerResults<TReturns>>
}
export type AurallyComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns
  groupId: string
  txIds: string[]
  transactions: Transaction[]
}
