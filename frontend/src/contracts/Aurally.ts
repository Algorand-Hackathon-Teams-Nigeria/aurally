/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils'
import type {
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  CoreAppCallArgs,
  RawAppCallArgs,
  AppState,
  TealTemplateParams,
  ABIAppCallArg,
} from '@algorandfoundation/algokit-utils/types/app'
import type {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client'
import type { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec'
import type { SendTransactionResult, TransactionToSign, SendTransactionFrom } from '@algorandfoundation/algokit-utils/types/transaction'
import type { TransactionWithSigner } from 'algosdk'
import { Algodv2, OnApplicationComplete, Transaction, AtomicTransactionComposer } from 'algosdk'
export const APP_SPEC: AppSpec = {
  "hints": {
    "promote_to_admin(pay,account)string": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "demote_from_admin(pay,account)string": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "register_creator(txn,string,string)(bool,bool,uint64,string,string,uint64)": {
      "structs": {
        "output": {
          "name": "AurallyCreative",
          "elements": [
            [
              "is_music_creative",
              "bool"
            ],
            [
              "is_art_creative",
              "bool"
            ],
            [
              "minted",
              "uint64"
            ],
            [
              "fullname",
              "string"
            ],
            [
              "username",
              "string"
            ],
            [
              "d_nft_id",
              "uint64"
            ]
          ]
        }
      },
      "call_config": {
        "no_op": "CALL"
      }
    },
    "create_sound_nft(txn,string,string,string,string,string,string,string,uint64,string,string,string,uint64,bool,asset,account)(uint64,string,uint64,string,string,string,string,string,uint64,string,string,string,address,bool)": {
      "structs": {
        "output": {
          "name": "SoundNFT",
          "elements": [
            [
              "asset_id",
              "uint64"
            ],
            [
              "asset_key",
              "string"
            ],
            [
              "supply",
              "uint64"
            ],
            [
              "title",
              "string"
            ],
            [
              "label",
              "string"
            ],
            [
              "artist",
              "string"
            ],
            [
              "release_date",
              "string"
            ],
            [
              "genre",
              "string"
            ],
            [
              "price",
              "uint64"
            ],
            [
              "cover_image_ipfs",
              "string"
            ],
            [
              "audio_sample_ipfs",
              "string"
            ],
            [
              "full_track_ipfs",
              "string"
            ],
            [
              "owner",
              "address"
            ],
            [
              "for_sale",
              "bool"
            ]
          ]
        }
      },
      "call_config": {
        "no_op": "CALL"
      }
    },
    "create_art_nft(pay,string,string,string,string,uint64,string,string,uint64,asset,account)(uint64,string,string,string,uint64,string,string,uint64,uint64,address,bool)": {
      "structs": {
        "output": {
          "name": "ArtNFT",
          "elements": [
            [
              "asset_id",
              "uint64"
            ],
            [
              "asset_key",
              "string"
            ],
            [
              "title",
              "string"
            ],
            [
              "name",
              "string"
            ],
            [
              "supply",
              "uint64"
            ],
            [
              "description",
              "string"
            ],
            [
              "ipfs_location",
              "string"
            ],
            [
              "price",
              "uint64"
            ],
            [
              "sold_price",
              "uint64"
            ],
            [
              "owner",
              "address"
            ],
            [
              "for_sale",
              "bool"
            ]
          ]
        }
      },
      "call_config": {
        "no_op": "CALL"
      }
    },
    "create_art_auction(pay,string,string,uint64,uint64,uint64)(address,string,string,uint64,uint64,uint64,uint64,address)": {
      "structs": {
        "output": {
          "name": "ArtAuctionItem",
          "elements": [
            [
              "auctioneer",
              "address"
            ],
            [
              "item_id",
              "string"
            ],
            [
              "item_name",
              "string"
            ],
            [
              "min_bid",
              "uint64"
            ],
            [
              "starts_at",
              "uint64"
            ],
            [
              "ends_at",
              "uint64"
            ],
            [
              "highest_bid",
              "uint64"
            ],
            [
              "highest_bidder",
              "address"
            ]
          ]
        }
      },
      "call_config": {
        "no_op": "CALL"
      }
    },
    "bid_on_art_auction(pay,string,uint64)(address,string,string,uint64,uint64,uint64,uint64,address)": {
      "structs": {
        "output": {
          "name": "ArtAuctionItem",
          "elements": [
            [
              "auctioneer",
              "address"
            ],
            [
              "item_id",
              "string"
            ],
            [
              "item_name",
              "string"
            ],
            [
              "min_bid",
              "uint64"
            ],
            [
              "starts_at",
              "uint64"
            ],
            [
              "ends_at",
              "uint64"
            ],
            [
              "highest_bid",
              "uint64"
            ],
            [
              "highest_bidder",
              "address"
            ]
          ]
        }
      },
      "call_config": {
        "no_op": "CALL"
      }
    },
    "complete_art_auction(pay,string)(uint64,string,string,string,uint64,string,string,uint64,uint64,address,bool)": {
      "structs": {
        "output": {
          "name": "ArtNFT",
          "elements": [
            [
              "asset_id",
              "uint64"
            ],
            [
              "asset_key",
              "string"
            ],
            [
              "title",
              "string"
            ],
            [
              "name",
              "string"
            ],
            [
              "supply",
              "uint64"
            ],
            [
              "description",
              "string"
            ],
            [
              "ipfs_location",
              "string"
            ],
            [
              "price",
              "uint64"
            ],
            [
              "sold_price",
              "uint64"
            ],
            [
              "owner",
              "address"
            ],
            [
              "for_sale",
              "bool"
            ]
          ]
        }
      },
      "call_config": {
        "no_op": "CALL"
      }
    },
    "purchase_nft(pay,axfer,string,string,account,asset,asset,axfer,account)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "transfer_nft(pay,address,string,string)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "create_proposal(pay,string,string)(string,uint64,uint64,string)": {
      "structs": {
        "output": {
          "name": "Proposal",
          "elements": [
            [
              "proposal_id",
              "string"
            ],
            [
              "yes_votes",
              "uint64"
            ],
            [
              "no_votes",
              "uint64"
            ],
            [
              "details",
              "string"
            ]
          ]
        }
      },
      "call_config": {
        "no_op": "CALL"
      }
    },
    "vote_on_proposal(pay,bool,asset,account,string)(string,uint64,uint64,string)": {
      "structs": {
        "output": {
          "name": "Proposal",
          "elements": [
            [
              "proposal_id",
              "string"
            ],
            [
              "yes_votes",
              "uint64"
            ],
            [
              "no_votes",
              "uint64"
            ],
            [
              "details",
              "string"
            ]
          ]
        }
      },
      "call_config": {
        "no_op": "CALL"
      }
    },
    "end_proposal_voting(pay,string)(string,uint64,uint64,string)": {
      "structs": {
        "output": {
          "name": "Proposal",
          "elements": [
            [
              "proposal_id",
              "string"
            ],
            [
              "yes_votes",
              "uint64"
            ],
            [
              "no_votes",
              "uint64"
            ],
            [
              "details",
              "string"
            ]
          ]
        }
      },
      "call_config": {
        "no_op": "CALL"
      }
    },
    "unfreeze_auras(pay,asset,account)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "create_aura_tokens()(uint64,string,uint64)": {
      "structs": {
        "output": {
          "name": "AurallyToken",
          "elements": [
            [
              "asset_id",
              "uint64"
            ],
            [
              "asset_key",
              "string"
            ],
            [
              "asset_total",
              "uint64"
            ]
          ]
        }
      },
      "call_config": {
        "no_op": "CALL"
      }
    },
    "create_event(pay,string,string,uint64,uint64,string,uint64)(uint64,string,string,uint64,uint64,string,uint64,address)": {
      "structs": {
        "output": {
          "name": "Event",
          "elements": [
            [
              "asset_id",
              "uint64"
            ],
            [
              "key",
              "string"
            ],
            [
              "name",
              "string"
            ],
            [
              "start_date",
              "uint64"
            ],
            [
              "end_date",
              "uint64"
            ],
            [
              "cover_image_ipfs",
              "string"
            ],
            [
              "ticket_price",
              "uint64"
            ],
            [
              "owner",
              "address"
            ]
          ]
        }
      },
      "call_config": {
        "no_op": "CALL"
      }
    },
    "purchase_event_ticket(pay,string,string,account)(uint64,string,string,uint64,address)": {
      "structs": {
        "output": {
          "name": "EventTicket",
          "elements": [
            [
              "asset_id",
              "uint64"
            ],
            [
              "ticket_key",
              "string"
            ],
            [
              "event_asset_key",
              "string"
            ],
            [
              "purchase_price",
              "uint64"
            ],
            [
              "owner",
              "address"
            ]
          ]
        }
      },
      "call_config": {
        "no_op": "CALL"
      }
    },
    "hello(string)string": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "source": {
    "approval": "I3ByYWdtYSB2ZXJzaW9uIDgKaW50Y2Jsb2NrIDAgMSA2NTUzNiAzMiA1OTIKYnl0ZWNibG9jayAweCAweDE1MWY3Yzc1IDB4NjE2Mzc0Njk3NjY1NWY3MDcyNmY3MDZmNzM2MTZjIDB4MDAgMHg0ZTZmNmU2NSAweDYxNzI3NCAweDYxNzU3MjYxIDB4NzM2Zjc1NmU2NCAweDAwMDQ2MTc1NzI2MQp0eG4gTnVtQXBwQXJncwppbnRjXzAgLy8gMAo9PQpibnogbWFpbl9sMzgKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMApwdXNoYnl0ZXMgMHgwODdmZjU1YSAvLyAicHJvbW90ZV90b19hZG1pbihwYXksYWNjb3VudClzdHJpbmciCj09CmJueiBtYWluX2wzNwp0eG5hIEFwcGxpY2F0aW9uQXJncyAwCnB1c2hieXRlcyAweDY0MzNjZTRkIC8vICJkZW1vdGVfZnJvbV9hZG1pbihwYXksYWNjb3VudClzdHJpbmciCj09CmJueiBtYWluX2wzNgp0eG5hIEFwcGxpY2F0aW9uQXJncyAwCnB1c2hieXRlcyAweDJlNGM5ZjQ1IC8vICJyZWdpc3Rlcl9jcmVhdG9yKHR4bixzdHJpbmcsc3RyaW5nKShib29sLGJvb2wsdWludDY0LHN0cmluZyxzdHJpbmcsdWludDY0KSIKPT0KYm56IG1haW5fbDM1CnR4bmEgQXBwbGljYXRpb25BcmdzIDAKcHVzaGJ5dGVzIDB4Mzc0Y2IyMzkgLy8gImNyZWF0ZV9zb3VuZF9uZnQodHhuLHN0cmluZyxzdHJpbmcsc3RyaW5nLHN0cmluZyxzdHJpbmcsc3RyaW5nLHN0cmluZyx1aW50NjQsc3RyaW5nLHN0cmluZyxzdHJpbmcsdWludDY0LGJvb2wsYXNzZXQsYWNjb3VudCkodWludDY0LHN0cmluZyx1aW50NjQsc3RyaW5nLHN0cmluZyxzdHJpbmcsc3RyaW5nLHN0cmluZyx1aW50NjQsc3RyaW5nLHN0cmluZyxzdHJpbmcsYWRkcmVzcyxib29sKSIKPT0KYm56IG1haW5fbDM0CnR4bmEgQXBwbGljYXRpb25BcmdzIDAKcHVzaGJ5dGVzIDB4Y2UzYWQzOTIgLy8gImNyZWF0ZV9hcnRfbmZ0KHBheSxzdHJpbmcsc3RyaW5nLHN0cmluZyxzdHJpbmcsdWludDY0LHN0cmluZyxzdHJpbmcsdWludDY0LGFzc2V0LGFjY291bnQpKHVpbnQ2NCxzdHJpbmcsc3RyaW5nLHN0cmluZyx1aW50NjQsc3RyaW5nLHN0cmluZyx1aW50NjQsdWludDY0LGFkZHJlc3MsYm9vbCkiCj09CmJueiBtYWluX2wzMwp0eG5hIEFwcGxpY2F0aW9uQXJncyAwCnB1c2hieXRlcyAweDJiNmUyNTFmIC8vICJjcmVhdGVfYXJ0X2F1Y3Rpb24ocGF5LHN0cmluZyxzdHJpbmcsdWludDY0LHVpbnQ2NCx1aW50NjQpKGFkZHJlc3Msc3RyaW5nLHN0cmluZyx1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQsYWRkcmVzcykiCj09CmJueiBtYWluX2wzMgp0eG5hIEFwcGxpY2F0aW9uQXJncyAwCnB1c2hieXRlcyAweDlhZmY2MTc3IC8vICJiaWRfb25fYXJ0X2F1Y3Rpb24ocGF5LHN0cmluZyx1aW50NjQpKGFkZHJlc3Msc3RyaW5nLHN0cmluZyx1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQsYWRkcmVzcykiCj09CmJueiBtYWluX2wzMQp0eG5hIEFwcGxpY2F0aW9uQXJncyAwCnB1c2hieXRlcyAweDJiODNmZDZjIC8vICJjb21wbGV0ZV9hcnRfYXVjdGlvbihwYXksc3RyaW5nKSh1aW50NjQsc3RyaW5nLHN0cmluZyxzdHJpbmcsdWludDY0LHN0cmluZyxzdHJpbmcsdWludDY0LHVpbnQ2NCxhZGRyZXNzLGJvb2wpIgo9PQpibnogbWFpbl9sMzAKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMApwdXNoYnl0ZXMgMHgzOTQ3OWQ0ZiAvLyAicHVyY2hhc2VfbmZ0KHBheSxheGZlcixzdHJpbmcsc3RyaW5nLGFjY291bnQsYXNzZXQsYXNzZXQsYXhmZXIsYWNjb3VudCl2b2lkIgo9PQpibnogbWFpbl9sMjkKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMApwdXNoYnl0ZXMgMHgwNzUzNmNlMyAvLyAidHJhbnNmZXJfbmZ0KHBheSxhZGRyZXNzLHN0cmluZyxzdHJpbmcpdm9pZCIKPT0KYm56IG1haW5fbDI4CnR4bmEgQXBwbGljYXRpb25BcmdzIDAKcHVzaGJ5dGVzIDB4ZjVjMmFiMjMgLy8gImNyZWF0ZV9wcm9wb3NhbChwYXksc3RyaW5nLHN0cmluZykoc3RyaW5nLHVpbnQ2NCx1aW50NjQsc3RyaW5nKSIKPT0KYm56IG1haW5fbDI3CnR4bmEgQXBwbGljYXRpb25BcmdzIDAKcHVzaGJ5dGVzIDB4Y2E0M2FhOWQgLy8gInZvdGVfb25fcHJvcG9zYWwocGF5LGJvb2wsYXNzZXQsYWNjb3VudCxzdHJpbmcpKHN0cmluZyx1aW50NjQsdWludDY0LHN0cmluZykiCj09CmJueiBtYWluX2wyNgp0eG5hIEFwcGxpY2F0aW9uQXJncyAwCnB1c2hieXRlcyAweDgxNzc3ODFhIC8vICJlbmRfcHJvcG9zYWxfdm90aW5nKHBheSxzdHJpbmcpKHN0cmluZyx1aW50NjQsdWludDY0LHN0cmluZykiCj09CmJueiBtYWluX2wyNQp0eG5hIEFwcGxpY2F0aW9uQXJncyAwCnB1c2hieXRlcyAweGNkZmZhN2IzIC8vICJ1bmZyZWV6ZV9hdXJhcyhwYXksYXNzZXQsYWNjb3VudCl2b2lkIgo9PQpibnogbWFpbl9sMjQKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMApwdXNoYnl0ZXMgMHg1ZTUzZjI5NyAvLyAiY3JlYXRlX2F1cmFfdG9rZW5zKCkodWludDY0LHN0cmluZyx1aW50NjQpIgo9PQpibnogbWFpbl9sMjMKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMApwdXNoYnl0ZXMgMHhhMjA2Mzk2NiAvLyAiY3JlYXRlX2V2ZW50KHBheSxzdHJpbmcsc3RyaW5nLHVpbnQ2NCx1aW50NjQsc3RyaW5nLHVpbnQ2NCkodWludDY0LHN0cmluZyxzdHJpbmcsdWludDY0LHVpbnQ2NCxzdHJpbmcsdWludDY0LGFkZHJlc3MpIgo9PQpibnogbWFpbl9sMjIKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMApwdXNoYnl0ZXMgMHhmY2U2YjFmMSAvLyAicHVyY2hhc2VfZXZlbnRfdGlja2V0KHBheSxzdHJpbmcsc3RyaW5nLGFjY291bnQpKHVpbnQ2NCxzdHJpbmcsc3RyaW5nLHVpbnQ2NCxhZGRyZXNzKSIKPT0KYm56IG1haW5fbDIxCnR4bmEgQXBwbGljYXRpb25BcmdzIDAKcHVzaGJ5dGVzIDB4MDJiZWNlMTEgLy8gImhlbGxvKHN0cmluZylzdHJpbmciCj09CmJueiBtYWluX2wyMAplcnIKbWFpbl9sMjA6CnR4biBPbkNvbXBsZXRpb24KaW50Y18wIC8vIE5vT3AKPT0KdHhuIEFwcGxpY2F0aW9uSUQKaW50Y18wIC8vIDAKIT0KJiYKYXNzZXJ0CmNhbGxzdWIgaGVsbG9jYXN0ZXJfNjIKaW50Y18xIC8vIDEKcmV0dXJuCm1haW5fbDIxOgp0eG4gT25Db21wbGV0aW9uCmludGNfMCAvLyBOb09wCj09CnR4biBBcHBsaWNhdGlvbklECmludGNfMCAvLyAwCiE9CiYmCmFzc2VydApjYWxsc3ViIHB1cmNoYXNlZXZlbnR0aWNrZXRjYXN0ZXJfNjEKaW50Y18xIC8vIDEKcmV0dXJuCm1haW5fbDIyOgp0eG4gT25Db21wbGV0aW9uCmludGNfMCAvLyBOb09wCj09CnR4biBBcHBsaWNhdGlvbklECmludGNfMCAvLyAwCiE9CiYmCmFzc2VydApjYWxsc3ViIGNyZWF0ZWV2ZW50Y2FzdGVyXzYwCmludGNfMSAvLyAxCnJldHVybgptYWluX2wyMzoKdHhuIE9uQ29tcGxldGlvbgppbnRjXzAgLy8gTm9PcAo9PQp0eG4gQXBwbGljYXRpb25JRAppbnRjXzAgLy8gMAohPQomJgphc3NlcnQKY2FsbHN1YiBjcmVhdGVhdXJhdG9rZW5zY2FzdGVyXzU5CmludGNfMSAvLyAxCnJldHVybgptYWluX2wyNDoKdHhuIE9uQ29tcGxldGlvbgppbnRjXzAgLy8gTm9PcAo9PQp0eG4gQXBwbGljYXRpb25JRAppbnRjXzAgLy8gMAohPQomJgphc3NlcnQKY2FsbHN1YiB1bmZyZWV6ZWF1cmFzY2FzdGVyXzU4CmludGNfMSAvLyAxCnJldHVybgptYWluX2wyNToKdHhuIE9uQ29tcGxldGlvbgppbnRjXzAgLy8gTm9PcAo9PQp0eG4gQXBwbGljYXRpb25JRAppbnRjXzAgLy8gMAohPQomJgphc3NlcnQKY2FsbHN1YiBlbmRwcm9wb3NhbHZvdGluZ2Nhc3Rlcl81NwppbnRjXzEgLy8gMQpyZXR1cm4KbWFpbl9sMjY6CnR4biBPbkNvbXBsZXRpb24KaW50Y18wIC8vIE5vT3AKPT0KdHhuIEFwcGxpY2F0aW9uSUQKaW50Y18wIC8vIDAKIT0KJiYKYXNzZXJ0CmNhbGxzdWIgdm90ZW9ucHJvcG9zYWxjYXN0ZXJfNTYKaW50Y18xIC8vIDEKcmV0dXJuCm1haW5fbDI3Ogp0eG4gT25Db21wbGV0aW9uCmludGNfMCAvLyBOb09wCj09CnR4biBBcHBsaWNhdGlvbklECmludGNfMCAvLyAwCiE9CiYmCmFzc2VydApjYWxsc3ViIGNyZWF0ZXByb3Bvc2FsY2FzdGVyXzU1CmludGNfMSAvLyAxCnJldHVybgptYWluX2wyODoKdHhuIE9uQ29tcGxldGlvbgppbnRjXzAgLy8gTm9PcAo9PQp0eG4gQXBwbGljYXRpb25JRAppbnRjXzAgLy8gMAohPQomJgphc3NlcnQKY2FsbHN1YiB0cmFuc2Zlcm5mdGNhc3Rlcl81NAppbnRjXzEgLy8gMQpyZXR1cm4KbWFpbl9sMjk6CnR4biBPbkNvbXBsZXRpb24KaW50Y18wIC8vIE5vT3AKPT0KdHhuIEFwcGxpY2F0aW9uSUQKaW50Y18wIC8vIDAKIT0KJiYKYXNzZXJ0CmNhbGxzdWIgcHVyY2hhc2VuZnRjYXN0ZXJfNTMKaW50Y18xIC8vIDEKcmV0dXJuCm1haW5fbDMwOgp0eG4gT25Db21wbGV0aW9uCmludGNfMCAvLyBOb09wCj09CnR4biBBcHBsaWNhdGlvbklECmludGNfMCAvLyAwCiE9CiYmCmFzc2VydApjYWxsc3ViIGNvbXBsZXRlYXJ0YXVjdGlvbmNhc3Rlcl81MgppbnRjXzEgLy8gMQpyZXR1cm4KbWFpbl9sMzE6CnR4biBPbkNvbXBsZXRpb24KaW50Y18wIC8vIE5vT3AKPT0KdHhuIEFwcGxpY2F0aW9uSUQKaW50Y18wIC8vIDAKIT0KJiYKYXNzZXJ0CmNhbGxzdWIgYmlkb25hcnRhdWN0aW9uY2FzdGVyXzUxCmludGNfMSAvLyAxCnJldHVybgptYWluX2wzMjoKdHhuIE9uQ29tcGxldGlvbgppbnRjXzAgLy8gTm9PcAo9PQp0eG4gQXBwbGljYXRpb25JRAppbnRjXzAgLy8gMAohPQomJgphc3NlcnQKY2FsbHN1YiBjcmVhdGVhcnRhdWN0aW9uY2FzdGVyXzUwCmludGNfMSAvLyAxCnJldHVybgptYWluX2wzMzoKdHhuIE9uQ29tcGxldGlvbgppbnRjXzAgLy8gTm9PcAo9PQp0eG4gQXBwbGljYXRpb25JRAppbnRjXzAgLy8gMAohPQomJgphc3NlcnQKY2FsbHN1YiBjcmVhdGVhcnRuZnRjYXN0ZXJfNDkKaW50Y18xIC8vIDEKcmV0dXJuCm1haW5fbDM0Ogp0eG4gT25Db21wbGV0aW9uCmludGNfMCAvLyBOb09wCj09CnR4biBBcHBsaWNhdGlvbklECmludGNfMCAvLyAwCiE9CiYmCmFzc2VydApjYWxsc3ViIGNyZWF0ZXNvdW5kbmZ0Y2FzdGVyXzQ4CmludGNfMSAvLyAxCnJldHVybgptYWluX2wzNToKdHhuIE9uQ29tcGxldGlvbgppbnRjXzAgLy8gTm9PcAo9PQp0eG4gQXBwbGljYXRpb25JRAppbnRjXzAgLy8gMAohPQomJgphc3NlcnQKY2FsbHN1YiByZWdpc3RlcmNyZWF0b3JjYXN0ZXJfNDcKaW50Y18xIC8vIDEKcmV0dXJuCm1haW5fbDM2Ogp0eG4gT25Db21wbGV0aW9uCmludGNfMCAvLyBOb09wCj09CnR4biBBcHBsaWNhdGlvbklECmludGNfMCAvLyAwCiE9CiYmCmFzc2VydApjYWxsc3ViIGRlbW90ZWZyb21hZG1pbmNhc3Rlcl80NgppbnRjXzEgLy8gMQpyZXR1cm4KbWFpbl9sMzc6CnR4biBPbkNvbXBsZXRpb24KaW50Y18wIC8vIE5vT3AKPT0KdHhuIEFwcGxpY2F0aW9uSUQKaW50Y18wIC8vIDAKIT0KJiYKYXNzZXJ0CmNhbGxzdWIgcHJvbW90ZXRvYWRtaW5jYXN0ZXJfNDUKaW50Y18xIC8vIDEKcmV0dXJuCm1haW5fbDM4Ogp0eG4gT25Db21wbGV0aW9uCmludGNfMCAvLyBOb09wCj09CmJueiBtYWluX2w0NAp0eG4gT25Db21wbGV0aW9uCnB1c2hpbnQgNCAvLyBVcGRhdGVBcHBsaWNhdGlvbgo9PQpibnogbWFpbl9sNDMKdHhuIE9uQ29tcGxldGlvbgpwdXNoaW50IDUgLy8gRGVsZXRlQXBwbGljYXRpb24KPT0KYm56IG1haW5fbDQyCmVycgptYWluX2w0MjoKdHhuIEFwcGxpY2F0aW9uSUQKaW50Y18wIC8vIDAKIT0KYXNzZXJ0CmNhbGxzdWIgZGVsZXRlXzIKaW50Y18xIC8vIDEKcmV0dXJuCm1haW5fbDQzOgp0eG4gQXBwbGljYXRpb25JRAppbnRjXzAgLy8gMAohPQphc3NlcnQKY2FsbHN1YiB1cGRhdGVfMQppbnRjXzEgLy8gMQpyZXR1cm4KbWFpbl9sNDQ6CnR4biBBcHBsaWNhdGlvbklECmludGNfMCAvLyAwCj09CmFzc2VydApjYWxsc3ViIGNyZWF0ZV8wCmludGNfMSAvLyAxCnJldHVybgoKLy8gY3JlYXRlCmNyZWF0ZV8wOgpwcm90byAwIDAKYnl0ZWNfMiAvLyAiYWN0aXZlX3Byb3Bvc2FsIgpieXRlYyA0IC8vICJOb25lIgphcHBfZ2xvYmFsX3B1dApyZXRzdWIKCi8vIHVwZGF0ZQp1cGRhdGVfMToKcHJvdG8gMCAwCnR4biBTZW5kZXIKZ2xvYmFsIENyZWF0b3JBZGRyZXNzCj09Ci8vIHVuYXV0aG9yaXplZAphc3NlcnQKaW50Y18xIC8vIDEKcmV0dXJuCgovLyBkZWxldGUKZGVsZXRlXzI6CnByb3RvIDAgMAp0eG4gU2VuZGVyCmdsb2JhbCBDcmVhdG9yQWRkcmVzcwo9PQovLyB1bmF1dGhvcml6ZWQKYXNzZXJ0CmludGNfMSAvLyAxCnJldHVybgoKLy8gcHJvbW90ZV90b19hZG1pbgpwcm9tb3RldG9hZG1pbl8zOgpwcm90byAyIDEKYnl0ZWNfMCAvLyAiIgpkdXAKZnJhbWVfZGlnIC0yCmNhbGxzdWIgZW5zdXJlemVyb3BheW1lbnRfMjMKZnJhbWVfZGlnIC0yCmNhbGxzdWIgZW5zdXJlc2VuZGVyaXNjcmVhdG9yXzI1CmZyYW1lX2RpZyAtMQp0eG5hcyBBY2NvdW50cwpib3hfbGVuCnN0b3JlIDEKc3RvcmUgMApsb2FkIDEKIQphc3NlcnQKcHVzaGJ5dGVzIDB4MDAwNDU0NzI3NTY1IC8vIDB4MDAwNDU0NzI3NTY1CmZyYW1lX2J1cnkgMQpmcmFtZV9kaWcgLTEKdHhuYXMgQWNjb3VudHMKYm94X2RlbApwb3AKZnJhbWVfZGlnIC0xCnR4bmFzIEFjY291bnRzCmZyYW1lX2RpZyAxCmJveF9wdXQKZnJhbWVfZGlnIC0xCnR4bmFzIEFjY291bnRzCmJveF9nZXQKc3RvcmUgMwpzdG9yZSAyCmxvYWQgMwphc3NlcnQKbG9hZCAyCmZyYW1lX2J1cnkgMApyZXRzdWIKCi8vIGRlbW90ZV9mcm9tX2FkbWluCmRlbW90ZWZyb21hZG1pbl80Ogpwcm90byAyIDEKYnl0ZWNfMCAvLyAiIgpkdXAKZnJhbWVfZGlnIC0yCmNhbGxzdWIgZW5zdXJlemVyb3BheW1lbnRfMjMKZnJhbWVfZGlnIC0yCmNhbGxzdWIgZW5zdXJlc2VuZGVyaXNjcmVhdG9yXzI1CmZyYW1lX2RpZyAtMQp0eG5hcyBBY2NvdW50cwpib3hfbGVuCnN0b3JlIDUKc3RvcmUgNApsb2FkIDUKYXNzZXJ0CnB1c2hieXRlcyAweDAwMDU0NjYxNmM3MzY1IC8vIDB4MDAwNTQ2NjE2YzczNjUKZnJhbWVfYnVyeSAxCmZyYW1lX2RpZyAtMQp0eG5hcyBBY2NvdW50cwpib3hfZGVsCnBvcApmcmFtZV9kaWcgLTEKdHhuYXMgQWNjb3VudHMKZnJhbWVfZGlnIDEKYm94X3B1dApmcmFtZV9kaWcgLTEKdHhuYXMgQWNjb3VudHMKYm94X2dldApzdG9yZSA3CnN0b3JlIDYKbG9hZCA3CmFzc2VydApsb2FkIDYKZnJhbWVfYnVyeSAwCnJldHN1YgoKLy8gcmVnaXN0ZXJfY3JlYXRvcgpyZWdpc3RlcmNyZWF0b3JfNToKcHJvdG8gMyAxCmJ5dGVjXzAgLy8gIiIKZnJhbWVfZGlnIC0zCmd0eG5zIFNlbmRlcgpib3hfbGVuCnN0b3JlIDkKc3RvcmUgOApsb2FkIDkKIQpieiByZWdpc3RlcmNyZWF0b3JfNV9sMgpmcmFtZV9kaWcgLTMKZnJhbWVfZGlnIC0yCmZyYW1lX2RpZyAtMQpjYWxsc3ViIGNyZWF0ZW5mdG93bmVyXzI5CnJlZ2lzdGVyY3JlYXRvcl81X2wyOgpmcmFtZV9kaWcgLTMKZ3R4bnMgU2VuZGVyCmJveF9nZXQKc3RvcmUgMTEKc3RvcmUgMTAKbG9hZCAxMQphc3NlcnQKbG9hZCAxMApmcmFtZV9idXJ5IDAKcmV0c3ViCgovLyBjcmVhdGVfc291bmRfbmZ0CmNyZWF0ZXNvdW5kbmZ0XzY6CnByb3RvIDE2IDEKYnl0ZWNfMCAvLyAiIgpkdXAKaW50Y18wIC8vIDAKYnl0ZWNfMCAvLyAiIgpkdXAKaW50Y18wIC8vIDAKZHVwCmJ5dGVjXzAgLy8gIiIKZHVwCmludGNfMCAvLyAwCnB1c2hieXRlcyAweDAwMDU2ZDc1NzM2OTYzIC8vIDB4MDAwNTZkNzU3MzY5NjMKZnJhbWVfYnVyeSAxCmZyYW1lX2RpZyAtMTYKZnJhbWVfZGlnIDEKY2FsbHN1YiBlbnN1cmVyZWdpc3RlcmVkY3JlYXRpdmVfMjgKZnJhbWVfZGlnIC0xNApleHRyYWN0IDIgMApib3hfbGVuCnN0b3JlIDEzCnN0b3JlIDEyCmxvYWQgMTMKIQphc3NlcnQKaXR4bl9iZWdpbgpwdXNoaW50IDMgLy8gYWNmZwppdHhuX2ZpZWxkIFR5cGVFbnVtCmZyYW1lX2RpZyAtMTUKZXh0cmFjdCAyIDAKaXR4bl9maWVsZCBDb25maWdBc3NldE5hbWUKZnJhbWVfZGlnIC00Cml0eG5fZmllbGQgQ29uZmlnQXNzZXRUb3RhbApmcmFtZV9kaWcgLTUKZXh0cmFjdCAyIDAKaXR4bl9maWVsZCBDb25maWdBc3NldFVSTApmcmFtZV9kaWcgLTE2Cmd0eG5zIFNlbmRlcgppdHhuX2ZpZWxkIENvbmZpZ0Fzc2V0TWFuYWdlcgppdHhuX3N1Ym1pdAppdHhuIENyZWF0ZWRBc3NldElECmZyYW1lX2J1cnkgMgpmcmFtZV9kaWcgLTE2Cmd0eG5zIFNlbmRlcgpmcmFtZV9idXJ5IDMKZnJhbWVfZGlnIDMKbGVuCmludGNfMyAvLyAzMgo9PQphc3NlcnQKZnJhbWVfZGlnIDIKaXRvYgpmcmFtZV9kaWcgLTE0CmZyYW1lX2J1cnkgOApmcmFtZV9kaWcgOApmcmFtZV9idXJ5IDcKcHVzaGludCA3NSAvLyA3NQpmcmFtZV9idXJ5IDUKZnJhbWVfZGlnIDUKZnJhbWVfZGlnIDgKbGVuCisKZnJhbWVfYnVyeSA2CmZyYW1lX2RpZyA2CmludGNfMiAvLyA2NTUzNgo8CmFzc2VydApmcmFtZV9kaWcgNQppdG9iCmV4dHJhY3QgNiAwCmNvbmNhdApmcmFtZV9kaWcgLTQKaXRvYgpjb25jYXQKZnJhbWVfZGlnIC0xMwpmcmFtZV9idXJ5IDgKZnJhbWVfZGlnIDcKZnJhbWVfZGlnIDgKY29uY2F0CmZyYW1lX2J1cnkgNwpmcmFtZV9kaWcgNgpmcmFtZV9idXJ5IDUKZnJhbWVfZGlnIDUKZnJhbWVfZGlnIDgKbGVuCisKZnJhbWVfYnVyeSA2CmZyYW1lX2RpZyA2CmludGNfMiAvLyA2NTUzNgo8CmFzc2VydApmcmFtZV9kaWcgNQppdG9iCmV4dHJhY3QgNiAwCmNvbmNhdApmcmFtZV9kaWcgLTEyCmZyYW1lX2J1cnkgOApmcmFtZV9kaWcgNwpmcmFtZV9kaWcgOApjb25jYXQKZnJhbWVfYnVyeSA3CmZyYW1lX2RpZyA2CmZyYW1lX2J1cnkgNQpmcmFtZV9kaWcgNQpmcmFtZV9kaWcgOApsZW4KKwpmcmFtZV9idXJ5IDYKZnJhbWVfZGlnIDYKaW50Y18yIC8vIDY1NTM2CjwKYXNzZXJ0CmZyYW1lX2RpZyA1Cml0b2IKZXh0cmFjdCA2IDAKY29uY2F0CmZyYW1lX2RpZyAtMTEKZnJhbWVfYnVyeSA4CmZyYW1lX2RpZyA3CmZyYW1lX2RpZyA4CmNvbmNhdApmcmFtZV9idXJ5IDcKZnJhbWVfZGlnIDYKZnJhbWVfYnVyeSA1CmZyYW1lX2RpZyA1CmZyYW1lX2RpZyA4CmxlbgorCmZyYW1lX2J1cnkgNgpmcmFtZV9kaWcgNgppbnRjXzIgLy8gNjU1MzYKPAphc3NlcnQKZnJhbWVfZGlnIDUKaXRvYgpleHRyYWN0IDYgMApjb25jYXQKZnJhbWVfZGlnIC0xMApmcmFtZV9idXJ5IDgKZnJhbWVfZGlnIDcKZnJhbWVfZGlnIDgKY29uY2F0CmZyYW1lX2J1cnkgNwpmcmFtZV9kaWcgNgpmcmFtZV9idXJ5IDUKZnJhbWVfZGlnIDUKZnJhbWVfZGlnIDgKbGVuCisKZnJhbWVfYnVyeSA2CmZyYW1lX2RpZyA2CmludGNfMiAvLyA2NTUzNgo8CmFzc2VydApmcmFtZV9kaWcgNQppdG9iCmV4dHJhY3QgNiAwCmNvbmNhdApmcmFtZV9kaWcgLTkKZnJhbWVfYnVyeSA4CmZyYW1lX2RpZyA3CmZyYW1lX2RpZyA4CmNvbmNhdApmcmFtZV9idXJ5IDcKZnJhbWVfZGlnIDYKZnJhbWVfYnVyeSA1CmZyYW1lX2RpZyA1CmZyYW1lX2RpZyA4CmxlbgorCmZyYW1lX2J1cnkgNgpmcmFtZV9kaWcgNgppbnRjXzIgLy8gNjU1MzYKPAphc3NlcnQKZnJhbWVfZGlnIDUKaXRvYgpleHRyYWN0IDYgMApjb25jYXQKZnJhbWVfZGlnIC04Cml0b2IKY29uY2F0CmZyYW1lX2RpZyAtNwpmcmFtZV9idXJ5IDgKZnJhbWVfZGlnIDcKZnJhbWVfZGlnIDgKY29uY2F0CmZyYW1lX2J1cnkgNwpmcmFtZV9kaWcgNgpmcmFtZV9idXJ5IDUKZnJhbWVfZGlnIDUKZnJhbWVfZGlnIDgKbGVuCisKZnJhbWVfYnVyeSA2CmZyYW1lX2RpZyA2CmludGNfMiAvLyA2NTUzNgo8CmFzc2VydApmcmFtZV9kaWcgNQppdG9iCmV4dHJhY3QgNiAwCmNvbmNhdApmcmFtZV9kaWcgLTYKZnJhbWVfYnVyeSA4CmZyYW1lX2RpZyA3CmZyYW1lX2RpZyA4CmNvbmNhdApmcmFtZV9idXJ5IDcKZnJhbWVfZGlnIDYKZnJhbWVfYnVyeSA1CmZyYW1lX2RpZyA1CmZyYW1lX2RpZyA4CmxlbgorCmZyYW1lX2J1cnkgNgpmcmFtZV9kaWcgNgppbnRjXzIgLy8gNjU1MzYKPAphc3NlcnQKZnJhbWVfZGlnIDUKaXRvYgpleHRyYWN0IDYgMApjb25jYXQKZnJhbWVfZGlnIC01CmZyYW1lX2J1cnkgOApmcmFtZV9kaWcgNwpmcmFtZV9kaWcgOApjb25jYXQKZnJhbWVfYnVyeSA3CmZyYW1lX2RpZyA2CmZyYW1lX2J1cnkgNQpmcmFtZV9kaWcgNQppdG9iCmV4dHJhY3QgNiAwCmNvbmNhdApmcmFtZV9kaWcgMwpjb25jYXQKYnl0ZWNfMyAvLyAweDAwCmludGNfMCAvLyAwCmZyYW1lX2RpZyAtMwpzZXRiaXQKY29uY2F0CmZyYW1lX2RpZyA3CmNvbmNhdApmcmFtZV9idXJ5IDQKZnJhbWVfZGlnIC0xNApleHRyYWN0IDIgMApib3hfZGVsCnBvcApmcmFtZV9kaWcgLTE0CmV4dHJhY3QgMiAwCmZyYW1lX2RpZyA0CmJveF9wdXQKZnJhbWVfZGlnIDMKY2FsbHN1YiBpbmNyZW1lbnRjcmVhdG9ybmZ0Y291bnRfMzAKaW50Y18xIC8vIDEKZnJhbWVfYnVyeSA5CmZyYW1lX2RpZyAzCmZyYW1lX2RpZyA5CmNhbGxzdWIgc2VuZGF1cmF0b2tlbl80MQpmcmFtZV9kaWcgLTE0CmV4dHJhY3QgMiAwCmJveF9nZXQKc3RvcmUgMTUKc3RvcmUgMTQKbG9hZCAxNQphc3NlcnQKbG9hZCAxNApmcmFtZV9idXJ5IDAKcmV0c3ViCgovLyBjcmVhdGVfYXJ0X25mdApjcmVhdGVhcnRuZnRfNzoKcHJvdG8gMTEgMQpieXRlY18wIC8vICIiCmR1cAppbnRjXzAgLy8gMApieXRlY18wIC8vICIiCmludGNfMCAvLyAwCmR1cApieXRlY18wIC8vICIiCmludGNfMCAvLyAwCmR1cApieXRlY18wIC8vICIiCmR1cAppbnRjXzAgLy8gMApmcmFtZV9kaWcgLTExCmNhbGxzdWIgZW5zdXJlemVyb3BheW1lbnRfMjMKZnJhbWVfZGlnIC0xMApleHRyYWN0IDIgMApib3hfbGVuCnN0b3JlIDI3CnN0b3JlIDI2CmxvYWQgMjcKIQphc3NlcnQKcHVzaGJ5dGVzIDB4MDAwMzYxNzI3NCAvLyAweDAwMDM2MTcyNzQKZnJhbWVfYnVyeSAxCmZyYW1lX2RpZyAtMTEKZnJhbWVfZGlnIDEKY2FsbHN1YiBlbnN1cmVyZWdpc3RlcmVkY3JlYXRpdmVfMjgKaXR4bl9iZWdpbgpwdXNoaW50IDMgLy8gYWNmZwppdHhuX2ZpZWxkIFR5cGVFbnVtCmZyYW1lX2RpZyAtOQpleHRyYWN0IDIgMAppdHhuX2ZpZWxkIENvbmZpZ0Fzc2V0TmFtZQpmcmFtZV9kaWcgLTYKaXR4bl9maWVsZCBDb25maWdBc3NldFRvdGFsCmZyYW1lX2RpZyAtNApleHRyYWN0IDIgMAppdHhuX2ZpZWxkIENvbmZpZ0Fzc2V0VVJMCmZyYW1lX2RpZyAtMTEKZ3R4bnMgU2VuZGVyCml0eG5fZmllbGQgQ29uZmlnQXNzZXRNYW5hZ2VyCml0eG5fc3VibWl0Cml0eG4gQ3JlYXRlZEFzc2V0SUQKZnJhbWVfYnVyeSAyCmZyYW1lX2RpZyAtMTEKZ3R4bnMgU2VuZGVyCmZyYW1lX2J1cnkgMwpmcmFtZV9kaWcgMwpsZW4KaW50Y18zIC8vIDMyCj09CmFzc2VydAppbnRjXzAgLy8gMApmcmFtZV9idXJ5IDQKaW50Y18wIC8vIDAKZnJhbWVfYnVyeSA1CmZyYW1lX2RpZyAyCml0b2IKZnJhbWVfZGlnIC0xMApmcmFtZV9idXJ5IDEwCmZyYW1lX2RpZyAxMApmcmFtZV9idXJ5IDkKcHVzaGludCA3NSAvLyA3NQpmcmFtZV9idXJ5IDcKZnJhbWVfZGlnIDcKZnJhbWVfZGlnIDEwCmxlbgorCmZyYW1lX2J1cnkgOApmcmFtZV9kaWcgOAppbnRjXzIgLy8gNjU1MzYKPAphc3NlcnQKZnJhbWVfZGlnIDcKaXRvYgpleHRyYWN0IDYgMApjb25jYXQKZnJhbWVfZGlnIC04CmZyYW1lX2J1cnkgMTAKZnJhbWVfZGlnIDkKZnJhbWVfZGlnIDEwCmNvbmNhdApmcmFtZV9idXJ5IDkKZnJhbWVfZGlnIDgKZnJhbWVfYnVyeSA3CmZyYW1lX2RpZyA3CmZyYW1lX2RpZyAxMApsZW4KKwpmcmFtZV9idXJ5IDgKZnJhbWVfZGlnIDgKaW50Y18yIC8vIDY1NTM2CjwKYXNzZXJ0CmZyYW1lX2RpZyA3Cml0b2IKZXh0cmFjdCA2IDAKY29uY2F0CmZyYW1lX2RpZyAtNwpmcmFtZV9idXJ5IDEwCmZyYW1lX2RpZyA5CmZyYW1lX2RpZyAxMApjb25jYXQKZnJhbWVfYnVyeSA5CmZyYW1lX2RpZyA4CmZyYW1lX2J1cnkgNwpmcmFtZV9kaWcgNwpmcmFtZV9kaWcgMTAKbGVuCisKZnJhbWVfYnVyeSA4CmZyYW1lX2RpZyA4CmludGNfMiAvLyA2NTUzNgo8CmFzc2VydApmcmFtZV9kaWcgNwppdG9iCmV4dHJhY3QgNiAwCmNvbmNhdApmcmFtZV9kaWcgLTYKaXRvYgpjb25jYXQKZnJhbWVfZGlnIC01CmZyYW1lX2J1cnkgMTAKZnJhbWVfZGlnIDkKZnJhbWVfZGlnIDEwCmNvbmNhdApmcmFtZV9idXJ5IDkKZnJhbWVfZGlnIDgKZnJhbWVfYnVyeSA3CmZyYW1lX2RpZyA3CmZyYW1lX2RpZyAxMApsZW4KKwpmcmFtZV9idXJ5IDgKZnJhbWVfZGlnIDgKaW50Y18yIC8vIDY1NTM2CjwKYXNzZXJ0CmZyYW1lX2RpZyA3Cml0b2IKZXh0cmFjdCA2IDAKY29uY2F0CmZyYW1lX2RpZyAtNApmcmFtZV9idXJ5IDEwCmZyYW1lX2RpZyA5CmZyYW1lX2RpZyAxMApjb25jYXQKZnJhbWVfYnVyeSA5CmZyYW1lX2RpZyA4CmZyYW1lX2J1cnkgNwpmcmFtZV9kaWcgNwppdG9iCmV4dHJhY3QgNiAwCmNvbmNhdApmcmFtZV9kaWcgLTMKaXRvYgpjb25jYXQKZnJhbWVfZGlnIDQKaXRvYgpjb25jYXQKZnJhbWVfZGlnIDMKY29uY2F0CmJ5dGVjXzMgLy8gMHgwMAppbnRjXzAgLy8gMApmcmFtZV9kaWcgNQpzZXRiaXQKY29uY2F0CmZyYW1lX2RpZyA5CmNvbmNhdApmcmFtZV9idXJ5IDYKZnJhbWVfZGlnIC0xMApleHRyYWN0IDIgMApib3hfZGVsCnBvcApmcmFtZV9kaWcgLTEwCmV4dHJhY3QgMiAwCmZyYW1lX2RpZyA2CmJveF9wdXQKZnJhbWVfZGlnIDMKY2FsbHN1YiBpbmNyZW1lbnRjcmVhdG9ybmZ0Y291bnRfMzAKaW50Y18xIC8vIDEKZnJhbWVfYnVyeSAxMQpmcmFtZV9kaWcgMwpmcmFtZV9kaWcgMTEKY2FsbHN1YiBzZW5kYXVyYXRva2VuXzQxCmZyYW1lX2RpZyAtMTAKZXh0cmFjdCAyIDAKYm94X2dldApzdG9yZSAyOQpzdG9yZSAyOApsb2FkIDI5CmFzc2VydApsb2FkIDI4CmZyYW1lX2J1cnkgMApyZXRzdWIKCi8vIGNyZWF0ZV9hcnRfYXVjdGlvbgpjcmVhdGVhcnRhdWN0aW9uXzg6CnByb3RvIDYgMQpieXRlY18wIC8vICIiCmR1cG4gMwpmcmFtZV9kaWcgLTUKZXh0cmFjdCAyIDAKYm94X2xlbgpzdG9yZSAzMQpzdG9yZSAzMApsb2FkIDMxCiEKLy8gQW4gYXVjdGlvbiB3aXRoIHRoaXMga2V5IGFscmVhZHkgZXhpc3RzCmFzc2VydApmcmFtZV9kaWcgLTYKY2FsbHN1YiBlbnN1cmV6ZXJvcGF5bWVudF8yMwpmcmFtZV9kaWcgLTIKZnJhbWVfZGlnIC0xCjwKLy8gRW5kIGRhdGUgbXVzdCBiZSBncmVhdGVyIHRoYXQgc3RhcnQgZGF0ZQphc3NlcnQKZnJhbWVfZGlnIC00CmV4dHJhY3QgMiAwCmJveF9sZW4Kc3RvcmUgMzMKc3RvcmUgMzIKbG9hZCAzMwovLyBBcnQgTkZUIHdpdGggdGhpcyBrZXkgd2FzIG5vdCBmb3VuZAphc3NlcnQKZnJhbWVfZGlnIC00CmV4dHJhY3QgMiAwCmJveF9nZXQKc3RvcmUgMzUKc3RvcmUgMzQKbG9hZCAzNQphc3NlcnQKbG9hZCAzNApmcmFtZV9idXJ5IDEKZnJhbWVfZGlnIDEKZXh0cmFjdCA0MiAzMgpmcmFtZV9idXJ5IDIKZnJhbWVfZGlnIDEKZnJhbWVfZGlnIDEKcHVzaGludCAxMiAvLyAxMgpleHRyYWN0X3VpbnQxNgpmcmFtZV9kaWcgMQpwdXNoaW50IDIyIC8vIDIyCmV4dHJhY3RfdWludDE2CnN1YnN0cmluZzMKZnJhbWVfYnVyeSAzCmZyYW1lX2RpZyAyCmZyYW1lX2RpZyAtNgpndHhucyBTZW5kZXIKPT0KLy8gT25seSB0aGUgb3duZXIgb2YgdGhpcyBORlQgY2FuIGF1Y3Rpb24gaXQKYXNzZXJ0CmZyYW1lX2RpZyAtNgpmcmFtZV9kaWcgLTUKZnJhbWVfZGlnIC00CmZyYW1lX2RpZyAzCmZyYW1lX2RpZyAtMwpmcmFtZV9kaWcgLTIKZnJhbWVfZGlnIC0xCmNhbGxzdWIgY3JlYXRlYXJ0YXVjdGlvbl8zMQpmcmFtZV9kaWcgLTUKZXh0cmFjdCAyIDAKYm94X2dldApzdG9yZSAzNwpzdG9yZSAzNgpsb2FkIDM3CmFzc2VydApsb2FkIDM2CmZyYW1lX2J1cnkgMApyZXRzdWIKCi8vIGJpZF9vbl9hcnRfYXVjdGlvbgpiaWRvbmFydGF1Y3Rpb25fOToKcHJvdG8gMyAxCmJ5dGVjXzAgLy8gIiIKZnJhbWVfZGlnIC0zCmNhbGxzdWIgZW5zdXJlemVyb3BheW1lbnRfMjMKZnJhbWVfZGlnIC0yCmV4dHJhY3QgMiAwCmJveF9sZW4Kc3RvcmUgNDEKc3RvcmUgNDAKbG9hZCA0MQphc3NlcnQKZnJhbWVfZGlnIC0zCmZyYW1lX2RpZyAtMgpmcmFtZV9kaWcgLTEKY2FsbHN1YiBwZXJmb3JtYXVjdGlvbmJpZF8zMgpmcmFtZV9kaWcgLTIKZXh0cmFjdCAyIDAKYm94X2dldApzdG9yZSA0MwpzdG9yZSA0Mgpsb2FkIDQzCmFzc2VydApsb2FkIDQyCmZyYW1lX2J1cnkgMApyZXRzdWIKCi8vIGNvbXBsZXRlX2FydF9hdWN0aW9uCmNvbXBsZXRlYXJ0YXVjdGlvbl8xMDoKcHJvdG8gMiAxCmJ5dGVjXzAgLy8gIiIKZHVwbiAzCmZyYW1lX2RpZyAtMgpjYWxsc3ViIGVuc3VyZXplcm9wYXltZW50XzIzCmZyYW1lX2RpZyAtMQpleHRyYWN0IDIgMApib3hfbGVuCnN0b3JlIDQ3CnN0b3JlIDQ2CmxvYWQgNDcKYXNzZXJ0CmZyYW1lX2RpZyAtMQpleHRyYWN0IDIgMApib3hfZ2V0CnN0b3JlIDQ5CnN0b3JlIDQ4CmxvYWQgNDkKYXNzZXJ0CmxvYWQgNDgKZnJhbWVfYnVyeSAxCmZyYW1lX2RpZyAxCmZyYW1lX2RpZyAxCmludGNfMyAvLyAzMgpleHRyYWN0X3VpbnQxNgpmcmFtZV9kaWcgMQpwdXNoaW50IDM0IC8vIDM0CmV4dHJhY3RfdWludDE2CnN1YnN0cmluZzMKZnJhbWVfYnVyeSAyCmZyYW1lX2RpZyAxCmV4dHJhY3QgMCAzMgpmcmFtZV9idXJ5IDMKZnJhbWVfZGlnIDMKZnJhbWVfZGlnIC0yCmd0eG5zIFNlbmRlcgo9PQphc3NlcnQKZnJhbWVfZGlnIC0xCmNhbGxzdWIgdHJhbnNmZXJhcnRhdWN0aW9uaXRlbXRvaGlnaGVzdGJpZGRlcl8zMwpmcmFtZV9kaWcgMgpleHRyYWN0IDIgMApib3hfZ2V0CnN0b3JlIDUxCnN0b3JlIDUwCmxvYWQgNTEKYXNzZXJ0CmxvYWQgNTAKZnJhbWVfYnVyeSAwCnJldHN1YgoKLy8gcHVyY2hhc2VfbmZ0CnB1cmNoYXNlbmZ0XzExOgpwcm90byA5IDAKZnJhbWVfZGlnIC02CmV4dHJhY3QgMiAwCmJ5dGVjIDcgLy8gInNvdW5kIgo9PQpmcmFtZV9kaWcgLTYKZXh0cmFjdCAyIDAKYnl0ZWMgNSAvLyAiYXJ0Igo9PQp8fAphc3NlcnQKZnJhbWVfZGlnIC02CmV4dHJhY3QgMiAwCmJ5dGVjIDcgLy8gInNvdW5kIgo9PQpibnogcHVyY2hhc2VuZnRfMTFfbDIKZnJhbWVfZGlnIC05CmZyYW1lX2RpZyAtNwpjYWxsc3ViIHRyYW5zZmVyYXJ0bmZ0XzM3CmIgcHVyY2hhc2VuZnRfMTFfbDMKcHVyY2hhc2VuZnRfMTFfbDI6CmZyYW1lX2RpZyAtOQpmcmFtZV9kaWcgLTcKY2FsbHN1YiB0cmFuc2ZlcnNvdW5kbmZ0XzM2CnB1cmNoYXNlbmZ0XzExX2wzOgpyZXRzdWIKCi8vIHRyYW5zZmVyX25mdAp0cmFuc2Zlcm5mdF8xMjoKcHJvdG8gNCAwCmZyYW1lX2RpZyAtNApndHhucyBBbW91bnQKaW50Y18wIC8vIDAKPT0KYXNzZXJ0CmZyYW1lX2RpZyAtMQpleHRyYWN0IDIgMApwdXNoYnl0ZXMgMHg3NDY5NjM2YjY1NzQgLy8gInRpY2tldCIKPT0KZnJhbWVfZGlnIC0xCmV4dHJhY3QgMiAwCmJ5dGVjIDUgLy8gImFydCIKPT0KfHwKYXNzZXJ0CmZyYW1lX2RpZyAtMQpleHRyYWN0IDIgMApieXRlYyA1IC8vICJhcnQiCj09CmJ6IHRyYW5zZmVybmZ0XzEyX2wyCmZyYW1lX2RpZyAtNApmcmFtZV9kaWcgLTIKZnJhbWVfZGlnIC0zCmNhbGxzdWIgdmFsaWRhdGVhbmR1cGRhdGVhcnRuZnRvd25lcl8zOQp0cmFuc2Zlcm5mdF8xMl9sMjoKcmV0c3ViCgovLyBjcmVhdGVfcHJvcG9zYWwKY3JlYXRlcHJvcG9zYWxfMTM6CnByb3RvIDMgMQpieXRlY18wIC8vICIiCmR1cAppbnRjXzAgLy8gMApkdXAKYnl0ZWNfMCAvLyAiIgppbnRjXzAgLy8gMApkdXAKYnl0ZWNfMCAvLyAiIgpkdXAKZnJhbWVfZGlnIC0zCmd0eG5zIFNlbmRlcgpmcmFtZV9idXJ5IDEKZnJhbWVfZGlnIDEKbGVuCmludGNfMyAvLyAzMgo9PQphc3NlcnQKZnJhbWVfZGlnIDEKY2FsbHN1YiBlbnN1cmVpc2FkbWlub3JhcHBjcmVhdG9yXzI2CmZyYW1lX2RpZyAtMwpjYWxsc3ViIGVuc3VyZXplcm9wYXltZW50XzIzCmZyYW1lX2RpZyAtMwpjYWxsc3ViIGVuc3VyZW5mdG93bmVyZXhpc3RzZnJvbXR4bl8yMgpieXRlY18yIC8vICJhY3RpdmVfcHJvcG9zYWwiCmFwcF9nbG9iYWxfZ2V0CmJ5dGVjIDQgLy8gIk5vbmUiCj09Ci8vIFRoZXJlJ3MgYWxyZWFkeSBhbiBhY3RpdmUgcHJvcG9zYWwKYXNzZXJ0CmZyYW1lX2RpZyAtMgpleHRyYWN0IDIgMApib3hfbGVuCnN0b3JlIDY3CnN0b3JlIDY2CmxvYWQgNjcKIQovLyBQcm9wb3NhbCB3aXRoIHRoaXMga2V5IGFscmVhZHkgZXhpc3RzCmFzc2VydAppbnRjXzAgLy8gMApmcmFtZV9idXJ5IDIKaW50Y18wIC8vIDAKZnJhbWVfYnVyeSAzCmZyYW1lX2RpZyAtMgpmcmFtZV9idXJ5IDgKZnJhbWVfZGlnIDgKZnJhbWVfYnVyeSA3CnB1c2hpbnQgMjAgLy8gMjAKZnJhbWVfYnVyeSA1CmZyYW1lX2RpZyA1CmZyYW1lX2RpZyA4CmxlbgorCmZyYW1lX2J1cnkgNgpmcmFtZV9kaWcgNgppbnRjXzIgLy8gNjU1MzYKPAphc3NlcnQKZnJhbWVfZGlnIDUKaXRvYgpleHRyYWN0IDYgMApmcmFtZV9kaWcgMgppdG9iCmNvbmNhdApmcmFtZV9kaWcgMwppdG9iCmNvbmNhdApmcmFtZV9kaWcgLTEKZnJhbWVfYnVyeSA4CmZyYW1lX2RpZyA3CmZyYW1lX2RpZyA4CmNvbmNhdApmcmFtZV9idXJ5IDcKZnJhbWVfZGlnIDYKZnJhbWVfYnVyeSA1CmZyYW1lX2RpZyA1Cml0b2IKZXh0cmFjdCA2IDAKY29uY2F0CmZyYW1lX2RpZyA3CmNvbmNhdApmcmFtZV9idXJ5IDQKZnJhbWVfZGlnIC0yCmV4dHJhY3QgMiAwCmJveF9kZWwKcG9wCmZyYW1lX2RpZyAtMgpleHRyYWN0IDIgMApmcmFtZV9kaWcgNApib3hfcHV0CmJ5dGVjXzIgLy8gImFjdGl2ZV9wcm9wb3NhbCIKZnJhbWVfZGlnIC0yCmV4dHJhY3QgMiAwCmFwcF9nbG9iYWxfcHV0CmZyYW1lX2RpZyAtMgpleHRyYWN0IDIgMApib3hfZ2V0CnN0b3JlIDY5CnN0b3JlIDY4CmxvYWQgNjkKYXNzZXJ0CmxvYWQgNjgKZnJhbWVfYnVyeSAwCnJldHN1YgoKLy8gdm90ZV9vbl9wcm9wb3NhbAp2b3Rlb25wcm9wb3NhbF8xNDoKcHJvdG8gNSAxCmJ5dGVjXzAgLy8gIiIKaW50Y18wIC8vIDAKYnl0ZWNfMCAvLyAiIgpkdXAKaW50Y18wIC8vIDAKZHVwCmJ5dGVjXzAgLy8gIiIKaW50Y18wIC8vIDAKZHVwCmJ5dGVjXzAgLy8gIiIKZHVwCmZyYW1lX2RpZyAtNQpjYWxsc3ViIGVuc3VyZW5mdG93bmVyZXhpc3RzZnJvbXR4bl8yMgpmcmFtZV9kaWcgLTUKY2FsbHN1YiBlbnN1cmV6ZXJvcGF5bWVudF8yMwpmcmFtZV9kaWcgLTEKY2FsbHN1YiBlbnN1cmVwcm9wb3NhbGV4aXN0c18yNApmcmFtZV9kaWcgLTEKZXh0cmFjdCAyIDAKYnl0ZWNfMiAvLyAiYWN0aXZlX3Byb3Bvc2FsIgphcHBfZ2xvYmFsX2dldAo9PQovLyBUaGlzIHByb3Bvc2FsIGlzIGN1cnJlbmx0eSBub3QgYWN0aXZlCmFzc2VydApmcmFtZV9kaWcgLTUKY2FsbHN1YiBlbnN1cmVoYXNhdXJhc180MgppbnRjXzAgLy8gMApmcmFtZV9idXJ5IDEKZnJhbWVfZGlnIC01CmZyYW1lX2RpZyAxCmNhbGxzdWIgZW5zdXJlYXVyYXNmcm96ZW5zdGF0dXNfNDMKZnJhbWVfZGlnIC0xCmV4dHJhY3QgMiAwCmJveF9nZXQKc3RvcmUgNzUKc3RvcmUgNzQKbG9hZCA3NQphc3NlcnQKbG9hZCA3NApmcmFtZV9idXJ5IDIKZnJhbWVfZGlnIDIKZnJhbWVfZGlnIDIKaW50Y18wIC8vIDAKZXh0cmFjdF91aW50MTYKZnJhbWVfZGlnIDIKcHVzaGludCAxOCAvLyAxOApleHRyYWN0X3VpbnQxNgpzdWJzdHJpbmczCmZyYW1lX2J1cnkgMwpmcmFtZV9kaWcgMgpwdXNoaW50IDIgLy8gMgpleHRyYWN0X3VpbnQ2NApmcmFtZV9idXJ5IDQKZnJhbWVfZGlnIDIKcHVzaGludCAxMCAvLyAxMApleHRyYWN0X3VpbnQ2NApmcmFtZV9idXJ5IDUKZnJhbWVfZGlnIDIKZnJhbWVfZGlnIDIKcHVzaGludCAxOCAvLyAxOApleHRyYWN0X3VpbnQxNgpkaWcgMQpsZW4Kc3Vic3RyaW5nMwpmcmFtZV9idXJ5IDYKZnJhbWVfZGlnIC00CmJueiB2b3Rlb25wcm9wb3NhbF8xNF9sMgpmcmFtZV9kaWcgNQppbnRjXzEgLy8gMQorCmZyYW1lX2J1cnkgNQpiIHZvdGVvbnByb3Bvc2FsXzE0X2wzCnZvdGVvbnByb3Bvc2FsXzE0X2wyOgpmcmFtZV9kaWcgNAppbnRjXzEgLy8gMQorCmZyYW1lX2J1cnkgNAp2b3Rlb25wcm9wb3NhbF8xNF9sMzoKZnJhbWVfZGlnIDMKZnJhbWVfYnVyeSAxMApmcmFtZV9kaWcgMTAKZnJhbWVfYnVyeSA5CnB1c2hpbnQgMjAgLy8gMjAKZnJhbWVfYnVyeSA3CmZyYW1lX2RpZyA3CmZyYW1lX2RpZyAxMApsZW4KKwpmcmFtZV9idXJ5IDgKZnJhbWVfZGlnIDgKaW50Y18yIC8vIDY1NTM2CjwKYXNzZXJ0CmZyYW1lX2RpZyA3Cml0b2IKZXh0cmFjdCA2IDAKZnJhbWVfZGlnIDQKaXRvYgpjb25jYXQKZnJhbWVfZGlnIDUKaXRvYgpjb25jYXQKZnJhbWVfZGlnIDYKZnJhbWVfYnVyeSAxMApmcmFtZV9kaWcgOQpmcmFtZV9kaWcgMTAKY29uY2F0CmZyYW1lX2J1cnkgOQpmcmFtZV9kaWcgOApmcmFtZV9idXJ5IDcKZnJhbWVfZGlnIDcKaXRvYgpleHRyYWN0IDYgMApjb25jYXQKZnJhbWVfZGlnIDkKY29uY2F0CmZyYW1lX2J1cnkgMgpmcmFtZV9kaWcgLTEKZXh0cmFjdCAyIDAKYm94X2RlbApwb3AKZnJhbWVfZGlnIC0xCmV4dHJhY3QgMiAwCmZyYW1lX2RpZyAyCmJveF9wdXQKaW50Y18xIC8vIDEKZnJhbWVfYnVyeSAxCmZyYW1lX2RpZyAtNQpmcmFtZV9kaWcgMQpjYWxsc3ViIHNldGF1cmF0b2tlbnNmcm96ZW5fNDQKZnJhbWVfZGlnIC01CmZyYW1lX2RpZyAxCmNhbGxzdWIgZW5zdXJlYXVyYXNmcm96ZW5zdGF0dXNfNDMKZnJhbWVfZGlnIC0xCmV4dHJhY3QgMiAwCmJveF9nZXQKc3RvcmUgNzcKc3RvcmUgNzYKbG9hZCA3Nwphc3NlcnQKbG9hZCA3NgpmcmFtZV9idXJ5IDAKcmV0c3ViCgovLyBlbmRfcHJvcG9zYWxfdm90aW5nCmVuZHByb3Bvc2Fsdm90aW5nXzE1Ogpwcm90byAyIDEKYnl0ZWNfMCAvLyAiIgpkdXAKZnJhbWVfZGlnIC0yCmNhbGxzdWIgZW5zdXJlemVyb3BheW1lbnRfMjMKZnJhbWVfZGlnIC0yCmd0eG5zIFNlbmRlcgpmcmFtZV9idXJ5IDEKZnJhbWVfZGlnIDEKbGVuCmludGNfMyAvLyAzMgo9PQphc3NlcnQKZnJhbWVfZGlnIDEKY2FsbHN1YiBlbnN1cmVpc2FkbWlub3JhcHBjcmVhdG9yXzI2CmZyYW1lX2RpZyAtMQpjYWxsc3ViIGVuc3VyZXByb3Bvc2FsZXhpc3RzXzI0CmJ5dGVjXzIgLy8gImFjdGl2ZV9wcm9wb3NhbCIKYXBwX2dsb2JhbF9nZXQKZnJhbWVfZGlnIC0xCmV4dHJhY3QgMiAwCj09CmFzc2VydApieXRlY18yIC8vICJhY3RpdmVfcHJvcG9zYWwiCmJ5dGVjIDQgLy8gIk5vbmUiCmFwcF9nbG9iYWxfcHV0CmZyYW1lX2RpZyAtMQpleHRyYWN0IDIgMApib3hfZ2V0CnN0b3JlIDkwCnN0b3JlIDg5CmxvYWQgOTAKYXNzZXJ0CmxvYWQgODkKZnJhbWVfYnVyeSAwCnJldHN1YgoKLy8gdW5mcmVlemVfYXVyYXMKdW5mcmVlemVhdXJhc18xNjoKcHJvdG8gMyAwCmludGNfMCAvLyAwCmZyYW1lX2RpZyAtMwpjYWxsc3ViIGVuc3VyZXplcm9wYXltZW50XzIzCmJ5dGVjXzIgLy8gImFjdGl2ZV9wcm9wb3NhbCIKYXBwX2dsb2JhbF9nZXQKYnl0ZWMgNCAvLyAiTm9uZSIKPT0KLy8gQ2Fubm90IHVuZnJlZXplIHdoaWxlIGEgcHJvcG9zYWwgaXMgc3RpbGwgYWN0aXZlCmFzc2VydAppbnRjXzAgLy8gMApmcmFtZV9idXJ5IDAKZnJhbWVfZGlnIC0zCmZyYW1lX2RpZyAwCmNhbGxzdWIgc2V0YXVyYXRva2Vuc2Zyb3plbl80NApmcmFtZV9kaWcgLTMKZnJhbWVfZGlnIDAKY2FsbHN1YiBlbnN1cmVhdXJhc2Zyb3plbnN0YXR1c180MwpyZXRzdWIKCi8vIGNyZWF0ZV9hdXJhX3Rva2VucwpjcmVhdGVhdXJhdG9rZW5zXzE3Ogpwcm90byAwIDEKYnl0ZWNfMCAvLyAiIgpkdXAKaW50Y18wIC8vIDAKYnl0ZWMgOCAvLyAweDAwMDQ2MTc1NzI2MQpmcmFtZV9idXJ5IDEKZnJhbWVfZGlnIDEKZXh0cmFjdCAyIDAKYm94X2xlbgpzdG9yZSA5MgpzdG9yZSA5MQpsb2FkIDkyCiEKYnogY3JlYXRlYXVyYXRva2Vuc18xN19sMgpwdXNoaW50IDEwMDAwMDAwMDAwMDAgLy8gMTAwMDAwMDAwMDAwMApmcmFtZV9idXJ5IDIKZnJhbWVfZGlnIDEKZnJhbWVfZGlnIDIKY2FsbHN1YiBib290c3RyYXB0b2tlbl80MApmcmFtZV9kaWcgMQpleHRyYWN0IDIgMApib3hfbGVuCnN0b3JlIDk0CnN0b3JlIDkzCmxvYWQgOTQKYXNzZXJ0CmNyZWF0ZWF1cmF0b2tlbnNfMTdfbDI6CmZyYW1lX2RpZyAxCmV4dHJhY3QgMiAwCmJveF9nZXQKc3RvcmUgOTYKc3RvcmUgOTUKbG9hZCA5Ngphc3NlcnQKbG9hZCA5NQpmcmFtZV9idXJ5IDAKcmV0c3ViCgovLyBjcmVhdGVfZXZlbnQKY3JlYXRlZXZlbnRfMTg6CnByb3RvIDcgMQpieXRlY18wIC8vICIiCmludGNfMCAvLyAwCmJ5dGVjXzAgLy8gIiIKZHVwCmludGNfMCAvLyAwCmR1cApieXRlY18wIC8vICIiCmR1cApmcmFtZV9kaWcgLTcKY2FsbHN1YiBlbnN1cmV6ZXJvcGF5bWVudF8yMwpmcmFtZV9kaWcgLTYKZXh0cmFjdCAyIDAKYm94X2xlbgpzdG9yZSAxMDAKc3RvcmUgOTkKbG9hZCAxMDAKIQphc3NlcnQKaXR4bl9iZWdpbgpwdXNoaW50IDMgLy8gYWNmZwppdHhuX2ZpZWxkIFR5cGVFbnVtCmZyYW1lX2RpZyAtNQpleHRyYWN0IDIgMAppdHhuX2ZpZWxkIENvbmZpZ0Fzc2V0TmFtZQppbnRjXzEgLy8gMQppdHhuX2ZpZWxkIENvbmZpZ0Fzc2V0VG90YWwKZnJhbWVfZGlnIC0yCmV4dHJhY3QgMiAwCml0eG5fZmllbGQgQ29uZmlnQXNzZXRVUkwKZnJhbWVfZGlnIC03Cmd0eG5zIFNlbmRlcgppdHhuX2ZpZWxkIENvbmZpZ0Fzc2V0TWFuYWdlcgppdHhuX3N1Ym1pdAppdHhuIENyZWF0ZWRBc3NldElECmZyYW1lX2J1cnkgMQpmcmFtZV9kaWcgLTcKZ3R4bnMgU2VuZGVyCmZyYW1lX2J1cnkgMgpmcmFtZV9kaWcgMgpsZW4KaW50Y18zIC8vIDMyCj09CmFzc2VydApmcmFtZV9kaWcgMQppdG9iCmZyYW1lX2RpZyAtNgpmcmFtZV9idXJ5IDcKZnJhbWVfZGlnIDcKZnJhbWVfYnVyeSA2CnB1c2hpbnQgNzAgLy8gNzAKZnJhbWVfYnVyeSA0CmZyYW1lX2RpZyA0CmZyYW1lX2RpZyA3CmxlbgorCmZyYW1lX2J1cnkgNQpmcmFtZV9kaWcgNQppbnRjXzIgLy8gNjU1MzYKPAphc3NlcnQKZnJhbWVfZGlnIDQKaXRvYgpleHRyYWN0IDYgMApjb25jYXQKZnJhbWVfZGlnIC01CmZyYW1lX2J1cnkgNwpmcmFtZV9kaWcgNgpmcmFtZV9kaWcgNwpjb25jYXQKZnJhbWVfYnVyeSA2CmZyYW1lX2RpZyA1CmZyYW1lX2J1cnkgNApmcmFtZV9kaWcgNApmcmFtZV9kaWcgNwpsZW4KKwpmcmFtZV9idXJ5IDUKZnJhbWVfZGlnIDUKaW50Y18yIC8vIDY1NTM2CjwKYXNzZXJ0CmZyYW1lX2RpZyA0Cml0b2IKZXh0cmFjdCA2IDAKY29uY2F0CmZyYW1lX2RpZyAtNAppdG9iCmNvbmNhdApmcmFtZV9kaWcgLTMKaXRvYgpjb25jYXQKZnJhbWVfZGlnIC0yCmZyYW1lX2J1cnkgNwpmcmFtZV9kaWcgNgpmcmFtZV9kaWcgNwpjb25jYXQKZnJhbWVfYnVyeSA2CmZyYW1lX2RpZyA1CmZyYW1lX2J1cnkgNApmcmFtZV9kaWcgNAppdG9iCmV4dHJhY3QgNiAwCmNvbmNhdApmcmFtZV9kaWcgLTEKaXRvYgpjb25jYXQKZnJhbWVfZGlnIDIKY29uY2F0CmZyYW1lX2RpZyA2CmNvbmNhdApmcmFtZV9idXJ5IDMKZnJhbWVfZGlnIC02CmV4dHJhY3QgMiAwCmJveF9kZWwKcG9wCmZyYW1lX2RpZyAtNgpleHRyYWN0IDIgMApmcmFtZV9kaWcgMwpib3hfcHV0CmZyYW1lX2RpZyAtNgpleHRyYWN0IDIgMApib3hfZ2V0CnN0b3JlIDEwMgpzdG9yZSAxMDEKbG9hZCAxMDIKYXNzZXJ0CmxvYWQgMTAxCmZyYW1lX2J1cnkgMApyZXRzdWIKCi8vIHB1cmNoYXNlX2V2ZW50X3RpY2tldApwdXJjaGFzZWV2ZW50dGlja2V0XzE5Ogpwcm90byA0IDEKYnl0ZWNfMCAvLyAiIgpkdXBuIDIKaW50Y18wIC8vIDAKYnl0ZWNfMCAvLyAiIgpkdXAKaW50Y18wIC8vIDAKYnl0ZWNfMCAvLyAiIgpkdXAKaW50Y18wIC8vIDAKZHVwCmJ5dGVjXzAgLy8gIiIKZHVwCmZyYW1lX2RpZyAtMgpleHRyYWN0IDIgMApib3hfbGVuCnN0b3JlIDEwNApzdG9yZSAxMDMKbG9hZCAxMDQKIQovLyBBIHRpY2tldCB3aXRoIHRoaXMga2V5IGFscmVhZHkgZXhpc3RzCmFzc2VydApmcmFtZV9kaWcgLTMKY2FsbHN1YiBlbnN1cmVldmVudGV4aXN0c18yNwpmcmFtZV9kaWcgLTMKZXh0cmFjdCAyIDAKYm94X2dldApzdG9yZSAxMDYKc3RvcmUgMTA1CmxvYWQgMTA2CmFzc2VydApsb2FkIDEwNQpmcmFtZV9idXJ5IDEKZnJhbWVfZGlnIDEKZXh0cmFjdCAzOCAzMgpmcmFtZV9idXJ5IDIKZnJhbWVfZGlnIDEKcHVzaGludCAzMCAvLyAzMApleHRyYWN0X3VpbnQ2NApmcmFtZV9idXJ5IDMKZnJhbWVfZGlnIDEKZnJhbWVfZGlnIDEKcHVzaGludCAxMCAvLyAxMApleHRyYWN0X3VpbnQxNgpmcmFtZV9kaWcgMQpwdXNoaW50IDI4IC8vIDI4CmV4dHJhY3RfdWludDE2CnN1YnN0cmluZzMKZnJhbWVfYnVyeSA0CmZyYW1lX2RpZyAxCmZyYW1lX2RpZyAxCnB1c2hpbnQgMjggLy8gMjgKZXh0cmFjdF91aW50MTYKZGlnIDEKbGVuCnN1YnN0cmluZzMKZnJhbWVfYnVyeSA1CmZyYW1lX2RpZyAtNApmcmFtZV9kaWcgMwpmcmFtZV9kaWcgMgpjYWxsc3ViIHBheTk1cGVyY2VudF8zOAppdHhuX2JlZ2luCnB1c2hpbnQgMyAvLyBhY2ZnCml0eG5fZmllbGQgVHlwZUVudW0KZnJhbWVfZGlnIDQKZXh0cmFjdCAyIDAKcHVzaGJ5dGVzIDB4MjA1NDY5NjM2YjY1NzQgLy8gIiBUaWNrZXQiCmNvbmNhdAppdHhuX2ZpZWxkIENvbmZpZ0Fzc2V0TmFtZQppbnRjXzEgLy8gMQppdHhuX2ZpZWxkIENvbmZpZ0Fzc2V0VG90YWwKZnJhbWVfZGlnIDUKZXh0cmFjdCAyIDAKaXR4bl9maWVsZCBDb25maWdBc3NldFVSTApmcmFtZV9kaWcgLTQKZ3R4bnMgU2VuZGVyCml0eG5fZmllbGQgQ29uZmlnQXNzZXRNYW5hZ2VyCml0eG5fc3VibWl0Cml0eG4gQ3JlYXRlZEFzc2V0SUQKZnJhbWVfYnVyeSA2CmZyYW1lX2RpZyAtNApndHhucyBTZW5kZXIKZnJhbWVfYnVyeSA3CmZyYW1lX2RpZyA3CmxlbgppbnRjXzMgLy8gMzIKPT0KYXNzZXJ0CmZyYW1lX2RpZyA2Cml0b2IKZnJhbWVfZGlnIC0yCmZyYW1lX2J1cnkgMTIKZnJhbWVfZGlnIDEyCmZyYW1lX2J1cnkgMTEKcHVzaGludCA1MiAvLyA1MgpmcmFtZV9idXJ5IDkKZnJhbWVfZGlnIDkKZnJhbWVfZGlnIDEyCmxlbgorCmZyYW1lX2J1cnkgMTAKZnJhbWVfZGlnIDEwCmludGNfMiAvLyA2NTUzNgo8CmFzc2VydApmcmFtZV9kaWcgOQppdG9iCmV4dHJhY3QgNiAwCmNvbmNhdApmcmFtZV9kaWcgLTMKZnJhbWVfYnVyeSAxMgpmcmFtZV9kaWcgMTEKZnJhbWVfZGlnIDEyCmNvbmNhdApmcmFtZV9idXJ5IDExCmZyYW1lX2RpZyAxMApmcmFtZV9idXJ5IDkKZnJhbWVfZGlnIDkKaXRvYgpleHRyYWN0IDYgMApjb25jYXQKZnJhbWVfZGlnIDMKaXRvYgpjb25jYXQKZnJhbWVfZGlnIDcKY29uY2F0CmZyYW1lX2RpZyAxMQpjb25jYXQKZnJhbWVfYnVyeSA4CmZyYW1lX2RpZyAtMgpleHRyYWN0IDIgMApib3hfZGVsCnBvcApmcmFtZV9kaWcgLTIKZXh0cmFjdCAyIDAKZnJhbWVfZGlnIDgKYm94X3B1dApmcmFtZV9kaWcgLTIKZXh0cmFjdCAyIDAKYm94X2dldApzdG9yZSAxMDgKc3RvcmUgMTA3CmxvYWQgMTA4CmFzc2VydApsb2FkIDEwNwpmcmFtZV9idXJ5IDAKcmV0c3ViCgovLyBoZWxsbwpoZWxsb18yMDoKcHJvdG8gMSAxCmJ5dGVjXzAgLy8gIiIKZnJhbWVfZGlnIC0xCmV4dHJhY3QgMiAwCnB1c2hieXRlcyAweDIwNTc2ZjcyNmM2NCAvLyAiIFdvcmxkIgpjb25jYXQKZnJhbWVfYnVyeSAwCmZyYW1lX2RpZyAwCmxlbgppdG9iCmV4dHJhY3QgNiAwCmZyYW1lX2RpZyAwCmNvbmNhdApmcmFtZV9idXJ5IDAKcmV0c3ViCgovLyBlbnN1cmVfYXVyYXNfZXhpc3QKZW5zdXJlYXVyYXNleGlzdF8yMToKcHJvdG8gMCAwCmJ5dGVjIDYgLy8gImF1cmEiCmJveF9sZW4Kc3RvcmUgMjUKc3RvcmUgMjQKbG9hZCAyNQovLyBhdXJhIHRva2VucyBoYXZlIG5vdCBiZWVuIGNyZWF0ZWQgeWV0CmFzc2VydApyZXRzdWIKCi8vIGVuc3VyZV9uZnRfb3duZXJfZXhpc3RzX2Zyb21fdHhuCmVuc3VyZW5mdG93bmVyZXhpc3RzZnJvbXR4bl8yMjoKcHJvdG8gMSAwCmZyYW1lX2RpZyAtMQpndHhucyBTZW5kZXIKYm94X2xlbgpzdG9yZSA3MQpzdG9yZSA3MApsb2FkIDcxCi8vIFVzZXIgaXMgbm90IGFuIE5GVCBvd25lcgphc3NlcnQKcmV0c3ViCgovLyBlbnN1cmVfemVyb19wYXltZW50CmVuc3VyZXplcm9wYXltZW50XzIzOgpwcm90byAxIDAKZnJhbWVfZGlnIC0xCmd0eG5zIEFtb3VudAppbnRjXzAgLy8gMAo9PQovLyBQYXltZW50IGFtb3VudCBtdXN0IGJlIDAKYXNzZXJ0CnJldHN1YgoKLy8gZW5zdXJlX3Byb3Bvc2FsX2V4aXN0cwplbnN1cmVwcm9wb3NhbGV4aXN0c18yNDoKcHJvdG8gMSAwCmZyYW1lX2RpZyAtMQpleHRyYWN0IDIgMApib3hfbGVuCnN0b3JlIDc5CnN0b3JlIDc4CmxvYWQgNzkKLy8gUHJvcG9zYWwgd2l0aCBzcGVjaWZpZWQga2V5IHdhcyBub3QgZm91bmQKYXNzZXJ0CnJldHN1YgoKLy8gZW5zdXJlX3NlbmRlcl9pc19jcmVhdG9yCmVuc3VyZXNlbmRlcmlzY3JlYXRvcl8yNToKcHJvdG8gMSAwCmZyYW1lX2RpZyAtMQpndHhucyBTZW5kZXIKZ2xvYmFsIENyZWF0b3JBZGRyZXNzCj09Ci8vIE5vdCBhcHAgY3JlYXRvcjogWW91IGFyZSBub3QgYXV0aG9yaXNlZCB0byBwZXJmb3JtIHRoaXMgYWN0aW9uCmFzc2VydApyZXRzdWIKCi8vIGVuc3VyZV9pc19hZG1pbl9vcl9hcHBfY3JlYXRvcgplbnN1cmVpc2FkbWlub3JhcHBjcmVhdG9yXzI2Ogpwcm90byAxIDAKZnJhbWVfZGlnIC0xCmdsb2JhbCBDcmVhdG9yQWRkcmVzcwo9PQpmcmFtZV9kaWcgLTEKYm94X2xlbgpzdG9yZSA3MwpzdG9yZSA3Mgpsb2FkIDczCnx8Ci8vIE5vdCBhZG1pbjogWW91IGFyZSBub3QgYXV0aG9yaXNlZCB0byBwZXJmb3JtIHRoaXMgYWN0aW9uCmFzc2VydApyZXRzdWIKCi8vIGVuc3VyZV9ldmVudF9leGlzdHMKZW5zdXJlZXZlbnRleGlzdHNfMjc6CnByb3RvIDEgMApmcmFtZV9kaWcgLTEKZXh0cmFjdCAyIDAKYm94X2xlbgpzdG9yZSAxMTAKc3RvcmUgMTA5CmxvYWQgMTEwCi8vIEV2ZW50IHdpdGggc3BlY2lmaWVkIGtleSBkb2VzIG5vdCBleGlzdAphc3NlcnQKcmV0c3ViCgovLyBlbnN1cmVfcmVnaXN0ZXJlZF9jcmVhdGl2ZQplbnN1cmVyZWdpc3RlcmVkY3JlYXRpdmVfMjg6CnByb3RvIDIgMApieXRlY18wIC8vICIiCmludGNfMCAvLyAwCmR1cG4gMgpieXRlY18wIC8vICIiCmR1cAppbnRjXzAgLy8gMApkdXBuIDIKYnl0ZWNfMCAvLyAiIgpkdXAKZnJhbWVfZGlnIC0yCmd0eG5zIFNlbmRlcgpib3hfbGVuCnN0b3JlIDE3CnN0b3JlIDE2CmxvYWQgMTcKYXNzZXJ0CmZyYW1lX2RpZyAtMgpndHhucyBTZW5kZXIKYm94X2dldApzdG9yZSAxOQpzdG9yZSAxOApsb2FkIDE5CmFzc2VydApsb2FkIDE4CmZyYW1lX2J1cnkgMApmcmFtZV9kaWcgMAppbnRjXzAgLy8gMApnZXRiaXQKZnJhbWVfYnVyeSAxCmZyYW1lX2RpZyAwCmludGNfMSAvLyAxCmdldGJpdApmcmFtZV9idXJ5IDIKZnJhbWVfZGlnIDAKaW50Y18xIC8vIDEKZXh0cmFjdF91aW50NjQKZnJhbWVfYnVyeSAzCmZyYW1lX2RpZyAwCmZyYW1lX2RpZyAwCnB1c2hpbnQgOSAvLyA5CmV4dHJhY3RfdWludDE2CmZyYW1lX2RpZyAwCnB1c2hpbnQgMTEgLy8gMTEKZXh0cmFjdF91aW50MTYKc3Vic3RyaW5nMwpmcmFtZV9idXJ5IDQKZnJhbWVfZGlnIDAKZnJhbWVfZGlnIDAKcHVzaGludCAxMSAvLyAxMQpleHRyYWN0X3VpbnQxNgpkaWcgMQpsZW4Kc3Vic3RyaW5nMwpmcmFtZV9idXJ5IDUKZnJhbWVfZGlnIDAKcHVzaGludCAxMyAvLyAxMwpleHRyYWN0X3VpbnQ2NApmcmFtZV9idXJ5IDYKZnJhbWVfZGlnIC0xCmV4dHJhY3QgMiAwCnB1c2hieXRlcyAweDZkNzU3MzY5NjMgLy8gIm11c2ljIgo9PQpibnogZW5zdXJlcmVnaXN0ZXJlZGNyZWF0aXZlXzI4X2wzCmVuc3VyZXJlZ2lzdGVyZWRjcmVhdGl2ZV8yOF9sMToKZnJhbWVfZGlnIC0xCmV4dHJhY3QgMiAwCmJ5dGVjIDUgLy8gImFydCIKPT0KYnogZW5zdXJlcmVnaXN0ZXJlZGNyZWF0aXZlXzI4X2w0CmludGNfMSAvLyAxCmZyYW1lX2J1cnkgMQpiIGVuc3VyZXJlZ2lzdGVyZWRjcmVhdGl2ZV8yOF9sNAplbnN1cmVyZWdpc3RlcmVkY3JlYXRpdmVfMjhfbDM6CmludGNfMSAvLyAxCmZyYW1lX2J1cnkgMQpiIGVuc3VyZXJlZ2lzdGVyZWRjcmVhdGl2ZV8yOF9sMQplbnN1cmVyZWdpc3RlcmVkY3JlYXRpdmVfMjhfbDQ6CmJ5dGVjXzMgLy8gMHgwMAppbnRjXzAgLy8gMApmcmFtZV9kaWcgMQpzZXRiaXQKaW50Y18xIC8vIDEKZnJhbWVfZGlnIDIKc2V0Yml0CmZyYW1lX2RpZyAzCml0b2IKY29uY2F0CmZyYW1lX2RpZyA0CmZyYW1lX2J1cnkgMTAKZnJhbWVfZGlnIDEwCmZyYW1lX2J1cnkgOQpwdXNoaW50IDIxIC8vIDIxCmZyYW1lX2J1cnkgNwpmcmFtZV9kaWcgNwpmcmFtZV9kaWcgMTAKbGVuCisKZnJhbWVfYnVyeSA4CmZyYW1lX2RpZyA4CmludGNfMiAvLyA2NTUzNgo8CmFzc2VydApmcmFtZV9kaWcgNwppdG9iCmV4dHJhY3QgNiAwCmNvbmNhdApmcmFtZV9kaWcgNQpmcmFtZV9idXJ5IDEwCmZyYW1lX2RpZyA5CmZyYW1lX2RpZyAxMApjb25jYXQKZnJhbWVfYnVyeSA5CmZyYW1lX2RpZyA4CmZyYW1lX2J1cnkgNwpmcmFtZV9kaWcgNwppdG9iCmV4dHJhY3QgNiAwCmNvbmNhdApmcmFtZV9kaWcgNgppdG9iCmNvbmNhdApmcmFtZV9kaWcgOQpjb25jYXQKZnJhbWVfYnVyeSAwCmZyYW1lX2RpZyAtMgpndHhucyBTZW5kZXIKYm94X2RlbApwb3AKZnJhbWVfZGlnIC0yCmd0eG5zIFNlbmRlcgpmcmFtZV9kaWcgMApib3hfcHV0CnJldHN1YgoKLy8gY3JlYXRlX25mdF9vd25lcgpjcmVhdGVuZnRvd25lcl8yOToKcHJvdG8gMyAwCmludGNfMCAvLyAwCmR1cG4gMwpieXRlY18wIC8vICIiCmludGNfMCAvLyAwCmR1cApieXRlY18wIC8vICIiCmR1cAppdHhuX2JlZ2luCnB1c2hpbnQgMyAvLyBhY2ZnCml0eG5fZmllbGQgVHlwZUVudW0KZnJhbWVfZGlnIC0zCmd0eG5zIFNlbmRlcgppdHhuX2ZpZWxkIENvbmZpZ0Fzc2V0TmFtZQpnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwppdHhuX2ZpZWxkIENvbmZpZ0Fzc2V0TWFuYWdlcgppbnRjXzEgLy8gMQppdHhuX2ZpZWxkIENvbmZpZ0Fzc2V0VG90YWwKaXR4bl9zdWJtaXQKaXR4biBDcmVhdGVkQXNzZXRJRApmcmFtZV9idXJ5IDAKaW50Y18wIC8vIDAKZnJhbWVfYnVyeSAxCmludGNfMCAvLyAwCmZyYW1lX2J1cnkgMgppbnRjXzAgLy8gMApmcmFtZV9idXJ5IDMKYnl0ZWNfMyAvLyAweDAwCmludGNfMCAvLyAwCmZyYW1lX2RpZyAxCnNldGJpdAppbnRjXzEgLy8gMQpmcmFtZV9kaWcgMgpzZXRiaXQKZnJhbWVfZGlnIDMKaXRvYgpjb25jYXQKZnJhbWVfZGlnIC0yCmZyYW1lX2J1cnkgOApmcmFtZV9kaWcgOApmcmFtZV9idXJ5IDcKcHVzaGludCAyMSAvLyAyMQpmcmFtZV9idXJ5IDUKZnJhbWVfZGlnIDUKZnJhbWVfZGlnIDgKbGVuCisKZnJhbWVfYnVyeSA2CmZyYW1lX2RpZyA2CmludGNfMiAvLyA2NTUzNgo8CmFzc2VydApmcmFtZV9kaWcgNQppdG9iCmV4dHJhY3QgNiAwCmNvbmNhdApmcmFtZV9kaWcgLTEKZnJhbWVfYnVyeSA4CmZyYW1lX2RpZyA3CmZyYW1lX2RpZyA4CmNvbmNhdApmcmFtZV9idXJ5IDcKZnJhbWVfZGlnIDYKZnJhbWVfYnVyeSA1CmZyYW1lX2RpZyA1Cml0b2IKZXh0cmFjdCA2IDAKY29uY2F0CmZyYW1lX2RpZyAwCml0b2IKY29uY2F0CmZyYW1lX2RpZyA3CmNvbmNhdApmcmFtZV9idXJ5IDQKZnJhbWVfZGlnIC0zCmd0eG5zIFNlbmRlcgpib3hfZGVsCnBvcApmcmFtZV9kaWcgLTMKZ3R4bnMgU2VuZGVyCmZyYW1lX2RpZyA0CmJveF9wdXQKcmV0c3ViCgovLyBpbmNyZW1lbnRfY3JlYXRvcl9uZnRfY291bnQKaW5jcmVtZW50Y3JlYXRvcm5mdGNvdW50XzMwOgpwcm90byAxIDAKYnl0ZWNfMCAvLyAiIgppbnRjXzAgLy8gMApkdXBuIDIKYnl0ZWNfMCAvLyAiIgpkdXAKaW50Y18wIC8vIDAKZHVwbiAyCmJ5dGVjXzAgLy8gIiIKZHVwCmZyYW1lX2RpZyAtMQpib3hfZ2V0CnN0b3JlIDIxCnN0b3JlIDIwCmxvYWQgMjEKYXNzZXJ0CmxvYWQgMjAKZnJhbWVfYnVyeSAwCmZyYW1lX2RpZyAwCmludGNfMSAvLyAxCmV4dHJhY3RfdWludDY0CmZyYW1lX2J1cnkgMQpmcmFtZV9kaWcgMQppbnRjXzEgLy8gMQorCmZyYW1lX2J1cnkgMQpmcmFtZV9kaWcgMAppbnRjXzAgLy8gMApnZXRiaXQKZnJhbWVfYnVyeSAyCmZyYW1lX2RpZyAwCmludGNfMSAvLyAxCmdldGJpdApmcmFtZV9idXJ5IDMKZnJhbWVfZGlnIDAKZnJhbWVfZGlnIDAKcHVzaGludCA5IC8vIDkKZXh0cmFjdF91aW50MTYKZnJhbWVfZGlnIDAKcHVzaGludCAxMSAvLyAxMQpleHRyYWN0X3VpbnQxNgpzdWJzdHJpbmczCmZyYW1lX2J1cnkgNApmcmFtZV9kaWcgMApmcmFtZV9kaWcgMApwdXNoaW50IDExIC8vIDExCmV4dHJhY3RfdWludDE2CmRpZyAxCmxlbgpzdWJzdHJpbmczCmZyYW1lX2J1cnkgNQpmcmFtZV9kaWcgMApwdXNoaW50IDEzIC8vIDEzCmV4dHJhY3RfdWludDY0CmZyYW1lX2J1cnkgNgpieXRlY18zIC8vIDB4MDAKaW50Y18wIC8vIDAKZnJhbWVfZGlnIDIKc2V0Yml0CmludGNfMSAvLyAxCmZyYW1lX2RpZyAzCnNldGJpdApmcmFtZV9kaWcgMQppdG9iCmNvbmNhdApmcmFtZV9kaWcgNApmcmFtZV9idXJ5IDEwCmZyYW1lX2RpZyAxMApmcmFtZV9idXJ5IDkKcHVzaGludCAyMSAvLyAyMQpmcmFtZV9idXJ5IDcKZnJhbWVfZGlnIDcKZnJhbWVfZGlnIDEwCmxlbgorCmZyYW1lX2J1cnkgOApmcmFtZV9kaWcgOAppbnRjXzIgLy8gNjU1MzYKPAphc3NlcnQKZnJhbWVfZGlnIDcKaXRvYgpleHRyYWN0IDYgMApjb25jYXQKZnJhbWVfZGlnIDUKZnJhbWVfYnVyeSAxMApmcmFtZV9kaWcgOQpmcmFtZV9kaWcgMTAKY29uY2F0CmZyYW1lX2J1cnkgOQpmcmFtZV9kaWcgOApmcmFtZV9idXJ5IDcKZnJhbWVfZGlnIDcKaXRvYgpleHRyYWN0IDYgMApjb25jYXQKZnJhbWVfZGlnIDYKaXRvYgpjb25jYXQKZnJhbWVfZGlnIDkKY29uY2F0CmZyYW1lX2J1cnkgMApmcmFtZV9kaWcgLTEKYm94X2RlbApwb3AKZnJhbWVfZGlnIC0xCmZyYW1lX2RpZyAwCmJveF9wdXQKcmV0c3ViCgovLyBjcmVhdGVfYXJ0X2F1Y3Rpb24KY3JlYXRlYXJ0YXVjdGlvbl8zMToKcHJvdG8gNyAwCmJ5dGVjXzAgLy8gIiIKaW50Y18wIC8vIDAKYnl0ZWNfMCAvLyAiIgpkdXAKaW50Y18wIC8vIDAKZHVwCmJ5dGVjXzAgLy8gIiIKZHVwCmZyYW1lX2RpZyAtNgpleHRyYWN0IDIgMApib3hfbGVuCnN0b3JlIDM5CnN0b3JlIDM4CmxvYWQgMzkKIQphc3NlcnQKZnJhbWVfZGlnIC03Cmd0eG5zIFNlbmRlcgpmcmFtZV9idXJ5IDAKZnJhbWVfZGlnIDAKbGVuCmludGNfMyAvLyAzMgo9PQphc3NlcnQKaW50Y18wIC8vIDAKZnJhbWVfYnVyeSAxCmdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCmZyYW1lX2J1cnkgMgpmcmFtZV9kaWcgMgpsZW4KaW50Y18zIC8vIDMyCj09CmFzc2VydApmcmFtZV9kaWcgMApmcmFtZV9kaWcgLTUKZnJhbWVfYnVyeSA3CmZyYW1lX2RpZyA3CmZyYW1lX2J1cnkgNgpwdXNoaW50IDEwMCAvLyAxMDAKZnJhbWVfYnVyeSA0CmZyYW1lX2RpZyA0CmZyYW1lX2RpZyA3CmxlbgorCmZyYW1lX2J1cnkgNQpmcmFtZV9kaWcgNQppbnRjXzIgLy8gNjU1MzYKPAphc3NlcnQKZnJhbWVfZGlnIDQKaXRvYgpleHRyYWN0IDYgMApjb25jYXQKZnJhbWVfZGlnIC00CmZyYW1lX2J1cnkgNwpmcmFtZV9kaWcgNgpmcmFtZV9kaWcgNwpjb25jYXQKZnJhbWVfYnVyeSA2CmZyYW1lX2RpZyA1CmZyYW1lX2J1cnkgNApmcmFtZV9kaWcgNAppdG9iCmV4dHJhY3QgNiAwCmNvbmNhdApmcmFtZV9kaWcgLTMKaXRvYgpjb25jYXQKZnJhbWVfZGlnIC0yCml0b2IKY29uY2F0CmZyYW1lX2RpZyAtMQppdG9iCmNvbmNhdApmcmFtZV9kaWcgMQppdG9iCmNvbmNhdApmcmFtZV9kaWcgMgpjb25jYXQKZnJhbWVfZGlnIDYKY29uY2F0CmZyYW1lX2J1cnkgMwpmcmFtZV9kaWcgLTYKZXh0cmFjdCAyIDAKYm94X2RlbApwb3AKZnJhbWVfZGlnIC02CmV4dHJhY3QgMiAwCmZyYW1lX2RpZyAzCmJveF9wdXQKcmV0c3ViCgovLyBwZXJmb3JtX2F1Y3Rpb25fYmlkCnBlcmZvcm1hdWN0aW9uYmlkXzMyOgpwcm90byAzIDAKYnl0ZWNfMCAvLyAiIgppbnRjXzAgLy8gMApkdXBuIDMKYnl0ZWNfMCAvLyAiIgpkdXBuIDMKaW50Y18wIC8vIDAKZHVwCmJ5dGVjXzAgLy8gIiIKZHVwCmZyYW1lX2RpZyAtMgpleHRyYWN0IDIgMApib3hfZ2V0CnN0b3JlIDQ1CnN0b3JlIDQ0CmxvYWQgNDUKYXNzZXJ0CmxvYWQgNDQKZnJhbWVfYnVyeSAwCmZyYW1lX2RpZyAwCnB1c2hpbnQgNjAgLy8gNjAKZXh0cmFjdF91aW50NjQKZnJhbWVfYnVyeSAxCmZyYW1lX2RpZyAwCnB1c2hpbnQgMzYgLy8gMzYKZXh0cmFjdF91aW50NjQKZnJhbWVfYnVyeSAyCmZyYW1lX2RpZyAwCnB1c2hpbnQgNDQgLy8gNDQKZXh0cmFjdF91aW50NjQKZnJhbWVfYnVyeSAzCmZyYW1lX2RpZyAwCnB1c2hpbnQgNTIgLy8gNTIKZXh0cmFjdF91aW50NjQKZnJhbWVfYnVyeSA0Cmdsb2JhbCBMYXRlc3RUaW1lc3RhbXAKZnJhbWVfZGlnIDMKPgphc3NlcnQKZ2xvYmFsIExhdGVzdFRpbWVzdGFtcApmcmFtZV9kaWcgNAo8CmFzc2VydApmcmFtZV9kaWcgLTEKZnJhbWVfZGlnIDEKPgphc3NlcnQKZnJhbWVfZGlnIC0xCmZyYW1lX2RpZyAyCj4KYXNzZXJ0CmZyYW1lX2RpZyAwCmV4dHJhY3QgMCAzMgpmcmFtZV9idXJ5IDUKZnJhbWVfZGlnIDAKZnJhbWVfZGlnIDAKaW50Y18zIC8vIDMyCmV4dHJhY3RfdWludDE2CmZyYW1lX2RpZyAwCnB1c2hpbnQgMzQgLy8gMzQKZXh0cmFjdF91aW50MTYKc3Vic3RyaW5nMwpmcmFtZV9idXJ5IDYKZnJhbWVfZGlnIDAKZnJhbWVfZGlnIDAKcHVzaGludCAzNCAvLyAzNApleHRyYWN0X3VpbnQxNgpkaWcgMQpsZW4Kc3Vic3RyaW5nMwpmcmFtZV9idXJ5IDcKZnJhbWVfZGlnIC0zCmd0eG5zIFNlbmRlcgpmcmFtZV9idXJ5IDgKZnJhbWVfZGlnIDgKbGVuCmludGNfMyAvLyAzMgo9PQphc3NlcnQKZnJhbWVfZGlnIDUKZnJhbWVfZGlnIDYKZnJhbWVfYnVyeSAxMgpmcmFtZV9kaWcgMTIKZnJhbWVfYnVyeSAxMQpwdXNoaW50IDEwMCAvLyAxMDAKZnJhbWVfYnVyeSA5CmZyYW1lX2RpZyA5CmZyYW1lX2RpZyAxMgpsZW4KKwpmcmFtZV9idXJ5IDEwCmZyYW1lX2RpZyAxMAppbnRjXzIgLy8gNjU1MzYKPAphc3NlcnQKZnJhbWVfZGlnIDkKaXRvYgpleHRyYWN0IDYgMApjb25jYXQKZnJhbWVfZGlnIDcKZnJhbWVfYnVyeSAxMgpmcmFtZV9kaWcgMTEKZnJhbWVfZGlnIDEyCmNvbmNhdApmcmFtZV9idXJ5IDExCmZyYW1lX2RpZyAxMApmcmFtZV9idXJ5IDkKZnJhbWVfZGlnIDkKaXRvYgpleHRyYWN0IDYgMApjb25jYXQKZnJhbWVfZGlnIDIKaXRvYgpjb25jYXQKZnJhbWVfZGlnIDMKaXRvYgpjb25jYXQKZnJhbWVfZGlnIDQKaXRvYgpjb25jYXQKZnJhbWVfZGlnIC0xCml0b2IKY29uY2F0CmZyYW1lX2RpZyA4CmNvbmNhdApmcmFtZV9kaWcgMTEKY29uY2F0CmZyYW1lX2J1cnkgMApmcmFtZV9kaWcgLTIKZXh0cmFjdCAyIDAKYm94X2RlbApwb3AKZnJhbWVfZGlnIC0yCmV4dHJhY3QgMiAwCmZyYW1lX2RpZyAwCmJveF9wdXQKcmV0c3ViCgovLyB0cmFuc2Zlcl9hcnRfYXVjdGlvbl9pdGVtX3RvX2hpZ2hlc3RfYmlkZGVyCnRyYW5zZmVyYXJ0YXVjdGlvbml0ZW10b2hpZ2hlc3RiaWRkZXJfMzM6CnByb3RvIDEgMApieXRlY18wIC8vICIiCmR1cG4gMgpmcmFtZV9kaWcgLTEKZXh0cmFjdCAyIDAKYm94X2dldApzdG9yZSA1MwpzdG9yZSA1Mgpsb2FkIDUzCmFzc2VydApsb2FkIDUyCmZyYW1lX2J1cnkgMApmcmFtZV9kaWcgMApleHRyYWN0IDY4IDMyCmZyYW1lX2J1cnkgMQpmcmFtZV9kaWcgMApmcmFtZV9kaWcgMAppbnRjXzMgLy8gMzIKZXh0cmFjdF91aW50MTYKZnJhbWVfZGlnIDAKcHVzaGludCAzNCAvLyAzNApleHRyYWN0X3VpbnQxNgpzdWJzdHJpbmczCmZyYW1lX2J1cnkgMgpmcmFtZV9kaWcgMgpmcmFtZV9kaWcgMQpjYWxsc3ViIHVwZGF0ZWFydG5mdG93bmVyXzM0CnJldHN1YgoKLy8gdXBkYXRlX2FydF9uZnRfb3duZXIKdXBkYXRlYXJ0bmZ0b3duZXJfMzQ6CnByb3RvIDIgMApieXRlY18wIC8vICIiCmludGNfMCAvLyAwCmJ5dGVjXzAgLy8gIiIKZHVwCmludGNfMCAvLyAwCmJ5dGVjXzAgLy8gIiIKZHVwCmludGNfMCAvLyAwCmR1cG4gNApieXRlY18wIC8vICIiCmR1cApmcmFtZV9kaWcgLTIKZXh0cmFjdCAyIDAKYm94X2dldApzdG9yZSA1NQpzdG9yZSA1NApsb2FkIDU1CmFzc2VydApsb2FkIDU0CmZyYW1lX2J1cnkgMApmcmFtZV9kaWcgMAppbnRjXzAgLy8gMApleHRyYWN0X3VpbnQ2NApmcmFtZV9idXJ5IDEKZnJhbWVfZGlnIDAKZnJhbWVfZGlnIDAKcHVzaGludCAxMCAvLyAxMApleHRyYWN0X3VpbnQxNgpmcmFtZV9kaWcgMApwdXNoaW50IDEyIC8vIDEyCmV4dHJhY3RfdWludDE2CnN1YnN0cmluZzMKZnJhbWVfYnVyeSAyCmZyYW1lX2RpZyAwCmZyYW1lX2RpZyAwCnB1c2hpbnQgMTIgLy8gMTIKZXh0cmFjdF91aW50MTYKZnJhbWVfZGlnIDAKcHVzaGludCAyMiAvLyAyMgpleHRyYWN0X3VpbnQxNgpzdWJzdHJpbmczCmZyYW1lX2J1cnkgMwpmcmFtZV9kaWcgMApwdXNoaW50IDE0IC8vIDE0CmV4dHJhY3RfdWludDY0CmZyYW1lX2J1cnkgNApmcmFtZV9kaWcgMApmcmFtZV9kaWcgMApwdXNoaW50IDIyIC8vIDIyCmV4dHJhY3RfdWludDE2CmZyYW1lX2RpZyAwCnB1c2hpbnQgMjQgLy8gMjQKZXh0cmFjdF91aW50MTYKc3Vic3RyaW5nMwpmcmFtZV9idXJ5IDUKZnJhbWVfZGlnIDAKZnJhbWVfZGlnIDAKcHVzaGludCAyNCAvLyAyNApleHRyYWN0X3VpbnQxNgpkaWcgMQpsZW4Kc3Vic3RyaW5nMwpmcmFtZV9idXJ5IDYKZnJhbWVfZGlnIDAKcHVzaGludCAyNiAvLyAyNgpleHRyYWN0X3VpbnQ2NApmcmFtZV9idXJ5IDcKZnJhbWVfZGlnIDAKcHVzaGludCAzNCAvLyAzNApleHRyYWN0X3VpbnQ2NApmcmFtZV9idXJ5IDgKZnJhbWVfZGlnIDAKaW50YyA0IC8vIDU5MgpnZXRiaXQKZnJhbWVfYnVyeSA5CmZyYW1lX2RpZyAxCml0b2IKZnJhbWVfZGlnIC0yCmZyYW1lX2J1cnkgMTMKZnJhbWVfZGlnIDEzCmZyYW1lX2J1cnkgMTIKcHVzaGludCA3NSAvLyA3NQpmcmFtZV9idXJ5IDEwCmZyYW1lX2RpZyAxMApmcmFtZV9kaWcgMTMKbGVuCisKZnJhbWVfYnVyeSAxMQpmcmFtZV9kaWcgMTEKaW50Y18yIC8vIDY1NTM2CjwKYXNzZXJ0CmZyYW1lX2RpZyAxMAppdG9iCmV4dHJhY3QgNiAwCmNvbmNhdApmcmFtZV9kaWcgMgpmcmFtZV9idXJ5IDEzCmZyYW1lX2RpZyAxMgpmcmFtZV9kaWcgMTMKY29uY2F0CmZyYW1lX2J1cnkgMTIKZnJhbWVfZGlnIDExCmZyYW1lX2J1cnkgMTAKZnJhbWVfZGlnIDEwCmZyYW1lX2RpZyAxMwpsZW4KKwpmcmFtZV9idXJ5IDExCmZyYW1lX2RpZyAxMQppbnRjXzIgLy8gNjU1MzYKPAphc3NlcnQKZnJhbWVfZGlnIDEwCml0b2IKZXh0cmFjdCA2IDAKY29uY2F0CmZyYW1lX2RpZyAzCmZyYW1lX2J1cnkgMTMKZnJhbWVfZGlnIDEyCmZyYW1lX2RpZyAxMwpjb25jYXQKZnJhbWVfYnVyeSAxMgpmcmFtZV9kaWcgMTEKZnJhbWVfYnVyeSAxMApmcmFtZV9kaWcgMTAKZnJhbWVfZGlnIDEzCmxlbgorCmZyYW1lX2J1cnkgMTEKZnJhbWVfZGlnIDExCmludGNfMiAvLyA2NTUzNgo8CmFzc2VydApmcmFtZV9kaWcgMTAKaXRvYgpleHRyYWN0IDYgMApjb25jYXQKZnJhbWVfZGlnIDQKaXRvYgpjb25jYXQKZnJhbWVfZGlnIDUKZnJhbWVfYnVyeSAxMwpmcmFtZV9kaWcgMTIKZnJhbWVfZGlnIDEzCmNvbmNhdApmcmFtZV9idXJ5IDEyCmZyYW1lX2RpZyAxMQpmcmFtZV9idXJ5IDEwCmZyYW1lX2RpZyAxMApmcmFtZV9kaWcgMTMKbGVuCisKZnJhbWVfYnVyeSAxMQpmcmFtZV9kaWcgMTEKaW50Y18yIC8vIDY1NTM2CjwKYXNzZXJ0CmZyYW1lX2RpZyAxMAppdG9iCmV4dHJhY3QgNiAwCmNvbmNhdApmcmFtZV9kaWcgNgpmcmFtZV9idXJ5IDEzCmZyYW1lX2RpZyAxMgpmcmFtZV9kaWcgMTMKY29uY2F0CmZyYW1lX2J1cnkgMTIKZnJhbWVfZGlnIDExCmZyYW1lX2J1cnkgMTAKZnJhbWVfZGlnIDEwCml0b2IKZXh0cmFjdCA2IDAKY29uY2F0CmZyYW1lX2RpZyA3Cml0b2IKY29uY2F0CmZyYW1lX2RpZyA4Cml0b2IKY29uY2F0CmZyYW1lX2RpZyAtMQpjb25jYXQKYnl0ZWNfMyAvLyAweDAwCmludGNfMCAvLyAwCmZyYW1lX2RpZyA5CnNldGJpdApjb25jYXQKZnJhbWVfZGlnIDEyCmNvbmNhdApmcmFtZV9idXJ5IDAKZnJhbWVfZGlnIC0yCmV4dHJhY3QgMiAwCmJveF9kZWwKcG9wCmZyYW1lX2RpZyAtMgpleHRyYWN0IDIgMApmcmFtZV9kaWcgMApib3hfcHV0CnJldHN1YgoKLy8gdXBkYXRlX3NvdW5kX25mdF9vd25lcgp1cGRhdGVzb3VuZG5mdG93bmVyXzM1Ogpwcm90byAyIDAKYnl0ZWNfMCAvLyAiIgppbnRjXzAgLy8gMApkdXAKYnl0ZWNfMCAvLyAiIgpkdXBuIDQKaW50Y18wIC8vIDAKYnl0ZWNfMCAvLyAiIgpkdXBuIDIKaW50Y18wIC8vIDAKZHVwbiAyCmJ5dGVjXzAgLy8gIiIKZHVwCmZyYW1lX2RpZyAtMgpleHRyYWN0IDIgMApib3hfZ2V0CnN0b3JlIDU5CnN0b3JlIDU4CmxvYWQgNTkKYXNzZXJ0CmxvYWQgNTgKZnJhbWVfYnVyeSAwCmZyYW1lX2RpZyAwCmludGNfMCAvLyAwCmV4dHJhY3RfdWludDY0CmZyYW1lX2J1cnkgMQpmcmFtZV9kaWcgMApwdXNoaW50IDEwIC8vIDEwCmV4dHJhY3RfdWludDY0CmZyYW1lX2J1cnkgMgpmcmFtZV9kaWcgMApmcmFtZV9kaWcgMApwdXNoaW50IDE4IC8vIDE4CmV4dHJhY3RfdWludDE2CmZyYW1lX2RpZyAwCnB1c2hpbnQgMjAgLy8gMjAKZXh0cmFjdF91aW50MTYKc3Vic3RyaW5nMwpmcmFtZV9idXJ5IDMKZnJhbWVfZGlnIDAKZnJhbWVfZGlnIDAKcHVzaGludCAyMCAvLyAyMApleHRyYWN0X3VpbnQxNgpmcmFtZV9kaWcgMApwdXNoaW50IDIyIC8vIDIyCmV4dHJhY3RfdWludDE2CnN1YnN0cmluZzMKZnJhbWVfYnVyeSA0CmZyYW1lX2RpZyAwCmZyYW1lX2RpZyAwCnB1c2hpbnQgMjIgLy8gMjIKZXh0cmFjdF91aW50MTYKZnJhbWVfZGlnIDAKcHVzaGludCAyNCAvLyAyNApleHRyYWN0X3VpbnQxNgpzdWJzdHJpbmczCmZyYW1lX2J1cnkgNQpmcmFtZV9kaWcgMApmcmFtZV9kaWcgMApwdXNoaW50IDI0IC8vIDI0CmV4dHJhY3RfdWludDE2CmZyYW1lX2RpZyAwCnB1c2hpbnQgMjYgLy8gMjYKZXh0cmFjdF91aW50MTYKc3Vic3RyaW5nMwpmcmFtZV9idXJ5IDYKZnJhbWVfZGlnIDAKZnJhbWVfZGlnIDAKcHVzaGludCAyNiAvLyAyNgpleHRyYWN0X3VpbnQxNgpmcmFtZV9kaWcgMApwdXNoaW50IDM2IC8vIDM2CmV4dHJhY3RfdWludDE2CnN1YnN0cmluZzMKZnJhbWVfYnVyeSA3CmZyYW1lX2RpZyAwCnB1c2hpbnQgMjggLy8gMjgKZXh0cmFjdF91aW50NjQKZnJhbWVfYnVyeSA4CmZyYW1lX2RpZyAwCmZyYW1lX2RpZyAwCnB1c2hpbnQgMzYgLy8gMzYKZXh0cmFjdF91aW50MTYKZnJhbWVfZGlnIDAKcHVzaGludCAzOCAvLyAzOApleHRyYWN0X3VpbnQxNgpzdWJzdHJpbmczCmZyYW1lX2J1cnkgOQpmcmFtZV9kaWcgMApmcmFtZV9kaWcgMApwdXNoaW50IDM4IC8vIDM4CmV4dHJhY3RfdWludDE2CmZyYW1lX2RpZyAwCnB1c2hpbnQgNDAgLy8gNDAKZXh0cmFjdF91aW50MTYKc3Vic3RyaW5nMwpmcmFtZV9idXJ5IDEwCmZyYW1lX2RpZyAwCmZyYW1lX2RpZyAwCnB1c2hpbnQgNDAgLy8gNDAKZXh0cmFjdF91aW50MTYKZGlnIDEKbGVuCnN1YnN0cmluZzMKZnJhbWVfYnVyeSAxMQpmcmFtZV9kaWcgMAppbnRjIDQgLy8gNTkyCmdldGJpdApmcmFtZV9idXJ5IDEyCmZyYW1lX2RpZyAxCml0b2IKZnJhbWVfZGlnIC0yCmZyYW1lX2J1cnkgMTYKZnJhbWVfZGlnIDE2CmZyYW1lX2J1cnkgMTUKcHVzaGludCA3NSAvLyA3NQpmcmFtZV9idXJ5IDEzCmZyYW1lX2RpZyAxMwpmcmFtZV9kaWcgMTYKbGVuCisKZnJhbWVfYnVyeSAxNApmcmFtZV9kaWcgMTQKaW50Y18yIC8vIDY1NTM2CjwKYXNzZXJ0CmZyYW1lX2RpZyAxMwppdG9iCmV4dHJhY3QgNiAwCmNvbmNhdApmcmFtZV9kaWcgMgppdG9iCmNvbmNhdApmcmFtZV9kaWcgMwpmcmFtZV9idXJ5IDE2CmZyYW1lX2RpZyAxNQpmcmFtZV9kaWcgMTYKY29uY2F0CmZyYW1lX2J1cnkgMTUKZnJhbWVfZGlnIDE0CmZyYW1lX2J1cnkgMTMKZnJhbWVfZGlnIDEzCmZyYW1lX2RpZyAxNgpsZW4KKwpmcmFtZV9idXJ5IDE0CmZyYW1lX2RpZyAxNAppbnRjXzIgLy8gNjU1MzYKPAphc3NlcnQKZnJhbWVfZGlnIDEzCml0b2IKZXh0cmFjdCA2IDAKY29uY2F0CmZyYW1lX2RpZyA0CmZyYW1lX2J1cnkgMTYKZnJhbWVfZGlnIDE1CmZyYW1lX2RpZyAxNgpjb25jYXQKZnJhbWVfYnVyeSAxNQpmcmFtZV9kaWcgMTQKZnJhbWVfYnVyeSAxMwpmcmFtZV9kaWcgMTMKZnJhbWVfZGlnIDE2CmxlbgorCmZyYW1lX2J1cnkgMTQKZnJhbWVfZGlnIDE0CmludGNfMiAvLyA2NTUzNgo8CmFzc2VydApmcmFtZV9kaWcgMTMKaXRvYgpleHRyYWN0IDYgMApjb25jYXQKZnJhbWVfZGlnIDUKZnJhbWVfYnVyeSAxNgpmcmFtZV9kaWcgMTUKZnJhbWVfZGlnIDE2CmNvbmNhdApmcmFtZV9idXJ5IDE1CmZyYW1lX2RpZyAxNApmcmFtZV9idXJ5IDEzCmZyYW1lX2RpZyAxMwpmcmFtZV9kaWcgMTYKbGVuCisKZnJhbWVfYnVyeSAxNApmcmFtZV9kaWcgMTQKaW50Y18yIC8vIDY1NTM2CjwKYXNzZXJ0CmZyYW1lX2RpZyAxMwppdG9iCmV4dHJhY3QgNiAwCmNvbmNhdApmcmFtZV9kaWcgNgpmcmFtZV9idXJ5IDE2CmZyYW1lX2RpZyAxNQpmcmFtZV9kaWcgMTYKY29uY2F0CmZyYW1lX2J1cnkgMTUKZnJhbWVfZGlnIDE0CmZyYW1lX2J1cnkgMTMKZnJhbWVfZGlnIDEzCmZyYW1lX2RpZyAxNgpsZW4KKwpmcmFtZV9idXJ5IDE0CmZyYW1lX2RpZyAxNAppbnRjXzIgLy8gNjU1MzYKPAphc3NlcnQKZnJhbWVfZGlnIDEzCml0b2IKZXh0cmFjdCA2IDAKY29uY2F0CmZyYW1lX2RpZyA3CmZyYW1lX2J1cnkgMTYKZnJhbWVfZGlnIDE1CmZyYW1lX2RpZyAxNgpjb25jYXQKZnJhbWVfYnVyeSAxNQpmcmFtZV9kaWcgMTQKZnJhbWVfYnVyeSAxMwpmcmFtZV9kaWcgMTMKZnJhbWVfZGlnIDE2CmxlbgorCmZyYW1lX2J1cnkgMTQKZnJhbWVfZGlnIDE0CmludGNfMiAvLyA2NTUzNgo8CmFzc2VydApmcmFtZV9kaWcgMTMKaXRvYgpleHRyYWN0IDYgMApjb25jYXQKZnJhbWVfZGlnIDgKaXRvYgpjb25jYXQKZnJhbWVfZGlnIDkKZnJhbWVfYnVyeSAxNgpmcmFtZV9kaWcgMTUKZnJhbWVfZGlnIDE2CmNvbmNhdApmcmFtZV9idXJ5IDE1CmZyYW1lX2RpZyAxNApmcmFtZV9idXJ5IDEzCmZyYW1lX2RpZyAxMwpmcmFtZV9kaWcgMTYKbGVuCisKZnJhbWVfYnVyeSAxNApmcmFtZV9kaWcgMTQKaW50Y18yIC8vIDY1NTM2CjwKYXNzZXJ0CmZyYW1lX2RpZyAxMwppdG9iCmV4dHJhY3QgNiAwCmNvbmNhdApmcmFtZV9kaWcgMTAKZnJhbWVfYnVyeSAxNgpmcmFtZV9kaWcgMTUKZnJhbWVfZGlnIDE2CmNvbmNhdApmcmFtZV9idXJ5IDE1CmZyYW1lX2RpZyAxNApmcmFtZV9idXJ5IDEzCmZyYW1lX2RpZyAxMwpmcmFtZV9kaWcgMTYKbGVuCisKZnJhbWVfYnVyeSAxNApmcmFtZV9kaWcgMTQKaW50Y18yIC8vIDY1NTM2CjwKYXNzZXJ0CmZyYW1lX2RpZyAxMwppdG9iCmV4dHJhY3QgNiAwCmNvbmNhdApmcmFtZV9kaWcgMTEKZnJhbWVfYnVyeSAxNgpmcmFtZV9kaWcgMTUKZnJhbWVfZGlnIDE2CmNvbmNhdApmcmFtZV9idXJ5IDE1CmZyYW1lX2RpZyAxNApmcmFtZV9idXJ5IDEzCmZyYW1lX2RpZyAxMwppdG9iCmV4dHJhY3QgNiAwCmNvbmNhdApmcmFtZV9kaWcgLTEKY29uY2F0CmJ5dGVjXzMgLy8gMHgwMAppbnRjXzAgLy8gMApmcmFtZV9kaWcgMTIKc2V0Yml0CmNvbmNhdApmcmFtZV9kaWcgMTUKY29uY2F0CmZyYW1lX2J1cnkgMApyZXRzdWIKCi8vIHRyYW5zZmVyX3NvdW5kX25mdAp0cmFuc2ZlcnNvdW5kbmZ0XzM2Ogpwcm90byAyIDAKYnl0ZWNfMCAvLyAiIgppbnRjXzAgLy8gMApieXRlY18wIC8vICIiCmR1cAppbnRjXzAgLy8gMApmcmFtZV9kaWcgLTEKZXh0cmFjdCAyIDAKYm94X2dldApzdG9yZSA1NwpzdG9yZSA1Ngpsb2FkIDU3CmFzc2VydApsb2FkIDU2CmZyYW1lX2J1cnkgMApmcmFtZV9kaWcgMApwdXNoaW50IDI4IC8vIDI4CmV4dHJhY3RfdWludDY0CmZyYW1lX2J1cnkgMQpmcmFtZV9kaWcgMApleHRyYWN0IDQyIDMyCmZyYW1lX2J1cnkgMgpmcmFtZV9kaWcgLTIKZ3R4bnMgU2VuZGVyCmZyYW1lX2J1cnkgMwpmcmFtZV9kaWcgMwpsZW4KaW50Y18zIC8vIDMyCj09CmFzc2VydApmcmFtZV9kaWcgLTIKZnJhbWVfZGlnIDEKZnJhbWVfZGlnIDIKY2FsbHN1YiBwYXk5NXBlcmNlbnRfMzgKZnJhbWVfZGlnIC0xCmZyYW1lX2RpZyAzCmNhbGxzdWIgdXBkYXRlc291bmRuZnRvd25lcl8zNQppbnRjXzEgLy8gMQpmcmFtZV9idXJ5IDQKZnJhbWVfZGlnIDMKZnJhbWVfZGlnIDQKY2FsbHN1YiBzZW5kYXVyYXRva2VuXzQxCmludGNfMSAvLyAxCnJldHVybgoKLy8gdHJhbnNmZXJfYXJ0X25mdAp0cmFuc2ZlcmFydG5mdF8zNzoKcHJvdG8gMiAwCmJ5dGVjXzAgLy8gIiIKaW50Y18wIC8vIDAKYnl0ZWNfMCAvLyAiIgpkdXAKaW50Y18wIC8vIDAKZnJhbWVfZGlnIC0xCmV4dHJhY3QgMiAwCmJveF9nZXQKc3RvcmUgNjEKc3RvcmUgNjAKbG9hZCA2MQphc3NlcnQKbG9hZCA2MApmcmFtZV9idXJ5IDAKZnJhbWVfZGlnIDAKcHVzaGludCAyNiAvLyAyNgpleHRyYWN0X3VpbnQ2NApmcmFtZV9idXJ5IDEKZnJhbWVfZGlnIDAKZXh0cmFjdCA0MiAzMgpmcmFtZV9idXJ5IDIKZnJhbWVfZGlnIC0yCmd0eG5zIFNlbmRlcgpmcmFtZV9idXJ5IDMKZnJhbWVfZGlnIDMKbGVuCmludGNfMyAvLyAzMgo9PQphc3NlcnQKZnJhbWVfZGlnIC0yCmZyYW1lX2RpZyAxCmZyYW1lX2RpZyAyCmNhbGxzdWIgcGF5OTVwZXJjZW50XzM4CmZyYW1lX2RpZyAtMQpmcmFtZV9kaWcgMwpjYWxsc3ViIHVwZGF0ZWFydG5mdG93bmVyXzM0CmludGNfMSAvLyAxCmZyYW1lX2J1cnkgNApmcmFtZV9kaWcgMwpmcmFtZV9kaWcgNApjYWxsc3ViIHNlbmRhdXJhdG9rZW5fNDEKaW50Y18xIC8vIDEKcmV0dXJuCgovLyBwYXlfOTVfcGVyY2VudApwYXk5NXBlcmNlbnRfMzg6CnByb3RvIDMgMAppbnRjXzAgLy8gMApmcmFtZV9kaWcgLTMKZ3R4bnMgQW1vdW50CmZyYW1lX2RpZyAtMgo9PQovLyBUcmFuc2FjdGlvbiBwcmljZSBpcyBub3QgdGhlIHJlcXVpcmVkIGFtb3VudAphc3NlcnQKZnJhbWVfZGlnIC0zCmd0eG5zIFJlY2VpdmVyCmdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCj09Ci8vIFRyYW5zYWN0aW9uIHJlY2VpdmVyIGhhcyB0byBiZSB0aGUgYXBwIEFkZHJlc3MKYXNzZXJ0CmZyYW1lX2RpZyAtMgpwdXNoaW50IDUgLy8gNQoqCnB1c2hpbnQgMTAwIC8vIDEwMAovCmZyYW1lX2J1cnkgMAppdHhuX2JlZ2luCmludGNfMSAvLyBwYXkKaXR4bl9maWVsZCBUeXBlRW51bQpmcmFtZV9kaWcgMAppdHhuX2ZpZWxkIEFtb3VudApnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwppdHhuX2ZpZWxkIFNlbmRlcgpmcmFtZV9kaWcgLTEKaXR4bl9maWVsZCBSZWNlaXZlcgppdHhuX3N1Ym1pdApyZXRzdWIKCi8vIHZhbGlkYXRlX2FuZF91cGRhdGVfYXJ0X25mdF9vd25lcgp2YWxpZGF0ZWFuZHVwZGF0ZWFydG5mdG93bmVyXzM5Ogpwcm90byAzIDAKYnl0ZWNfMCAvLyAiIgpkdXAKZnJhbWVfZGlnIC0yCmV4dHJhY3QgMiAwCmJveF9sZW4Kc3RvcmUgNjMKc3RvcmUgNjIKbG9hZCA2Mwphc3NlcnQKZnJhbWVfZGlnIC0yCmV4dHJhY3QgMiAwCmJveF9nZXQKc3RvcmUgNjUKc3RvcmUgNjQKbG9hZCA2NQphc3NlcnQKbG9hZCA2NApmcmFtZV9idXJ5IDAKZnJhbWVfZGlnIDAKZXh0cmFjdCA0MiAzMgpmcmFtZV9idXJ5IDEKZnJhbWVfZGlnIDEKZnJhbWVfZGlnIC0zCmd0eG5zIFNlbmRlcgo9PQphc3NlcnQKZnJhbWVfZGlnIC0yCmZyYW1lX2RpZyAtMQpjYWxsc3ViIHVwZGF0ZWFydG5mdG93bmVyXzM0CmludGNfMSAvLyAxCnJldHVybgoKLy8gYm9vdHN0cmFwX3Rva2VuCmJvb3RzdHJhcHRva2VuXzQwOgpwcm90byAyIDAKaW50Y18wIC8vIDAKYnl0ZWNfMCAvLyAiIgppbnRjXzAgLy8gMApkdXAKYnl0ZWNfMCAvLyAiIgpkdXAKZnJhbWVfZGlnIC0yCmV4dHJhY3QgMiAwCmJveF9sZW4Kc3RvcmUgOTgKc3RvcmUgOTcKbG9hZCA5OAohCi8vIEF1cmEgdG9rZW5zIGFscmVhZHkgZXhpc3QKYXNzZXJ0Cml0eG5fYmVnaW4KcHVzaGludCAzIC8vIGFjZmcKaXR4bl9maWVsZCBUeXBlRW51bQpmcmFtZV9kaWcgLTEKaXR4bl9maWVsZCBDb25maWdBc3NldFRvdGFsCmZyYW1lX2RpZyAtMgpleHRyYWN0IDIgMAppdHhuX2ZpZWxkIENvbmZpZ0Fzc2V0TmFtZQpnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwppdHhuX2ZpZWxkIENvbmZpZ0Fzc2V0RnJlZXplCmdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCml0eG5fZmllbGQgQ29uZmlnQXNzZXRNYW5hZ2VyCmdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCml0eG5fZmllbGQgQ29uZmlnQXNzZXRSZXNlcnZlCmdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCml0eG5fZmllbGQgQ29uZmlnQXNzZXRDbGF3YmFjawppdHhuX3N1Ym1pdAppdHhuIENyZWF0ZWRBc3NldElECmZyYW1lX2J1cnkgMApmcmFtZV9kaWcgMAppdG9iCmxvZwpmcmFtZV9kaWcgMAppdG9iCmZyYW1lX2RpZyAtMgpmcmFtZV9idXJ5IDUKZnJhbWVfZGlnIDUKZnJhbWVfYnVyeSA0CnB1c2hpbnQgMTggLy8gMTgKZnJhbWVfYnVyeSAyCmZyYW1lX2RpZyAyCml0b2IKZXh0cmFjdCA2IDAKY29uY2F0CmZyYW1lX2RpZyAtMQppdG9iCmNvbmNhdApmcmFtZV9kaWcgNApjb25jYXQKZnJhbWVfYnVyeSAxCmZyYW1lX2RpZyAtMgpleHRyYWN0IDIgMApib3hfZGVsCnBvcApmcmFtZV9kaWcgLTIKZXh0cmFjdCAyIDAKZnJhbWVfZGlnIDEKYm94X3B1dApyZXRzdWIKCi8vIHNlbmRfYXVyYV90b2tlbgpzZW5kYXVyYXRva2VuXzQxOgpwcm90byAyIDAKYnl0ZWNfMCAvLyAiIgpkdXAKaW50Y18wIC8vIDAKZHVwbiAzCmJ5dGVjXzAgLy8gIiIKZHVwCmNhbGxzdWIgZW5zdXJlYXVyYXNleGlzdF8yMQpieXRlYyA4IC8vIDB4MDAwNDYxNzU3MjYxCmZyYW1lX2J1cnkgMApmcmFtZV9kaWcgMApleHRyYWN0IDIgMApib3hfZ2V0CnN0b3JlIDIzCnN0b3JlIDIyCmxvYWQgMjMKYXNzZXJ0CmxvYWQgMjIKZnJhbWVfYnVyeSAxCmZyYW1lX2RpZyAxCmludGNfMCAvLyAwCmV4dHJhY3RfdWludDY0CmZyYW1lX2J1cnkgMgpmcmFtZV9kaWcgMQpwdXNoaW50IDEwIC8vIDEwCmV4dHJhY3RfdWludDY0CmZyYW1lX2J1cnkgMwpmcmFtZV9kaWcgMwppbnRjXzEgLy8gMQo+CmFzc2VydAppdHhuX2JlZ2luCnB1c2hpbnQgNCAvLyBheGZlcgppdHhuX2ZpZWxkIFR5cGVFbnVtCmZyYW1lX2RpZyAyCml0eG5fZmllbGQgWGZlckFzc2V0CmZyYW1lX2RpZyAtMgppdHhuX2ZpZWxkIEFzc2V0UmVjZWl2ZXIKZnJhbWVfZGlnIC0xCml0eG5fZmllbGQgQXNzZXRBbW91bnQKaXR4bl9zdWJtaXQKZnJhbWVfZGlnIDMKaW50Y18xIC8vIDEKLQpmcmFtZV9idXJ5IDMKZnJhbWVfZGlnIDIKaXRvYgpmcmFtZV9kaWcgMApmcmFtZV9idXJ5IDcKZnJhbWVfZGlnIDcKZnJhbWVfYnVyeSA2CnB1c2hpbnQgMTggLy8gMTgKZnJhbWVfYnVyeSA0CmZyYW1lX2RpZyA0Cml0b2IKZXh0cmFjdCA2IDAKY29uY2F0CmZyYW1lX2RpZyAzCml0b2IKY29uY2F0CmZyYW1lX2RpZyA2CmNvbmNhdApmcmFtZV9idXJ5IDEKZnJhbWVfZGlnIDAKZXh0cmFjdCAyIDAKYm94X2RlbApwb3AKZnJhbWVfZGlnIDAKZXh0cmFjdCAyIDAKZnJhbWVfZGlnIDEKYm94X3B1dApyZXRzdWIKCi8vIGVuc3VyZV9oYXNfYXVyYXMKZW5zdXJlaGFzYXVyYXNfNDI6CnByb3RvIDEgMApieXRlY18wIC8vICIiCmludGNfMCAvLyAwCmNhbGxzdWIgZW5zdXJlYXVyYXNleGlzdF8yMQpieXRlYyA2IC8vICJhdXJhIgpib3hfZ2V0CnN0b3JlIDgxCnN0b3JlIDgwCmxvYWQgODEKYXNzZXJ0CmxvYWQgODAKZnJhbWVfYnVyeSAwCmZyYW1lX2RpZyAwCmludGNfMCAvLyAwCmV4dHJhY3RfdWludDY0CmZyYW1lX2J1cnkgMQpmcmFtZV9kaWcgLTEKZ3R4bnMgU2VuZGVyCmZyYW1lX2RpZyAxCmFzc2V0X2hvbGRpbmdfZ2V0IEFzc2V0QmFsYW5jZQpzdG9yZSA4MgppbnRjXzAgLy8gMAo+CmFzc2VydApyZXRzdWIKCi8vIGVuc3VyZV9hdXJhc19mcm96ZW5fc3RhdHVzCmVuc3VyZWF1cmFzZnJvemVuc3RhdHVzXzQzOgpwcm90byAyIDAKYnl0ZWNfMCAvLyAiIgppbnRjXzAgLy8gMApjYWxsc3ViIGVuc3VyZWF1cmFzZXhpc3RfMjEKYnl0ZWMgNiAvLyAiYXVyYSIKYm94X2dldApzdG9yZSA4NApzdG9yZSA4Mwpsb2FkIDg0CmFzc2VydApsb2FkIDgzCmZyYW1lX2J1cnkgMApmcmFtZV9kaWcgMAppbnRjXzAgLy8gMApleHRyYWN0X3VpbnQ2NApmcmFtZV9idXJ5IDEKZnJhbWVfZGlnIC0yCmd0eG5zIFNlbmRlcgpmcmFtZV9kaWcgMQphc3NldF9ob2xkaW5nX2dldCBBc3NldEZyb3plbgpzdG9yZSA4NgpzdG9yZSA4NQpmcmFtZV9kaWcgLTEKYm56IGVuc3VyZWF1cmFzZnJvemVuc3RhdHVzXzQzX2wyCmxvYWQgODUKIQovLyBhdXJhcyBzaG91bGQgbm90IGJlIGZyb3plbgphc3NlcnQKYiBlbnN1cmVhdXJhc2Zyb3plbnN0YXR1c180M19sMwplbnN1cmVhdXJhc2Zyb3plbnN0YXR1c180M19sMjoKbG9hZCA4NQovLyBhdXJhcyBzaG91bGQgYmUgZnJvemVuCmFzc2VydAplbnN1cmVhdXJhc2Zyb3plbnN0YXR1c180M19sMzoKcmV0c3ViCgovLyBzZXRfYXVyYV90b2tlbnNfZnJvemVuCnNldGF1cmF0b2tlbnNmcm96ZW5fNDQ6CnByb3RvIDIgMApieXRlY18wIC8vICIiCmludGNfMCAvLyAwCmNhbGxzdWIgZW5zdXJlYXVyYXNleGlzdF8yMQpieXRlYyA2IC8vICJhdXJhIgpib3hfZ2V0CnN0b3JlIDg4CnN0b3JlIDg3CmxvYWQgODgKYXNzZXJ0CmxvYWQgODcKZnJhbWVfYnVyeSAwCmZyYW1lX2RpZyAwCmludGNfMCAvLyAwCmV4dHJhY3RfdWludDY0CmZyYW1lX2J1cnkgMQppdHhuX2JlZ2luCnB1c2hpbnQgNSAvLyBhZnJ6Cml0eG5fZmllbGQgVHlwZUVudW0KZnJhbWVfZGlnIDEKaXR4bl9maWVsZCBGcmVlemVBc3NldApmcmFtZV9kaWcgLTIKZ3R4bnMgU2VuZGVyCml0eG5fZmllbGQgRnJlZXplQXNzZXRBY2NvdW50CmZyYW1lX2RpZyAtMQppdHhuX2ZpZWxkIEZyZWV6ZUFzc2V0RnJvemVuCml0eG5fc3VibWl0CnJldHN1YgoKLy8gcHJvbW90ZV90b19hZG1pbl9jYXN0ZXIKcHJvbW90ZXRvYWRtaW5jYXN0ZXJfNDU6CnByb3RvIDAgMApieXRlY18wIC8vICIiCmludGNfMCAvLyAwCmR1cAp0eG5hIEFwcGxpY2F0aW9uQXJncyAxCmludGNfMCAvLyAwCmdldGJ5dGUKZnJhbWVfYnVyeSAyCnR4biBHcm91cEluZGV4CmludGNfMSAvLyAxCi0KZnJhbWVfYnVyeSAxCmZyYW1lX2RpZyAxCmd0eG5zIFR5cGVFbnVtCmludGNfMSAvLyBwYXkKPT0KYXNzZXJ0CmZyYW1lX2RpZyAxCmZyYW1lX2RpZyAyCmNhbGxzdWIgcHJvbW90ZXRvYWRtaW5fMwpmcmFtZV9idXJ5IDAKYnl0ZWNfMSAvLyAweDE1MWY3Yzc1CmZyYW1lX2RpZyAwCmNvbmNhdApsb2cKcmV0c3ViCgovLyBkZW1vdGVfZnJvbV9hZG1pbl9jYXN0ZXIKZGVtb3RlZnJvbWFkbWluY2FzdGVyXzQ2Ogpwcm90byAwIDAKYnl0ZWNfMCAvLyAiIgppbnRjXzAgLy8gMApkdXAKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQppbnRjXzAgLy8gMApnZXRieXRlCmZyYW1lX2J1cnkgMgp0eG4gR3JvdXBJbmRleAppbnRjXzEgLy8gMQotCmZyYW1lX2J1cnkgMQpmcmFtZV9kaWcgMQpndHhucyBUeXBlRW51bQppbnRjXzEgLy8gcGF5Cj09CmFzc2VydApmcmFtZV9kaWcgMQpmcmFtZV9kaWcgMgpjYWxsc3ViIGRlbW90ZWZyb21hZG1pbl80CmZyYW1lX2J1cnkgMApieXRlY18xIC8vIDB4MTUxZjdjNzUKZnJhbWVfZGlnIDAKY29uY2F0CmxvZwpyZXRzdWIKCi8vIHJlZ2lzdGVyX2NyZWF0b3JfY2FzdGVyCnJlZ2lzdGVyY3JlYXRvcmNhc3Rlcl80NzoKcHJvdG8gMCAwCmJ5dGVjXzAgLy8gIiIKaW50Y18wIC8vIDAKYnl0ZWNfMCAvLyAiIgpkdXAKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQpmcmFtZV9idXJ5IDIKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgpmcmFtZV9idXJ5IDMKdHhuIEdyb3VwSW5kZXgKaW50Y18xIC8vIDEKLQpmcmFtZV9idXJ5IDEKZnJhbWVfZGlnIDEKZnJhbWVfZGlnIDIKZnJhbWVfZGlnIDMKY2FsbHN1YiByZWdpc3RlcmNyZWF0b3JfNQpmcmFtZV9idXJ5IDAKYnl0ZWNfMSAvLyAweDE1MWY3Yzc1CmZyYW1lX2RpZyAwCmNvbmNhdApsb2cKcmV0c3ViCgovLyBjcmVhdGVfc291bmRfbmZ0X2Nhc3RlcgpjcmVhdGVzb3VuZG5mdGNhc3Rlcl80ODoKcHJvdG8gMCAwCmJ5dGVjXzAgLy8gIiIKaW50Y18wIC8vIDAKYnl0ZWNfMCAvLyAiIgpkdXBuIDYKaW50Y18wIC8vIDAKYnl0ZWNfMCAvLyAiIgpkdXBuIDIKaW50Y18wIC8vIDAKZHVwbiAzCnR4bmEgQXBwbGljYXRpb25BcmdzIDEKZnJhbWVfYnVyeSAyCnR4bmEgQXBwbGljYXRpb25BcmdzIDIKZnJhbWVfYnVyeSAzCnR4bmEgQXBwbGljYXRpb25BcmdzIDMKZnJhbWVfYnVyeSA0CnR4bmEgQXBwbGljYXRpb25BcmdzIDQKZnJhbWVfYnVyeSA1CnR4bmEgQXBwbGljYXRpb25BcmdzIDUKZnJhbWVfYnVyeSA2CnR4bmEgQXBwbGljYXRpb25BcmdzIDYKZnJhbWVfYnVyeSA3CnR4bmEgQXBwbGljYXRpb25BcmdzIDcKZnJhbWVfYnVyeSA4CnR4bmEgQXBwbGljYXRpb25BcmdzIDgKYnRvaQpmcmFtZV9idXJ5IDkKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgOQpmcmFtZV9idXJ5IDEwCnR4bmEgQXBwbGljYXRpb25BcmdzIDEwCmZyYW1lX2J1cnkgMTEKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMTEKZnJhbWVfYnVyeSAxMgp0eG5hIEFwcGxpY2F0aW9uQXJncyAxMgpidG9pCmZyYW1lX2J1cnkgMTMKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMTMKaW50Y18wIC8vIDAKcHVzaGludCA4IC8vIDgKKgpnZXRiaXQKZnJhbWVfYnVyeSAxNAp0eG5hIEFwcGxpY2F0aW9uQXJncyAxNAppbnRjXzAgLy8gMApnZXRieXRlCmZyYW1lX2J1cnkgMTUKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMTUKaW50Y18wIC8vIDAKZ2V0Ynl0ZQpmcmFtZV9idXJ5IDE2CnR4biBHcm91cEluZGV4CmludGNfMSAvLyAxCi0KZnJhbWVfYnVyeSAxCmZyYW1lX2RpZyAxCmZyYW1lX2RpZyAyCmZyYW1lX2RpZyAzCmZyYW1lX2RpZyA0CmZyYW1lX2RpZyA1CmZyYW1lX2RpZyA2CmZyYW1lX2RpZyA3CmZyYW1lX2RpZyA4CmZyYW1lX2RpZyA5CmZyYW1lX2RpZyAxMApmcmFtZV9kaWcgMTEKZnJhbWVfZGlnIDEyCmZyYW1lX2RpZyAxMwpmcmFtZV9kaWcgMTQKZnJhbWVfZGlnIDE1CmZyYW1lX2RpZyAxNgpjYWxsc3ViIGNyZWF0ZXNvdW5kbmZ0XzYKZnJhbWVfYnVyeSAwCmJ5dGVjXzEgLy8gMHgxNTFmN2M3NQpmcmFtZV9kaWcgMApjb25jYXQKbG9nCnJldHN1YgoKLy8gY3JlYXRlX2FydF9uZnRfY2FzdGVyCmNyZWF0ZWFydG5mdGNhc3Rlcl80OToKcHJvdG8gMCAwCmJ5dGVjXzAgLy8gIiIKaW50Y18wIC8vIDAKYnl0ZWNfMCAvLyAiIgpkdXBuIDMKaW50Y18wIC8vIDAKYnl0ZWNfMCAvLyAiIgpkdXAKaW50Y18wIC8vIDAKZHVwbiAyCnR4bmEgQXBwbGljYXRpb25BcmdzIDEKZnJhbWVfYnVyeSAyCnR4bmEgQXBwbGljYXRpb25BcmdzIDIKZnJhbWVfYnVyeSAzCnR4bmEgQXBwbGljYXRpb25BcmdzIDMKZnJhbWVfYnVyeSA0CnR4bmEgQXBwbGljYXRpb25BcmdzIDQKZnJhbWVfYnVyeSA1CnR4bmEgQXBwbGljYXRpb25BcmdzIDUKYnRvaQpmcmFtZV9idXJ5IDYKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgNgpmcmFtZV9idXJ5IDcKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgNwpmcmFtZV9idXJ5IDgKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgOApidG9pCmZyYW1lX2J1cnkgOQp0eG5hIEFwcGxpY2F0aW9uQXJncyA5CmludGNfMCAvLyAwCmdldGJ5dGUKZnJhbWVfYnVyeSAxMAp0eG5hIEFwcGxpY2F0aW9uQXJncyAxMAppbnRjXzAgLy8gMApnZXRieXRlCmZyYW1lX2J1cnkgMTEKdHhuIEdyb3VwSW5kZXgKaW50Y18xIC8vIDEKLQpmcmFtZV9idXJ5IDEKZnJhbWVfZGlnIDEKZ3R4bnMgVHlwZUVudW0KaW50Y18xIC8vIHBheQo9PQphc3NlcnQKZnJhbWVfZGlnIDEKZnJhbWVfZGlnIDIKZnJhbWVfZGlnIDMKZnJhbWVfZGlnIDQKZnJhbWVfZGlnIDUKZnJhbWVfZGlnIDYKZnJhbWVfZGlnIDcKZnJhbWVfZGlnIDgKZnJhbWVfZGlnIDkKZnJhbWVfZGlnIDEwCmZyYW1lX2RpZyAxMQpjYWxsc3ViIGNyZWF0ZWFydG5mdF83CmZyYW1lX2J1cnkgMApieXRlY18xIC8vIDB4MTUxZjdjNzUKZnJhbWVfZGlnIDAKY29uY2F0CmxvZwpyZXRzdWIKCi8vIGNyZWF0ZV9hcnRfYXVjdGlvbl9jYXN0ZXIKY3JlYXRlYXJ0YXVjdGlvbmNhc3Rlcl81MDoKcHJvdG8gMCAwCmJ5dGVjXzAgLy8gIiIKaW50Y18wIC8vIDAKYnl0ZWNfMCAvLyAiIgpkdXAKaW50Y18wIC8vIDAKZHVwbiAyCnR4bmEgQXBwbGljYXRpb25BcmdzIDEKZnJhbWVfYnVyeSAyCnR4bmEgQXBwbGljYXRpb25BcmdzIDIKZnJhbWVfYnVyeSAzCnR4bmEgQXBwbGljYXRpb25BcmdzIDMKYnRvaQpmcmFtZV9idXJ5IDQKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgNApidG9pCmZyYW1lX2J1cnkgNQp0eG5hIEFwcGxpY2F0aW9uQXJncyA1CmJ0b2kKZnJhbWVfYnVyeSA2CnR4biBHcm91cEluZGV4CmludGNfMSAvLyAxCi0KZnJhbWVfYnVyeSAxCmZyYW1lX2RpZyAxCmd0eG5zIFR5cGVFbnVtCmludGNfMSAvLyBwYXkKPT0KYXNzZXJ0CmZyYW1lX2RpZyAxCmZyYW1lX2RpZyAyCmZyYW1lX2RpZyAzCmZyYW1lX2RpZyA0CmZyYW1lX2RpZyA1CmZyYW1lX2RpZyA2CmNhbGxzdWIgY3JlYXRlYXJ0YXVjdGlvbl84CmZyYW1lX2J1cnkgMApieXRlY18xIC8vIDB4MTUxZjdjNzUKZnJhbWVfZGlnIDAKY29uY2F0CmxvZwpyZXRzdWIKCi8vIGJpZF9vbl9hcnRfYXVjdGlvbl9jYXN0ZXIKYmlkb25hcnRhdWN0aW9uY2FzdGVyXzUxOgpwcm90byAwIDAKYnl0ZWNfMCAvLyAiIgppbnRjXzAgLy8gMApieXRlY18wIC8vICIiCmludGNfMCAvLyAwCnR4bmEgQXBwbGljYXRpb25BcmdzIDEKZnJhbWVfYnVyeSAyCnR4bmEgQXBwbGljYXRpb25BcmdzIDIKYnRvaQpmcmFtZV9idXJ5IDMKdHhuIEdyb3VwSW5kZXgKaW50Y18xIC8vIDEKLQpmcmFtZV9idXJ5IDEKZnJhbWVfZGlnIDEKZ3R4bnMgVHlwZUVudW0KaW50Y18xIC8vIHBheQo9PQphc3NlcnQKZnJhbWVfZGlnIDEKZnJhbWVfZGlnIDIKZnJhbWVfZGlnIDMKY2FsbHN1YiBiaWRvbmFydGF1Y3Rpb25fOQpmcmFtZV9idXJ5IDAKYnl0ZWNfMSAvLyAweDE1MWY3Yzc1CmZyYW1lX2RpZyAwCmNvbmNhdApsb2cKcmV0c3ViCgovLyBjb21wbGV0ZV9hcnRfYXVjdGlvbl9jYXN0ZXIKY29tcGxldGVhcnRhdWN0aW9uY2FzdGVyXzUyOgpwcm90byAwIDAKYnl0ZWNfMCAvLyAiIgppbnRjXzAgLy8gMApieXRlY18wIC8vICIiCnR4bmEgQXBwbGljYXRpb25BcmdzIDEKZnJhbWVfYnVyeSAyCnR4biBHcm91cEluZGV4CmludGNfMSAvLyAxCi0KZnJhbWVfYnVyeSAxCmZyYW1lX2RpZyAxCmd0eG5zIFR5cGVFbnVtCmludGNfMSAvLyBwYXkKPT0KYXNzZXJ0CmZyYW1lX2RpZyAxCmZyYW1lX2RpZyAyCmNhbGxzdWIgY29tcGxldGVhcnRhdWN0aW9uXzEwCmZyYW1lX2J1cnkgMApieXRlY18xIC8vIDB4MTUxZjdjNzUKZnJhbWVfZGlnIDAKY29uY2F0CmxvZwpyZXRzdWIKCi8vIHB1cmNoYXNlX25mdF9jYXN0ZXIKcHVyY2hhc2VuZnRjYXN0ZXJfNTM6CnByb3RvIDAgMAppbnRjXzAgLy8gMApkdXAKYnl0ZWNfMCAvLyAiIgpkdXAKaW50Y18wIC8vIDAKZHVwbiA0CnR4bmEgQXBwbGljYXRpb25BcmdzIDEKZnJhbWVfYnVyeSAyCnR4bmEgQXBwbGljYXRpb25BcmdzIDIKZnJhbWVfYnVyeSAzCnR4bmEgQXBwbGljYXRpb25BcmdzIDMKaW50Y18wIC8vIDAKZ2V0Ynl0ZQpmcmFtZV9idXJ5IDQKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgNAppbnRjXzAgLy8gMApnZXRieXRlCmZyYW1lX2J1cnkgNQp0eG5hIEFwcGxpY2F0aW9uQXJncyA1CmludGNfMCAvLyAwCmdldGJ5dGUKZnJhbWVfYnVyeSA2CnR4bmEgQXBwbGljYXRpb25BcmdzIDYKaW50Y18wIC8vIDAKZ2V0Ynl0ZQpmcmFtZV9idXJ5IDgKdHhuIEdyb3VwSW5kZXgKcHVzaGludCAzIC8vIDMKLQpmcmFtZV9idXJ5IDAKZnJhbWVfZGlnIDAKZ3R4bnMgVHlwZUVudW0KaW50Y18xIC8vIHBheQo9PQphc3NlcnQKdHhuIEdyb3VwSW5kZXgKcHVzaGludCAyIC8vIDIKLQpmcmFtZV9idXJ5IDEKZnJhbWVfZGlnIDEKZ3R4bnMgVHlwZUVudW0KcHVzaGludCA0IC8vIGF4ZmVyCj09CmFzc2VydAp0eG4gR3JvdXBJbmRleAppbnRjXzEgLy8gMQotCmZyYW1lX2J1cnkgNwpmcmFtZV9kaWcgNwpndHhucyBUeXBlRW51bQpwdXNoaW50IDQgLy8gYXhmZXIKPT0KYXNzZXJ0CmZyYW1lX2RpZyAwCmZyYW1lX2RpZyAxCmZyYW1lX2RpZyAyCmZyYW1lX2RpZyAzCmZyYW1lX2RpZyA0CmZyYW1lX2RpZyA1CmZyYW1lX2RpZyA2CmZyYW1lX2RpZyA3CmZyYW1lX2RpZyA4CmNhbGxzdWIgcHVyY2hhc2VuZnRfMTEKcmV0c3ViCgovLyB0cmFuc2Zlcl9uZnRfY2FzdGVyCnRyYW5zZmVybmZ0Y2FzdGVyXzU0Ogpwcm90byAwIDAKaW50Y18wIC8vIDAKYnl0ZWNfMCAvLyAiIgpkdXBuIDIKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQpmcmFtZV9idXJ5IDEKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgpmcmFtZV9idXJ5IDIKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMwpmcmFtZV9idXJ5IDMKdHhuIEdyb3VwSW5kZXgKaW50Y18xIC8vIDEKLQpmcmFtZV9idXJ5IDAKZnJhbWVfZGlnIDAKZ3R4bnMgVHlwZUVudW0KaW50Y18xIC8vIHBheQo9PQphc3NlcnQKZnJhbWVfZGlnIDAKZnJhbWVfZGlnIDEKZnJhbWVfZGlnIDIKZnJhbWVfZGlnIDMKY2FsbHN1YiB0cmFuc2Zlcm5mdF8xMgpyZXRzdWIKCi8vIGNyZWF0ZV9wcm9wb3NhbF9jYXN0ZXIKY3JlYXRlcHJvcG9zYWxjYXN0ZXJfNTU6CnByb3RvIDAgMApieXRlY18wIC8vICIiCmludGNfMCAvLyAwCmJ5dGVjXzAgLy8gIiIKZHVwCnR4bmEgQXBwbGljYXRpb25BcmdzIDEKZnJhbWVfYnVyeSAyCnR4bmEgQXBwbGljYXRpb25BcmdzIDIKZnJhbWVfYnVyeSAzCnR4biBHcm91cEluZGV4CmludGNfMSAvLyAxCi0KZnJhbWVfYnVyeSAxCmZyYW1lX2RpZyAxCmd0eG5zIFR5cGVFbnVtCmludGNfMSAvLyBwYXkKPT0KYXNzZXJ0CmZyYW1lX2RpZyAxCmZyYW1lX2RpZyAyCmZyYW1lX2RpZyAzCmNhbGxzdWIgY3JlYXRlcHJvcG9zYWxfMTMKZnJhbWVfYnVyeSAwCmJ5dGVjXzEgLy8gMHgxNTFmN2M3NQpmcmFtZV9kaWcgMApjb25jYXQKbG9nCnJldHN1YgoKLy8gdm90ZV9vbl9wcm9wb3NhbF9jYXN0ZXIKdm90ZW9ucHJvcG9zYWxjYXN0ZXJfNTY6CnByb3RvIDAgMApieXRlY18wIC8vICIiCmludGNfMCAvLyAwCmR1cG4gMwpieXRlY18wIC8vICIiCnR4bmEgQXBwbGljYXRpb25BcmdzIDEKaW50Y18wIC8vIDAKcHVzaGludCA4IC8vIDgKKgpnZXRiaXQKZnJhbWVfYnVyeSAyCnR4bmEgQXBwbGljYXRpb25BcmdzIDIKaW50Y18wIC8vIDAKZ2V0Ynl0ZQpmcmFtZV9idXJ5IDMKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMwppbnRjXzAgLy8gMApnZXRieXRlCmZyYW1lX2J1cnkgNAp0eG5hIEFwcGxpY2F0aW9uQXJncyA0CmZyYW1lX2J1cnkgNQp0eG4gR3JvdXBJbmRleAppbnRjXzEgLy8gMQotCmZyYW1lX2J1cnkgMQpmcmFtZV9kaWcgMQpndHhucyBUeXBlRW51bQppbnRjXzEgLy8gcGF5Cj09CmFzc2VydApmcmFtZV9kaWcgMQpmcmFtZV9kaWcgMgpmcmFtZV9kaWcgMwpmcmFtZV9kaWcgNApmcmFtZV9kaWcgNQpjYWxsc3ViIHZvdGVvbnByb3Bvc2FsXzE0CmZyYW1lX2J1cnkgMApieXRlY18xIC8vIDB4MTUxZjdjNzUKZnJhbWVfZGlnIDAKY29uY2F0CmxvZwpyZXRzdWIKCi8vIGVuZF9wcm9wb3NhbF92b3RpbmdfY2FzdGVyCmVuZHByb3Bvc2Fsdm90aW5nY2FzdGVyXzU3Ogpwcm90byAwIDAKYnl0ZWNfMCAvLyAiIgppbnRjXzAgLy8gMApieXRlY18wIC8vICIiCnR4bmEgQXBwbGljYXRpb25BcmdzIDEKZnJhbWVfYnVyeSAyCnR4biBHcm91cEluZGV4CmludGNfMSAvLyAxCi0KZnJhbWVfYnVyeSAxCmZyYW1lX2RpZyAxCmd0eG5zIFR5cGVFbnVtCmludGNfMSAvLyBwYXkKPT0KYXNzZXJ0CmZyYW1lX2RpZyAxCmZyYW1lX2RpZyAyCmNhbGxzdWIgZW5kcHJvcG9zYWx2b3RpbmdfMTUKZnJhbWVfYnVyeSAwCmJ5dGVjXzEgLy8gMHgxNTFmN2M3NQpmcmFtZV9kaWcgMApjb25jYXQKbG9nCnJldHN1YgoKLy8gdW5mcmVlemVfYXVyYXNfY2FzdGVyCnVuZnJlZXplYXVyYXNjYXN0ZXJfNTg6CnByb3RvIDAgMAppbnRjXzAgLy8gMApkdXBuIDIKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQppbnRjXzAgLy8gMApnZXRieXRlCmZyYW1lX2J1cnkgMQp0eG5hIEFwcGxpY2F0aW9uQXJncyAyCmludGNfMCAvLyAwCmdldGJ5dGUKZnJhbWVfYnVyeSAyCnR4biBHcm91cEluZGV4CmludGNfMSAvLyAxCi0KZnJhbWVfYnVyeSAwCmZyYW1lX2RpZyAwCmd0eG5zIFR5cGVFbnVtCmludGNfMSAvLyBwYXkKPT0KYXNzZXJ0CmZyYW1lX2RpZyAwCmZyYW1lX2RpZyAxCmZyYW1lX2RpZyAyCmNhbGxzdWIgdW5mcmVlemVhdXJhc18xNgpyZXRzdWIKCi8vIGNyZWF0ZV9hdXJhX3Rva2Vuc19jYXN0ZXIKY3JlYXRlYXVyYXRva2Vuc2Nhc3Rlcl81OToKcHJvdG8gMCAwCmJ5dGVjXzAgLy8gIiIKY2FsbHN1YiBjcmVhdGVhdXJhdG9rZW5zXzE3CmZyYW1lX2J1cnkgMApieXRlY18xIC8vIDB4MTUxZjdjNzUKZnJhbWVfZGlnIDAKY29uY2F0CmxvZwpyZXRzdWIKCi8vIGNyZWF0ZV9ldmVudF9jYXN0ZXIKY3JlYXRlZXZlbnRjYXN0ZXJfNjA6CnByb3RvIDAgMApieXRlY18wIC8vICIiCmludGNfMCAvLyAwCmJ5dGVjXzAgLy8gIiIKZHVwCmludGNfMCAvLyAwCmR1cApieXRlY18wIC8vICIiCmludGNfMCAvLyAwCnR4bmEgQXBwbGljYXRpb25BcmdzIDEKZnJhbWVfYnVyeSAyCnR4bmEgQXBwbGljYXRpb25BcmdzIDIKZnJhbWVfYnVyeSAzCnR4bmEgQXBwbGljYXRpb25BcmdzIDMKYnRvaQpmcmFtZV9idXJ5IDQKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgNApidG9pCmZyYW1lX2J1cnkgNQp0eG5hIEFwcGxpY2F0aW9uQXJncyA1CmZyYW1lX2J1cnkgNgp0eG5hIEFwcGxpY2F0aW9uQXJncyA2CmJ0b2kKZnJhbWVfYnVyeSA3CnR4biBHcm91cEluZGV4CmludGNfMSAvLyAxCi0KZnJhbWVfYnVyeSAxCmZyYW1lX2RpZyAxCmd0eG5zIFR5cGVFbnVtCmludGNfMSAvLyBwYXkKPT0KYXNzZXJ0CmZyYW1lX2RpZyAxCmZyYW1lX2RpZyAyCmZyYW1lX2RpZyAzCmZyYW1lX2RpZyA0CmZyYW1lX2RpZyA1CmZyYW1lX2RpZyA2CmZyYW1lX2RpZyA3CmNhbGxzdWIgY3JlYXRlZXZlbnRfMTgKZnJhbWVfYnVyeSAwCmJ5dGVjXzEgLy8gMHgxNTFmN2M3NQpmcmFtZV9kaWcgMApjb25jYXQKbG9nCnJldHN1YgoKLy8gcHVyY2hhc2VfZXZlbnRfdGlja2V0X2Nhc3RlcgpwdXJjaGFzZWV2ZW50dGlja2V0Y2FzdGVyXzYxOgpwcm90byAwIDAKYnl0ZWNfMCAvLyAiIgppbnRjXzAgLy8gMApieXRlY18wIC8vICIiCmR1cAppbnRjXzAgLy8gMAp0eG5hIEFwcGxpY2F0aW9uQXJncyAxCmZyYW1lX2J1cnkgMgp0eG5hIEFwcGxpY2F0aW9uQXJncyAyCmZyYW1lX2J1cnkgMwp0eG5hIEFwcGxpY2F0aW9uQXJncyAzCmludGNfMCAvLyAwCmdldGJ5dGUKZnJhbWVfYnVyeSA0CnR4biBHcm91cEluZGV4CmludGNfMSAvLyAxCi0KZnJhbWVfYnVyeSAxCmZyYW1lX2RpZyAxCmd0eG5zIFR5cGVFbnVtCmludGNfMSAvLyBwYXkKPT0KYXNzZXJ0CmZyYW1lX2RpZyAxCmZyYW1lX2RpZyAyCmZyYW1lX2RpZyAzCmZyYW1lX2RpZyA0CmNhbGxzdWIgcHVyY2hhc2VldmVudHRpY2tldF8xOQpmcmFtZV9idXJ5IDAKYnl0ZWNfMSAvLyAweDE1MWY3Yzc1CmZyYW1lX2RpZyAwCmNvbmNhdApsb2cKcmV0c3ViCgovLyBoZWxsb19jYXN0ZXIKaGVsbG9jYXN0ZXJfNjI6CnByb3RvIDAgMApieXRlY18wIC8vICIiCmR1cAp0eG5hIEFwcGxpY2F0aW9uQXJncyAxCmZyYW1lX2J1cnkgMQpmcmFtZV9kaWcgMQpjYWxsc3ViIGhlbGxvXzIwCmZyYW1lX2J1cnkgMApieXRlY18xIC8vIDB4MTUxZjdjNzUKZnJhbWVfZGlnIDAKY29uY2F0CmxvZwpyZXRzdWI=",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDgKcHVzaGludCAwIC8vIDAKcmV0dXJu"
  },
  "state": {
    "global": {
      "num_byte_slices": 1,
      "num_uints": 0
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "schema": {
    "global": {
      "declared": {
        "active_proposal": {
          "type": "bytes",
          "key": "active_proposal",
          "descr": ""
        }
      },
      "reserved": {}
    },
    "local": {
      "declared": {},
      "reserved": {}
    }
  },
  "contract": {
    "name": "Aurally",
    "methods": [
      {
        "name": "promote_to_admin",
        "args": [
          {
            "type": "pay",
            "name": "txn"
          },
          {
            "type": "account",
            "name": "acc"
          }
        ],
        "returns": {
          "type": "string"
        }
      },
      {
        "name": "demote_from_admin",
        "args": [
          {
            "type": "pay",
            "name": "txn"
          },
          {
            "type": "account",
            "name": "acc"
          }
        ],
        "returns": {
          "type": "string"
        }
      },
      {
        "name": "register_creator",
        "args": [
          {
            "type": "txn",
            "name": "txn"
          },
          {
            "type": "string",
            "name": "fullname"
          },
          {
            "type": "string",
            "name": "username"
          }
        ],
        "returns": {
          "type": "(bool,bool,uint64,string,string,uint64)"
        }
      },
      {
        "name": "create_sound_nft",
        "args": [
          {
            "type": "txn",
            "name": "txn"
          },
          {
            "type": "string",
            "name": "nft_name"
          },
          {
            "type": "string",
            "name": "asset_key"
          },
          {
            "type": "string",
            "name": "title"
          },
          {
            "type": "string",
            "name": "label"
          },
          {
            "type": "string",
            "name": "artist"
          },
          {
            "type": "string",
            "name": "release_date"
          },
          {
            "type": "string",
            "name": "genre"
          },
          {
            "type": "uint64",
            "name": "price"
          },
          {
            "type": "string",
            "name": "cover_image_ipfs"
          },
          {
            "type": "string",
            "name": "audio_sample_ipfs"
          },
          {
            "type": "string",
            "name": "full_track_ipfs"
          },
          {
            "type": "uint64",
            "name": "supply"
          },
          {
            "type": "bool",
            "name": "for_sale"
          },
          {
            "type": "asset",
            "name": "aura_asset"
          },
          {
            "type": "account",
            "name": "creator"
          }
        ],
        "returns": {
          "type": "(uint64,string,uint64,string,string,string,string,string,uint64,string,string,string,address,bool)"
        }
      },
      {
        "name": "create_art_nft",
        "args": [
          {
            "type": "pay",
            "name": "txn"
          },
          {
            "type": "string",
            "name": "asset_key"
          },
          {
            "type": "string",
            "name": "nft_name"
          },
          {
            "type": "string",
            "name": "title"
          },
          {
            "type": "string",
            "name": "name"
          },
          {
            "type": "uint64",
            "name": "supply"
          },
          {
            "type": "string",
            "name": "description"
          },
          {
            "type": "string",
            "name": "ipfs_location"
          },
          {
            "type": "uint64",
            "name": "price"
          },
          {
            "type": "asset",
            "name": "aura_asset"
          },
          {
            "type": "account",
            "name": "creator"
          }
        ],
        "returns": {
          "type": "(uint64,string,string,string,uint64,string,string,uint64,uint64,address,bool)"
        }
      },
      {
        "name": "create_art_auction",
        "args": [
          {
            "type": "pay",
            "name": "txn"
          },
          {
            "type": "string",
            "name": "auction_key"
          },
          {
            "type": "string",
            "name": "asset_key"
          },
          {
            "type": "uint64",
            "name": "min_bid"
          },
          {
            "type": "uint64",
            "name": "starts_at"
          },
          {
            "type": "uint64",
            "name": "ends_at"
          }
        ],
        "returns": {
          "type": "(address,string,string,uint64,uint64,uint64,uint64,address)"
        }
      },
      {
        "name": "bid_on_art_auction",
        "args": [
          {
            "type": "pay",
            "name": "txn"
          },
          {
            "type": "string",
            "name": "auction_key"
          },
          {
            "type": "uint64",
            "name": "bid_ammount"
          }
        ],
        "returns": {
          "type": "(address,string,string,uint64,uint64,uint64,uint64,address)"
        }
      },
      {
        "name": "complete_art_auction",
        "args": [
          {
            "type": "pay",
            "name": "txn"
          },
          {
            "type": "string",
            "name": "auction_key"
          }
        ],
        "returns": {
          "type": "(uint64,string,string,string,uint64,string,string,uint64,uint64,address,bool)"
        }
      },
      {
        "name": "purchase_nft",
        "args": [
          {
            "type": "pay",
            "name": "txn"
          },
          {
            "type": "axfer",
            "name": "optin_txn"
          },
          {
            "type": "string",
            "name": "asset_key"
          },
          {
            "type": "string",
            "name": "nft_type"
          },
          {
            "type": "account",
            "name": "seller"
          },
          {
            "type": "asset",
            "name": "nft_id"
          },
          {
            "type": "asset",
            "name": "aura_id"
          },
          {
            "type": "axfer",
            "name": "aura_optin_txn"
          },
          {
            "type": "account",
            "name": "buyer"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "transfer_nft",
        "args": [
          {
            "type": "pay",
            "name": "txn"
          },
          {
            "type": "address",
            "name": "to"
          },
          {
            "type": "string",
            "name": "asset_key"
          },
          {
            "type": "string",
            "name": "nft_type"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "create_proposal",
        "args": [
          {
            "type": "pay",
            "name": "txn"
          },
          {
            "type": "string",
            "name": "proposal_key"
          },
          {
            "type": "string",
            "name": "proposal_detail"
          }
        ],
        "returns": {
          "type": "(string,uint64,uint64,string)"
        }
      },
      {
        "name": "vote_on_proposal",
        "args": [
          {
            "type": "pay",
            "name": "txn"
          },
          {
            "type": "bool",
            "name": "vote_for"
          },
          {
            "type": "asset",
            "name": "aura_id"
          },
          {
            "type": "account",
            "name": "voter"
          },
          {
            "type": "string",
            "name": "proposal_key"
          }
        ],
        "returns": {
          "type": "(string,uint64,uint64,string)"
        }
      },
      {
        "name": "end_proposal_voting",
        "args": [
          {
            "type": "pay",
            "name": "txn"
          },
          {
            "type": "string",
            "name": "proposal_key"
          }
        ],
        "returns": {
          "type": "(string,uint64,uint64,string)"
        }
      },
      {
        "name": "unfreeze_auras",
        "args": [
          {
            "type": "pay",
            "name": "txn"
          },
          {
            "type": "asset",
            "name": "aura"
          },
          {
            "type": "account",
            "name": "acc"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "create_aura_tokens",
        "args": [],
        "returns": {
          "type": "(uint64,string,uint64)"
        }
      },
      {
        "name": "create_event",
        "args": [
          {
            "type": "pay",
            "name": "txn"
          },
          {
            "type": "string",
            "name": "key"
          },
          {
            "type": "string",
            "name": "name"
          },
          {
            "type": "uint64",
            "name": "start_date"
          },
          {
            "type": "uint64",
            "name": "end_date"
          },
          {
            "type": "string",
            "name": "cover_image_ipfs"
          },
          {
            "type": "uint64",
            "name": "ticket_price"
          }
        ],
        "returns": {
          "type": "(uint64,string,string,uint64,uint64,string,uint64,address)"
        }
      },
      {
        "name": "purchase_event_ticket",
        "args": [
          {
            "type": "pay",
            "name": "txn"
          },
          {
            "type": "string",
            "name": "event_key"
          },
          {
            "type": "string",
            "name": "ticket_key"
          },
          {
            "type": "account",
            "name": "event_owner"
          }
        ],
        "returns": {
          "type": "(uint64,string,string,uint64,address)"
        }
      },
      {
        "name": "hello",
        "args": [
          {
            "type": "string",
            "name": "name"
          }
        ],
        "returns": {
          "type": "string"
        }
      }
    ],
    "networks": {}
  },
  "bare_call_config": {
    "delete_application": "CALL",
    "no_op": "CREATE",
    "update_application": "CALL"
  }
}

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp =  { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC }
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn =  { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC }
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut =  { onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC }
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp =  { onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC }
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp =  { onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC }
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt
   */
  asBigInt(): bigint
  /**
   * Gets the state value as a number.
   */
  asNumber(): number
}
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array
  /**
   * Gets the state value as a string
   */
  asString(): string
}

/**
 * Defines the types of available calls and state of the Aurally smart contract.
 */
export type Aurally = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'promote_to_admin(pay,account)string' | 'promote_to_admin', {
      argsObj: {
        txn: TransactionToSign | Transaction | Promise<SendTransactionResult>
        acc: string | Uint8Array
      }
      argsTuple: [txn: TransactionToSign | Transaction | Promise<SendTransactionResult>, acc: string | Uint8Array]
      returns: string
    }>
    & Record<'demote_from_admin(pay,account)string' | 'demote_from_admin', {
      argsObj: {
        txn: TransactionToSign | Transaction | Promise<SendTransactionResult>
        acc: string | Uint8Array
      }
      argsTuple: [txn: TransactionToSign | Transaction | Promise<SendTransactionResult>, acc: string | Uint8Array]
      returns: string
    }>
    & Record<'register_creator(txn,string,string)(bool,bool,uint64,string,string,uint64)' | 'register_creator', {
      argsObj: {
        txn: TransactionToSign | Transaction | Promise<SendTransactionResult>
        fullname: string
        username: string
      }
      argsTuple: [txn: TransactionToSign | Transaction | Promise<SendTransactionResult>, fullname: string, username: string]
      returns: AurallyCreative
    }>
    & Record<'create_sound_nft(txn,string,string,string,string,string,string,string,uint64,string,string,string,uint64,bool,asset,account)(uint64,string,uint64,string,string,string,string,string,uint64,string,string,string,address,bool)' | 'create_sound_nft', {
      argsObj: {
        txn: TransactionToSign | Transaction | Promise<SendTransactionResult>
        nft_name: string
        asset_key: string
        title: string
        label: string
        artist: string
        release_date: string
        genre: string
        price: bigint | number
        cover_image_ipfs: string
        audio_sample_ipfs: string
        full_track_ipfs: string
        supply: bigint | number
        for_sale: boolean
        aura_asset: number | bigint
        creator: string | Uint8Array
      }
      argsTuple: [txn: TransactionToSign | Transaction | Promise<SendTransactionResult>, nft_name: string, asset_key: string, title: string, label: string, artist: string, release_date: string, genre: string, price: bigint | number, cover_image_ipfs: string, audio_sample_ipfs: string, full_track_ipfs: string, supply: bigint | number, for_sale: boolean, aura_asset: number | bigint, creator: string | Uint8Array]
      returns: SoundNft
    }>
    & Record<'create_art_nft(pay,string,string,string,string,uint64,string,string,uint64,asset,account)(uint64,string,string,string,uint64,string,string,uint64,uint64,address,bool)' | 'create_art_nft', {
      argsObj: {
        txn: TransactionToSign | Transaction | Promise<SendTransactionResult>
        asset_key: string
        nft_name: string
        title: string
        name: string
        supply: bigint | number
        description: string
        ipfs_location: string
        price: bigint | number
        aura_asset: number | bigint
        creator: string | Uint8Array
      }
      argsTuple: [txn: TransactionToSign | Transaction | Promise<SendTransactionResult>, asset_key: string, nft_name: string, title: string, name: string, supply: bigint | number, description: string, ipfs_location: string, price: bigint | number, aura_asset: number | bigint, creator: string | Uint8Array]
      returns: ArtNft
    }>
    & Record<'create_art_auction(pay,string,string,uint64,uint64,uint64)(address,string,string,uint64,uint64,uint64,uint64,address)' | 'create_art_auction', {
      argsObj: {
        txn: TransactionToSign | Transaction | Promise<SendTransactionResult>
        auction_key: string
        asset_key: string
        min_bid: bigint | number
        starts_at: bigint | number
        ends_at: bigint | number
      }
      argsTuple: [txn: TransactionToSign | Transaction | Promise<SendTransactionResult>, auction_key: string, asset_key: string, min_bid: bigint | number, starts_at: bigint | number, ends_at: bigint | number]
      returns: ArtAuctionItem
    }>
    & Record<'bid_on_art_auction(pay,string,uint64)(address,string,string,uint64,uint64,uint64,uint64,address)' | 'bid_on_art_auction', {
      argsObj: {
        txn: TransactionToSign | Transaction | Promise<SendTransactionResult>
        auction_key: string
        bid_ammount: bigint | number
      }
      argsTuple: [txn: TransactionToSign | Transaction | Promise<SendTransactionResult>, auction_key: string, bid_ammount: bigint | number]
      returns: ArtAuctionItem
    }>
    & Record<'complete_art_auction(pay,string)(uint64,string,string,string,uint64,string,string,uint64,uint64,address,bool)' | 'complete_art_auction', {
      argsObj: {
        txn: TransactionToSign | Transaction | Promise<SendTransactionResult>
        auction_key: string
      }
      argsTuple: [txn: TransactionToSign | Transaction | Promise<SendTransactionResult>, auction_key: string]
      returns: ArtNft
    }>
    & Record<'purchase_nft(pay,axfer,string,string,account,asset,asset,axfer,account)void' | 'purchase_nft', {
      argsObj: {
        txn: TransactionToSign | Transaction | Promise<SendTransactionResult>
        optin_txn: TransactionToSign | Transaction | Promise<SendTransactionResult>
        asset_key: string
        nft_type: string
        seller: string | Uint8Array
        nft_id: number | bigint
        aura_id: number | bigint
        aura_optin_txn: TransactionToSign | Transaction | Promise<SendTransactionResult>
        buyer: string | Uint8Array
      }
      argsTuple: [txn: TransactionToSign | Transaction | Promise<SendTransactionResult>, optin_txn: TransactionToSign | Transaction | Promise<SendTransactionResult>, asset_key: string, nft_type: string, seller: string | Uint8Array, nft_id: number | bigint, aura_id: number | bigint, aura_optin_txn: TransactionToSign | Transaction | Promise<SendTransactionResult>, buyer: string | Uint8Array]
      returns: void
    }>
    & Record<'transfer_nft(pay,address,string,string)void' | 'transfer_nft', {
      argsObj: {
        txn: TransactionToSign | Transaction | Promise<SendTransactionResult>
        to: string
        asset_key: string
        nft_type: string
      }
      argsTuple: [txn: TransactionToSign | Transaction | Promise<SendTransactionResult>, to: string, asset_key: string, nft_type: string]
      returns: void
    }>
    & Record<'create_proposal(pay,string,string)(string,uint64,uint64,string)' | 'create_proposal', {
      argsObj: {
        txn: TransactionToSign | Transaction | Promise<SendTransactionResult>
        proposal_key: string
        proposal_detail: string
      }
      argsTuple: [txn: TransactionToSign | Transaction | Promise<SendTransactionResult>, proposal_key: string, proposal_detail: string]
      returns: Proposal
    }>
    & Record<'vote_on_proposal(pay,bool,asset,account,string)(string,uint64,uint64,string)' | 'vote_on_proposal', {
      argsObj: {
        txn: TransactionToSign | Transaction | Promise<SendTransactionResult>
        vote_for: boolean
        aura_id: number | bigint
        voter: string | Uint8Array
        proposal_key: string
      }
      argsTuple: [txn: TransactionToSign | Transaction | Promise<SendTransactionResult>, vote_for: boolean, aura_id: number | bigint, voter: string | Uint8Array, proposal_key: string]
      returns: Proposal
    }>
    & Record<'end_proposal_voting(pay,string)(string,uint64,uint64,string)' | 'end_proposal_voting', {
      argsObj: {
        txn: TransactionToSign | Transaction | Promise<SendTransactionResult>
        proposal_key: string
      }
      argsTuple: [txn: TransactionToSign | Transaction | Promise<SendTransactionResult>, proposal_key: string]
      returns: Proposal
    }>
    & Record<'unfreeze_auras(pay,asset,account)void' | 'unfreeze_auras', {
      argsObj: {
        txn: TransactionToSign | Transaction | Promise<SendTransactionResult>
        aura: number | bigint
        acc: string | Uint8Array
      }
      argsTuple: [txn: TransactionToSign | Transaction | Promise<SendTransactionResult>, aura: number | bigint, acc: string | Uint8Array]
      returns: void
    }>
    & Record<'create_aura_tokens()(uint64,string,uint64)' | 'create_aura_tokens', {
      argsObj: {
      }
      argsTuple: []
      returns: AurallyToken
    }>
    & Record<'create_event(pay,string,string,uint64,uint64,string,uint64)(uint64,string,string,uint64,uint64,string,uint64,address)' | 'create_event', {
      argsObj: {
        txn: TransactionToSign | Transaction | Promise<SendTransactionResult>
        key: string
        name: string
        start_date: bigint | number
        end_date: bigint | number
        cover_image_ipfs: string
        ticket_price: bigint | number
      }
      argsTuple: [txn: TransactionToSign | Transaction | Promise<SendTransactionResult>, key: string, name: string, start_date: bigint | number, end_date: bigint | number, cover_image_ipfs: string, ticket_price: bigint | number]
      returns: Event
    }>
    & Record<'purchase_event_ticket(pay,string,string,account)(uint64,string,string,uint64,address)' | 'purchase_event_ticket', {
      argsObj: {
        txn: TransactionToSign | Transaction | Promise<SendTransactionResult>
        event_key: string
        ticket_key: string
        event_owner: string | Uint8Array
      }
      argsTuple: [txn: TransactionToSign | Transaction | Promise<SendTransactionResult>, event_key: string, ticket_key: string, event_owner: string | Uint8Array]
      returns: EventTicket
    }>
    & Record<'hello(string)string' | 'hello', {
      argsObj: {
        name: string
      }
      argsTuple: [name: string]
      returns: string
    }>
  /**
   * Defines the shape of the global and local state of the application.
   */
  state: {
    global: {
      'active_proposal'?: BinaryState
    }
  }
}
/**
 * Defines the possible abi call signatures
 */
export type AurallySig = keyof Aurally['methods']
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends AurallySig | undefined> = {
  method: TSignature
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>
} & AppClientCallCoreParams & CoreAppCallArgs
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>
/**
 * Represents a AurallyCreative result as a struct
 */
export type AurallyCreative = {
  is_music_creative: boolean
  is_art_creative: boolean
  minted: bigint
  fullname: string
  username: string
  d_nft_id: bigint
}
/**
 * Converts the tuple representation of a AurallyCreative to the struct representation
 */
export function AurallyCreative([is_music_creative, is_art_creative, minted, fullname, username, d_nft_id]: [boolean, boolean, bigint, string, string, bigint] ) {
  return {
    is_music_creative,
    is_art_creative,
    minted,
    fullname,
    username,
    d_nft_id,
  }
}
/**
 * Represents a SoundNFT result as a struct
 */
export type SoundNft = {
  asset_id: bigint
  asset_key: string
  supply: bigint
  title: string
  label: string
  artist: string
  release_date: string
  genre: string
  price: bigint
  cover_image_ipfs: string
  audio_sample_ipfs: string
  full_track_ipfs: string
  owner: string
  for_sale: boolean
}
/**
 * Converts the tuple representation of a SoundNFT to the struct representation
 */
export function SoundNft([asset_id, asset_key, supply, title, label, artist, release_date, genre, price, cover_image_ipfs, audio_sample_ipfs, full_track_ipfs, owner, for_sale]: [bigint, string, bigint, string, string, string, string, string, bigint, string, string, string, string, boolean] ) {
  return {
    asset_id,
    asset_key,
    supply,
    title,
    label,
    artist,
    release_date,
    genre,
    price,
    cover_image_ipfs,
    audio_sample_ipfs,
    full_track_ipfs,
    owner,
    for_sale,
  }
}
/**
 * Represents a ArtAuctionItem result as a struct
 */
export type ArtAuctionItem = {
  auctioneer: string
  item_id: string
  item_name: string
  min_bid: bigint
  starts_at: bigint
  ends_at: bigint
  highest_bid: bigint
  highest_bidder: string
}
/**
 * Converts the tuple representation of a ArtAuctionItem to the struct representation
 */
export function ArtAuctionItem([auctioneer, item_id, item_name, min_bid, starts_at, ends_at, highest_bid, highest_bidder]: [string, string, string, bigint, bigint, bigint, bigint, string] ) {
  return {
    auctioneer,
    item_id,
    item_name,
    min_bid,
    starts_at,
    ends_at,
    highest_bid,
    highest_bidder,
  }
}
/**
 * Represents a ArtNFT result as a struct
 */
export type ArtNft = {
  asset_id: bigint
  asset_key: string
  title: string
  name: string
  supply: bigint
  description: string
  ipfs_location: string
  price: bigint
  sold_price: bigint
  owner: string
  for_sale: boolean
}
/**
 * Converts the tuple representation of a ArtNFT to the struct representation
 */
export function ArtNft([asset_id, asset_key, title, name, supply, description, ipfs_location, price, sold_price, owner, for_sale]: [bigint, string, string, string, bigint, string, string, bigint, bigint, string, boolean] ) {
  return {
    asset_id,
    asset_key,
    title,
    name,
    supply,
    description,
    ipfs_location,
    price,
    sold_price,
    owner,
    for_sale,
  }
}
/**
 * Represents a Proposal result as a struct
 */
export type Proposal = {
  proposal_id: string
  yes_votes: bigint
  no_votes: bigint
  details: string
}
/**
 * Converts the tuple representation of a Proposal to the struct representation
 */
export function Proposal([proposal_id, yes_votes, no_votes, details]: [string, bigint, bigint, string] ) {
  return {
    proposal_id,
    yes_votes,
    no_votes,
    details,
  }
}
/**
 * Represents a AurallyToken result as a struct
 */
export type AurallyToken = {
  asset_id: bigint
  asset_key: string
  asset_total: bigint
}
/**
 * Converts the tuple representation of a AurallyToken to the struct representation
 */
export function AurallyToken([asset_id, asset_key, asset_total]: [bigint, string, bigint] ) {
  return {
    asset_id,
    asset_key,
    asset_total,
  }
}
/**
 * Represents a Event result as a struct
 */
export type Event = {
  asset_id: bigint
  key: string
  name: string
  start_date: bigint
  end_date: bigint
  cover_image_ipfs: string
  ticket_price: bigint
  owner: string
}
/**
 * Converts the tuple representation of a Event to the struct representation
 */
export function Event([asset_id, key, name, start_date, end_date, cover_image_ipfs, ticket_price, owner]: [bigint, string, string, bigint, bigint, string, bigint, string] ) {
  return {
    asset_id,
    key,
    name,
    start_date,
    end_date,
    cover_image_ipfs,
    ticket_price,
    owner,
  }
}
/**
 * Represents a EventTicket result as a struct
 */
export type EventTicket = {
  asset_id: bigint
  ticket_key: string
  event_asset_key: string
  purchase_price: bigint
  owner: string
}
/**
 * Converts the tuple representation of a EventTicket to the struct representation
 */
export function EventTicket([asset_id, ticket_key, event_asset_key, purchase_price, owner]: [bigint, string, string, bigint, string] ) {
  return {
    asset_id,
    ticket_key,
    event_asset_key,
    purchase_price,
    owner,
  }
}
/**
 * Maps a method signature from the Aurally smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends AurallySig> = Aurally['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the Aurally smart contract to the method's return type
 */
export type MethodReturn<TSignature extends AurallySig> = Aurally['methods'][TSignature]['returns']

/**
 * A factory for available 'create' calls
 */
export type AurallyCreateCalls = (typeof AurallyCallFactory)['create']
/**
 * Defines supported create methods for this smart contract
 */
export type AurallyCreateCallParams =
  | (TypedCallParams<undefined> & (OnCompleteNoOp))
/**
 * A factory for available 'update' calls
 */
export type AurallyUpdateCalls = (typeof AurallyCallFactory)['update']
/**
 * Defines supported update methods for this smart contract
 */
export type AurallyUpdateCallParams =
  | TypedCallParams<undefined>
/**
 * A factory for available 'delete' calls
 */
export type AurallyDeleteCalls = (typeof AurallyCallFactory)['delete']
/**
 * Defines supported delete methods for this smart contract
 */
export type AurallyDeleteCallParams =
  | TypedCallParams<undefined>
/**
 * Defines arguments required for the deploy method.
 */
export type AurallyDeployArgs = {
  deployTimeParams?: TealTemplateParams
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: AurallyCreateCalls) => AurallyCreateCallParams
  /**
   * A delegate which takes a update call factory and returns the update call params for this smart contract
   */
  updateCall?: (callFactory: AurallyUpdateCalls) => AurallyUpdateCallParams
  /**
   * A delegate which takes a delete call factory and returns the delete call params for this smart contract
   */
  deleteCall?: (callFactory: AurallyDeleteCalls) => AurallyDeleteCallParams
}


/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class AurallyCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the Aurally smart contract using a bare call
       *
       * @param params Any parameters for the call
       * @returns A TypedCallParams object for the call
       */
      bare(params: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return {
          method: undefined,
          methodArgs: undefined,
          ...params,
        }
      },
    }
  }

  /**
   * Gets available update call factories
   */
  static get update() {
    return {
      /**
       * Constructs an update call for the Aurally smart contract using a bare call
       *
       * @param params Any parameters for the call
       * @returns A TypedCallParams object for the call
       */
      bare(params: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams = {}) {
        return {
          method: undefined,
          methodArgs: undefined,
          ...params,
        }
      },
    }
  }

  /**
   * Gets available delete call factories
   */
  static get delete() {
    return {
      /**
       * Constructs a delete call for the Aurally smart contract using a bare call
       *
       * @param params Any parameters for the call
       * @returns A TypedCallParams object for the call
       */
      bare(params: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
        return {
          method: undefined,
          methodArgs: undefined,
          ...params,
        }
      },
    }
  }

  /**
   * Constructs a no op call for the promote_to_admin(pay,account)string ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static promoteToAdmin(args: MethodArgs<'promote_to_admin(pay,account)string'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'promote_to_admin(pay,account)string' as const,
      methodArgs: Array.isArray(args) ? args : [args.txn, args.acc],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the demote_from_admin(pay,account)string ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static demoteFromAdmin(args: MethodArgs<'demote_from_admin(pay,account)string'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'demote_from_admin(pay,account)string' as const,
      methodArgs: Array.isArray(args) ? args : [args.txn, args.acc],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the register_creator(txn,string,string)(bool,bool,uint64,string,string,uint64) ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static registerCreator(args: MethodArgs<'register_creator(txn,string,string)(bool,bool,uint64,string,string,uint64)'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'register_creator(txn,string,string)(bool,bool,uint64,string,string,uint64)' as const,
      methodArgs: Array.isArray(args) ? args : [args.txn, args.fullname, args.username],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the create_sound_nft(txn,string,string,string,string,string,string,string,uint64,string,string,string,uint64,bool,asset,account)(uint64,string,uint64,string,string,string,string,string,uint64,string,string,string,address,bool) ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static createSoundNft(args: MethodArgs<'create_sound_nft(txn,string,string,string,string,string,string,string,uint64,string,string,string,uint64,bool,asset,account)(uint64,string,uint64,string,string,string,string,string,uint64,string,string,string,address,bool)'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'create_sound_nft(txn,string,string,string,string,string,string,string,uint64,string,string,string,uint64,bool,asset,account)(uint64,string,uint64,string,string,string,string,string,uint64,string,string,string,address,bool)' as const,
      methodArgs: Array.isArray(args) ? args : [args.txn, args.nft_name, args.asset_key, args.title, args.label, args.artist, args.release_date, args.genre, args.price, args.cover_image_ipfs, args.audio_sample_ipfs, args.full_track_ipfs, args.supply, args.for_sale, args.aura_asset, args.creator],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the create_art_nft(pay,string,string,string,string,uint64,string,string,uint64,asset,account)(uint64,string,string,string,uint64,string,string,uint64,uint64,address,bool) ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static createArtNft(args: MethodArgs<'create_art_nft(pay,string,string,string,string,uint64,string,string,uint64,asset,account)(uint64,string,string,string,uint64,string,string,uint64,uint64,address,bool)'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'create_art_nft(pay,string,string,string,string,uint64,string,string,uint64,asset,account)(uint64,string,string,string,uint64,string,string,uint64,uint64,address,bool)' as const,
      methodArgs: Array.isArray(args) ? args : [args.txn, args.asset_key, args.nft_name, args.title, args.name, args.supply, args.description, args.ipfs_location, args.price, args.aura_asset, args.creator],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the create_art_auction(pay,string,string,uint64,uint64,uint64)(address,string,string,uint64,uint64,uint64,uint64,address) ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static createArtAuction(args: MethodArgs<'create_art_auction(pay,string,string,uint64,uint64,uint64)(address,string,string,uint64,uint64,uint64,uint64,address)'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'create_art_auction(pay,string,string,uint64,uint64,uint64)(address,string,string,uint64,uint64,uint64,uint64,address)' as const,
      methodArgs: Array.isArray(args) ? args : [args.txn, args.auction_key, args.asset_key, args.min_bid, args.starts_at, args.ends_at],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the bid_on_art_auction(pay,string,uint64)(address,string,string,uint64,uint64,uint64,uint64,address) ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static bidOnArtAuction(args: MethodArgs<'bid_on_art_auction(pay,string,uint64)(address,string,string,uint64,uint64,uint64,uint64,address)'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'bid_on_art_auction(pay,string,uint64)(address,string,string,uint64,uint64,uint64,uint64,address)' as const,
      methodArgs: Array.isArray(args) ? args : [args.txn, args.auction_key, args.bid_ammount],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the complete_art_auction(pay,string)(uint64,string,string,string,uint64,string,string,uint64,uint64,address,bool) ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static completeArtAuction(args: MethodArgs<'complete_art_auction(pay,string)(uint64,string,string,string,uint64,string,string,uint64,uint64,address,bool)'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'complete_art_auction(pay,string)(uint64,string,string,string,uint64,string,string,uint64,uint64,address,bool)' as const,
      methodArgs: Array.isArray(args) ? args : [args.txn, args.auction_key],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the purchase_nft(pay,axfer,string,string,account,asset,asset,axfer,account)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static purchaseNft(args: MethodArgs<'purchase_nft(pay,axfer,string,string,account,asset,asset,axfer,account)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'purchase_nft(pay,axfer,string,string,account,asset,asset,axfer,account)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.txn, args.optin_txn, args.asset_key, args.nft_type, args.seller, args.nft_id, args.aura_id, args.aura_optin_txn, args.buyer],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the transfer_nft(pay,address,string,string)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static transferNft(args: MethodArgs<'transfer_nft(pay,address,string,string)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'transfer_nft(pay,address,string,string)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.txn, args.to, args.asset_key, args.nft_type],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the create_proposal(pay,string,string)(string,uint64,uint64,string) ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static createProposal(args: MethodArgs<'create_proposal(pay,string,string)(string,uint64,uint64,string)'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'create_proposal(pay,string,string)(string,uint64,uint64,string)' as const,
      methodArgs: Array.isArray(args) ? args : [args.txn, args.proposal_key, args.proposal_detail],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the vote_on_proposal(pay,bool,asset,account,string)(string,uint64,uint64,string) ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static voteOnProposal(args: MethodArgs<'vote_on_proposal(pay,bool,asset,account,string)(string,uint64,uint64,string)'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'vote_on_proposal(pay,bool,asset,account,string)(string,uint64,uint64,string)' as const,
      methodArgs: Array.isArray(args) ? args : [args.txn, args.vote_for, args.aura_id, args.voter, args.proposal_key],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the end_proposal_voting(pay,string)(string,uint64,uint64,string) ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static endProposalVoting(args: MethodArgs<'end_proposal_voting(pay,string)(string,uint64,uint64,string)'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'end_proposal_voting(pay,string)(string,uint64,uint64,string)' as const,
      methodArgs: Array.isArray(args) ? args : [args.txn, args.proposal_key],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the unfreeze_auras(pay,asset,account)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static unfreezeAuras(args: MethodArgs<'unfreeze_auras(pay,asset,account)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'unfreeze_auras(pay,asset,account)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.txn, args.aura, args.acc],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the create_aura_tokens()(uint64,string,uint64) ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static createAuraTokens(args: MethodArgs<'create_aura_tokens()(uint64,string,uint64)'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'create_aura_tokens()(uint64,string,uint64)' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the create_event(pay,string,string,uint64,uint64,string,uint64)(uint64,string,string,uint64,uint64,string,uint64,address) ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static createEvent(args: MethodArgs<'create_event(pay,string,string,uint64,uint64,string,uint64)(uint64,string,string,uint64,uint64,string,uint64,address)'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'create_event(pay,string,string,uint64,uint64,string,uint64)(uint64,string,string,uint64,uint64,string,uint64,address)' as const,
      methodArgs: Array.isArray(args) ? args : [args.txn, args.key, args.name, args.start_date, args.end_date, args.cover_image_ipfs, args.ticket_price],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the purchase_event_ticket(pay,string,string,account)(uint64,string,string,uint64,address) ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static purchaseEventTicket(args: MethodArgs<'purchase_event_ticket(pay,string,string,account)(uint64,string,string,uint64,address)'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'purchase_event_ticket(pay,string,string,account)(uint64,string,string,uint64,address)' as const,
      methodArgs: Array.isArray(args) ? args : [args.txn, args.event_key, args.ticket_key, args.event_owner],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the hello(string)string ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static hello(args: MethodArgs<'hello(string)string'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'hello(string)string' as const,
      methodArgs: Array.isArray(args) ? args : [args.name],
      ...params,
    }
  }
}

/**
 * A client to make calls to the Aurally smart contract
 */
export class AurallyClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient

  private readonly sender: SendTransactionFrom | undefined

  /**
   * Creates a new instance of `AurallyClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender
    this.appClient = algokit.getAppClient({
      ...appDetails,
      app: APP_SPEC
    }, algod)
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn>(result: AppCallTransactionResult, returnValueFormatter?: (value: any) => TReturn): AppCallTransactionResultOfType<TReturn> {
    if(result.return?.decodeError) {
      throw result.return.decodeError
    }
    const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
      ? returnValueFormatter(result.return.returnValue)
      : result.return?.returnValue as TReturn | undefined
      return { ...result, return: returnValue }
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof Aurally['methods']>(typedCallParams: TypedCallParams<TSignature>, returnValueFormatter?: (value: any) => MethodReturn<TSignature>) {
    return this.mapReturnValue<MethodReturn<TSignature>>(await this.appClient.call(typedCallParams), returnValueFormatter)
  }

  /**
   * Idempotently deploys the Aurally smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(params: AurallyDeployArgs & AppClientDeployCoreParams = {}): ReturnType<ApplicationClient['deploy']> {
    const createArgs = params.createCall?.(AurallyCallFactory.create)
    const updateArgs = params.updateCall?.(AurallyCallFactory.update)
    const deleteArgs = params.deleteCall?.(AurallyCallFactory.delete)
    return this.appClient.deploy({
      ...params,
      updateArgs,
      deleteArgs,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    })
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this
    return {
      /**
       * Creates a new instance of the Aurally smart contract using a bare call.
       *
       * @param args The arguments for the bare call
       * @returns The create result
       */
      bare(args: BareCallArgs & AppClientCallCoreParams & AppClientCompilationParams & CoreAppCallArgs & (OnCompleteNoOp) = {}): Promise<AppCallTransactionResultOfType<undefined>> {
        return $this.appClient.create(args) as unknown as Promise<AppCallTransactionResultOfType<undefined>>
      },
    }
  }

  /**
   * Gets available update methods
   */
  public get update() {
    const $this = this
    return {
      /**
       * Updates an existing instance of the Aurally smart contract using a bare call.
       *
       * @param args The arguments for the bare call
       * @returns The update result
       */
      bare(args: BareCallArgs & AppClientCallCoreParams & AppClientCompilationParams & CoreAppCallArgs = {}): Promise<AppCallTransactionResultOfType<undefined>> {
        return $this.appClient.update(args) as unknown as Promise<AppCallTransactionResultOfType<undefined>>
      },
    }
  }

  /**
   * Gets available delete methods
   */
  public get delete() {
    const $this = this
    return {
      /**
       * Deletes an existing instance of the Aurally smart contract using a bare call.
       *
       * @param args The arguments for the bare call
       * @returns The delete result
       */
      bare(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}): Promise<AppCallTransactionResultOfType<undefined>> {
        return $this.appClient.delete(args) as unknown as Promise<AppCallTransactionResultOfType<undefined>>
      },
    }
  }

  /**
   * Makes a clear_state call to an existing instance of the Aurally smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args)
  }

  /**
   * Calls the promote_to_admin(pay,account)string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public promoteToAdmin(args: MethodArgs<'promote_to_admin(pay,account)string'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AurallyCallFactory.promoteToAdmin(args, params))
  }

  /**
   * Calls the demote_from_admin(pay,account)string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public demoteFromAdmin(args: MethodArgs<'demote_from_admin(pay,account)string'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AurallyCallFactory.demoteFromAdmin(args, params))
  }

  /**
   * Calls the register_creator(txn,string,string)(bool,bool,uint64,string,string,uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public registerCreator(args: MethodArgs<'register_creator(txn,string,string)(bool,bool,uint64,string,string,uint64)'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AurallyCallFactory.registerCreator(args, params), AurallyCreative)
  }

  /**
   * Calls the create_sound_nft(txn,string,string,string,string,string,string,string,uint64,string,string,string,uint64,bool,asset,account)(uint64,string,uint64,string,string,string,string,string,uint64,string,string,string,address,bool) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public createSoundNft(args: MethodArgs<'create_sound_nft(txn,string,string,string,string,string,string,string,uint64,string,string,string,uint64,bool,asset,account)(uint64,string,uint64,string,string,string,string,string,uint64,string,string,string,address,bool)'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AurallyCallFactory.createSoundNft(args, params), SoundNft)
  }

  /**
   * Calls the create_art_nft(pay,string,string,string,string,uint64,string,string,uint64,asset,account)(uint64,string,string,string,uint64,string,string,uint64,uint64,address,bool) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public createArtNft(args: MethodArgs<'create_art_nft(pay,string,string,string,string,uint64,string,string,uint64,asset,account)(uint64,string,string,string,uint64,string,string,uint64,uint64,address,bool)'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AurallyCallFactory.createArtNft(args, params), ArtNft)
  }

  /**
   * Calls the create_art_auction(pay,string,string,uint64,uint64,uint64)(address,string,string,uint64,uint64,uint64,uint64,address) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public createArtAuction(args: MethodArgs<'create_art_auction(pay,string,string,uint64,uint64,uint64)(address,string,string,uint64,uint64,uint64,uint64,address)'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AurallyCallFactory.createArtAuction(args, params), ArtAuctionItem)
  }

  /**
   * Calls the bid_on_art_auction(pay,string,uint64)(address,string,string,uint64,uint64,uint64,uint64,address) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public bidOnArtAuction(args: MethodArgs<'bid_on_art_auction(pay,string,uint64)(address,string,string,uint64,uint64,uint64,uint64,address)'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AurallyCallFactory.bidOnArtAuction(args, params), ArtAuctionItem)
  }

  /**
   * Calls the complete_art_auction(pay,string)(uint64,string,string,string,uint64,string,string,uint64,uint64,address,bool) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public completeArtAuction(args: MethodArgs<'complete_art_auction(pay,string)(uint64,string,string,string,uint64,string,string,uint64,uint64,address,bool)'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AurallyCallFactory.completeArtAuction(args, params), ArtNft)
  }

  /**
   * Calls the purchase_nft(pay,axfer,string,string,account,asset,asset,axfer,account)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public purchaseNft(args: MethodArgs<'purchase_nft(pay,axfer,string,string,account,asset,asset,axfer,account)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AurallyCallFactory.purchaseNft(args, params))
  }

  /**
   * Calls the transfer_nft(pay,address,string,string)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public transferNft(args: MethodArgs<'transfer_nft(pay,address,string,string)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AurallyCallFactory.transferNft(args, params))
  }

  /**
   * Calls the create_proposal(pay,string,string)(string,uint64,uint64,string) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public createProposal(args: MethodArgs<'create_proposal(pay,string,string)(string,uint64,uint64,string)'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AurallyCallFactory.createProposal(args, params), Proposal)
  }

  /**
   * Calls the vote_on_proposal(pay,bool,asset,account,string)(string,uint64,uint64,string) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public voteOnProposal(args: MethodArgs<'vote_on_proposal(pay,bool,asset,account,string)(string,uint64,uint64,string)'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AurallyCallFactory.voteOnProposal(args, params), Proposal)
  }

  /**
   * Calls the end_proposal_voting(pay,string)(string,uint64,uint64,string) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public endProposalVoting(args: MethodArgs<'end_proposal_voting(pay,string)(string,uint64,uint64,string)'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AurallyCallFactory.endProposalVoting(args, params), Proposal)
  }

  /**
   * Calls the unfreeze_auras(pay,asset,account)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public unfreezeAuras(args: MethodArgs<'unfreeze_auras(pay,asset,account)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AurallyCallFactory.unfreezeAuras(args, params))
  }

  /**
   * Calls the create_aura_tokens()(uint64,string,uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public createAuraTokens(args: MethodArgs<'create_aura_tokens()(uint64,string,uint64)'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AurallyCallFactory.createAuraTokens(args, params), AurallyToken)
  }

  /**
   * Calls the create_event(pay,string,string,uint64,uint64,string,uint64)(uint64,string,string,uint64,uint64,string,uint64,address) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public createEvent(args: MethodArgs<'create_event(pay,string,string,uint64,uint64,string,uint64)(uint64,string,string,uint64,uint64,string,uint64,address)'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AurallyCallFactory.createEvent(args, params), Event)
  }

  /**
   * Calls the purchase_event_ticket(pay,string,string,account)(uint64,string,string,uint64,address) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public purchaseEventTicket(args: MethodArgs<'purchase_event_ticket(pay,string,string,account)(uint64,string,string,uint64,address)'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AurallyCallFactory.purchaseEventTicket(args, params), EventTicket)
  }

  /**
   * Calls the hello(string)string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public hello(args: MethodArgs<'hello(string)string'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AurallyCallFactory.hello(args, params))
  }

  /**
   * Extracts a binary state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns A BinaryState instance containing the state value, or undefined if the key was not found
   */
  private static getBinaryState(state: AppState, key: string): BinaryState | undefined {
    const value = state[key]
    if (!value) return undefined
    if (!('valueRaw' in value))
      throw new Error(`Failed to parse state value for ${key}; received an int when expected a byte array`)
    return {
      asString(): string {
        return value.value
      },
      asByteArray(): Uint8Array {
        return value.valueRaw
      }
    }
  }

  /**
   * Extracts a integer state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns An IntegerState instance containing the state value, or undefined if the key was not found
   */
  private static getIntegerState(state: AppState, key: string): IntegerState | undefined {
    const value = state[key]
    if (!value) return undefined
    if ('valueRaw' in value)
      throw new Error(`Failed to parse state value for ${key}; received a byte array when expected a number`)
    return {
      asBigInt() {
        return typeof value.value === 'bigint' ? value.value : BigInt(value.value)
      },
      asNumber(): number {
        return typeof value.value === 'bigint' ? Number(value.value) : value.value
      },
    }
  }

  /**
   * Returns the smart contract's global state wrapped in a strongly typed accessor with options to format the stored value
   */
  public async getGlobalState(): Promise<Aurally['state']['global']> {
    const state = await this.appClient.getGlobalState()
    return {
      get active_proposal() {
        return AurallyClient.getBinaryState(state, 'active_proposal')
      },
    }
  }

  public compose(): AurallyComposer {
    const client = this
    const atc = new AtomicTransactionComposer()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: any) => any)> = []
    return {
      promoteToAdmin(args: MethodArgs<'promote_to_admin(pay,account)string'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.promoteToAdmin(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      demoteFromAdmin(args: MethodArgs<'demote_from_admin(pay,account)string'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.demoteFromAdmin(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      registerCreator(args: MethodArgs<'register_creator(txn,string,string)(bool,bool,uint64,string,string,uint64)'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.registerCreator(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(AurallyCreative)
        return this
      },
      createSoundNft(args: MethodArgs<'create_sound_nft(txn,string,string,string,string,string,string,string,uint64,string,string,string,uint64,bool,asset,account)(uint64,string,uint64,string,string,string,string,string,uint64,string,string,string,address,bool)'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.createSoundNft(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(SoundNft)
        return this
      },
      createArtNft(args: MethodArgs<'create_art_nft(pay,string,string,string,string,uint64,string,string,uint64,asset,account)(uint64,string,string,string,uint64,string,string,uint64,uint64,address,bool)'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.createArtNft(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(ArtNft)
        return this
      },
      createArtAuction(args: MethodArgs<'create_art_auction(pay,string,string,uint64,uint64,uint64)(address,string,string,uint64,uint64,uint64,uint64,address)'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.createArtAuction(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(ArtAuctionItem)
        return this
      },
      bidOnArtAuction(args: MethodArgs<'bid_on_art_auction(pay,string,uint64)(address,string,string,uint64,uint64,uint64,uint64,address)'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.bidOnArtAuction(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(ArtAuctionItem)
        return this
      },
      completeArtAuction(args: MethodArgs<'complete_art_auction(pay,string)(uint64,string,string,string,uint64,string,string,uint64,uint64,address,bool)'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.completeArtAuction(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(ArtNft)
        return this
      },
      purchaseNft(args: MethodArgs<'purchase_nft(pay,axfer,string,string,account,asset,asset,axfer,account)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.purchaseNft(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      transferNft(args: MethodArgs<'transfer_nft(pay,address,string,string)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.transferNft(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      createProposal(args: MethodArgs<'create_proposal(pay,string,string)(string,uint64,uint64,string)'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.createProposal(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(Proposal)
        return this
      },
      voteOnProposal(args: MethodArgs<'vote_on_proposal(pay,bool,asset,account,string)(string,uint64,uint64,string)'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.voteOnProposal(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(Proposal)
        return this
      },
      endProposalVoting(args: MethodArgs<'end_proposal_voting(pay,string)(string,uint64,uint64,string)'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.endProposalVoting(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(Proposal)
        return this
      },
      unfreezeAuras(args: MethodArgs<'unfreeze_auras(pay,asset,account)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.unfreezeAuras(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      createAuraTokens(args: MethodArgs<'create_aura_tokens()(uint64,string,uint64)'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.createAuraTokens(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(AurallyToken)
        return this
      },
      createEvent(args: MethodArgs<'create_event(pay,string,string,uint64,uint64,string,uint64)(uint64,string,string,uint64,uint64,string,uint64,address)'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.createEvent(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(Event)
        return this
      },
      purchaseEventTicket(args: MethodArgs<'purchase_event_ticket(pay,string,string,account)(uint64,string,string,uint64,address)'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.purchaseEventTicket(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(EventTicket)
        return this
      },
      hello(args: MethodArgs<'hello(string)string'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.hello(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      get update() {
        const $this = this
        return {
          bare(args?: BareCallArgs & AppClientCallCoreParams & AppClientCompilationParams & CoreAppCallArgs) {
            promiseChain = promiseChain.then(() => client.update.bare({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
            resultMappers.push(undefined)
            return $this
          },
        }
      },
      get delete() {
        const $this = this
        return {
          bare(args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs) {
            promiseChain = promiseChain.then(() => client.delete.bare({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
            resultMappers.push(undefined)
            return $this
          },
        }
      },
      clearState(args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearState({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom) {
        promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)))
        return this
      },
      async atc() {
        await promiseChain
        return atc
      },
      async execute() {
        await promiseChain
        const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams: {} }, client.algod)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      }
    } as unknown as AurallyComposer
  }
}
export type AurallyComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the promote_to_admin(pay,account)string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  promoteToAdmin(args: MethodArgs<'promote_to_admin(pay,account)string'>, params?: AppClientCallCoreParams & CoreAppCallArgs): AurallyComposer<[...TReturns, MethodReturn<'promote_to_admin(pay,account)string'>]>

  /**
   * Calls the demote_from_admin(pay,account)string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  demoteFromAdmin(args: MethodArgs<'demote_from_admin(pay,account)string'>, params?: AppClientCallCoreParams & CoreAppCallArgs): AurallyComposer<[...TReturns, MethodReturn<'demote_from_admin(pay,account)string'>]>

  /**
   * Calls the register_creator(txn,string,string)(bool,bool,uint64,string,string,uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  registerCreator(args: MethodArgs<'register_creator(txn,string,string)(bool,bool,uint64,string,string,uint64)'>, params?: AppClientCallCoreParams & CoreAppCallArgs): AurallyComposer<[...TReturns, MethodReturn<'register_creator(txn,string,string)(bool,bool,uint64,string,string,uint64)'>]>

  /**
   * Calls the create_sound_nft(txn,string,string,string,string,string,string,string,uint64,string,string,string,uint64,bool,asset,account)(uint64,string,uint64,string,string,string,string,string,uint64,string,string,string,address,bool) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createSoundNft(args: MethodArgs<'create_sound_nft(txn,string,string,string,string,string,string,string,uint64,string,string,string,uint64,bool,asset,account)(uint64,string,uint64,string,string,string,string,string,uint64,string,string,string,address,bool)'>, params?: AppClientCallCoreParams & CoreAppCallArgs): AurallyComposer<[...TReturns, MethodReturn<'create_sound_nft(txn,string,string,string,string,string,string,string,uint64,string,string,string,uint64,bool,asset,account)(uint64,string,uint64,string,string,string,string,string,uint64,string,string,string,address,bool)'>]>

  /**
   * Calls the create_art_nft(pay,string,string,string,string,uint64,string,string,uint64,asset,account)(uint64,string,string,string,uint64,string,string,uint64,uint64,address,bool) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createArtNft(args: MethodArgs<'create_art_nft(pay,string,string,string,string,uint64,string,string,uint64,asset,account)(uint64,string,string,string,uint64,string,string,uint64,uint64,address,bool)'>, params?: AppClientCallCoreParams & CoreAppCallArgs): AurallyComposer<[...TReturns, MethodReturn<'create_art_nft(pay,string,string,string,string,uint64,string,string,uint64,asset,account)(uint64,string,string,string,uint64,string,string,uint64,uint64,address,bool)'>]>

  /**
   * Calls the create_art_auction(pay,string,string,uint64,uint64,uint64)(address,string,string,uint64,uint64,uint64,uint64,address) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createArtAuction(args: MethodArgs<'create_art_auction(pay,string,string,uint64,uint64,uint64)(address,string,string,uint64,uint64,uint64,uint64,address)'>, params?: AppClientCallCoreParams & CoreAppCallArgs): AurallyComposer<[...TReturns, MethodReturn<'create_art_auction(pay,string,string,uint64,uint64,uint64)(address,string,string,uint64,uint64,uint64,uint64,address)'>]>

  /**
   * Calls the bid_on_art_auction(pay,string,uint64)(address,string,string,uint64,uint64,uint64,uint64,address) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  bidOnArtAuction(args: MethodArgs<'bid_on_art_auction(pay,string,uint64)(address,string,string,uint64,uint64,uint64,uint64,address)'>, params?: AppClientCallCoreParams & CoreAppCallArgs): AurallyComposer<[...TReturns, MethodReturn<'bid_on_art_auction(pay,string,uint64)(address,string,string,uint64,uint64,uint64,uint64,address)'>]>

  /**
   * Calls the complete_art_auction(pay,string)(uint64,string,string,string,uint64,string,string,uint64,uint64,address,bool) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  completeArtAuction(args: MethodArgs<'complete_art_auction(pay,string)(uint64,string,string,string,uint64,string,string,uint64,uint64,address,bool)'>, params?: AppClientCallCoreParams & CoreAppCallArgs): AurallyComposer<[...TReturns, MethodReturn<'complete_art_auction(pay,string)(uint64,string,string,string,uint64,string,string,uint64,uint64,address,bool)'>]>

  /**
   * Calls the purchase_nft(pay,axfer,string,string,account,asset,asset,axfer,account)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  purchaseNft(args: MethodArgs<'purchase_nft(pay,axfer,string,string,account,asset,asset,axfer,account)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): AurallyComposer<[...TReturns, MethodReturn<'purchase_nft(pay,axfer,string,string,account,asset,asset,axfer,account)void'>]>

  /**
   * Calls the transfer_nft(pay,address,string,string)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  transferNft(args: MethodArgs<'transfer_nft(pay,address,string,string)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): AurallyComposer<[...TReturns, MethodReturn<'transfer_nft(pay,address,string,string)void'>]>

  /**
   * Calls the create_proposal(pay,string,string)(string,uint64,uint64,string) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createProposal(args: MethodArgs<'create_proposal(pay,string,string)(string,uint64,uint64,string)'>, params?: AppClientCallCoreParams & CoreAppCallArgs): AurallyComposer<[...TReturns, MethodReturn<'create_proposal(pay,string,string)(string,uint64,uint64,string)'>]>

  /**
   * Calls the vote_on_proposal(pay,bool,asset,account,string)(string,uint64,uint64,string) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  voteOnProposal(args: MethodArgs<'vote_on_proposal(pay,bool,asset,account,string)(string,uint64,uint64,string)'>, params?: AppClientCallCoreParams & CoreAppCallArgs): AurallyComposer<[...TReturns, MethodReturn<'vote_on_proposal(pay,bool,asset,account,string)(string,uint64,uint64,string)'>]>

  /**
   * Calls the end_proposal_voting(pay,string)(string,uint64,uint64,string) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  endProposalVoting(args: MethodArgs<'end_proposal_voting(pay,string)(string,uint64,uint64,string)'>, params?: AppClientCallCoreParams & CoreAppCallArgs): AurallyComposer<[...TReturns, MethodReturn<'end_proposal_voting(pay,string)(string,uint64,uint64,string)'>]>

  /**
   * Calls the unfreeze_auras(pay,asset,account)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  unfreezeAuras(args: MethodArgs<'unfreeze_auras(pay,asset,account)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): AurallyComposer<[...TReturns, MethodReturn<'unfreeze_auras(pay,asset,account)void'>]>

  /**
   * Calls the create_aura_tokens()(uint64,string,uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createAuraTokens(args: MethodArgs<'create_aura_tokens()(uint64,string,uint64)'>, params?: AppClientCallCoreParams & CoreAppCallArgs): AurallyComposer<[...TReturns, MethodReturn<'create_aura_tokens()(uint64,string,uint64)'>]>

  /**
   * Calls the create_event(pay,string,string,uint64,uint64,string,uint64)(uint64,string,string,uint64,uint64,string,uint64,address) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createEvent(args: MethodArgs<'create_event(pay,string,string,uint64,uint64,string,uint64)(uint64,string,string,uint64,uint64,string,uint64,address)'>, params?: AppClientCallCoreParams & CoreAppCallArgs): AurallyComposer<[...TReturns, MethodReturn<'create_event(pay,string,string,uint64,uint64,string,uint64)(uint64,string,string,uint64,uint64,string,uint64,address)'>]>

  /**
   * Calls the purchase_event_ticket(pay,string,string,account)(uint64,string,string,uint64,address) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  purchaseEventTicket(args: MethodArgs<'purchase_event_ticket(pay,string,string,account)(uint64,string,string,uint64,address)'>, params?: AppClientCallCoreParams & CoreAppCallArgs): AurallyComposer<[...TReturns, MethodReturn<'purchase_event_ticket(pay,string,string,account)(uint64,string,string,uint64,address)'>]>

  /**
   * Calls the hello(string)string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  hello(args: MethodArgs<'hello(string)string'>, params?: AppClientCallCoreParams & CoreAppCallArgs): AurallyComposer<[...TReturns, MethodReturn<'hello(string)string'>]>

  /**
   * Gets available update methods
   */
  readonly update: {
    /**
     * Updates an existing instance of the Aurally smart contract using a bare call.
     *
     * @param args The arguments for the bare call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    bare(args?: BareCallArgs & AppClientCallCoreParams & AppClientCompilationParams & CoreAppCallArgs): AurallyComposer<[...TReturns, undefined]>
  }

  /**
   * Gets available delete methods
   */
  readonly delete: {
    /**
     * Deletes an existing instance of the Aurally smart contract using a bare call.
     *
     * @param args The arguments for the bare call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    bare(args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs): AurallyComposer<[...TReturns, undefined]>
  }

  /**
   * Makes a clear_state call to an existing instance of the Aurally smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs): AurallyComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom): AurallyComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>
  /**
   * Executes the transaction group and returns an array of results
   */
  execute(): Promise<AurallyComposerResults<TReturns>>
}
export type AurallyComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns
  groupId: string
  txIds: string[]
  transactions: Transaction[]
}
