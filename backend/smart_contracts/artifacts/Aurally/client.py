# flake8: noqa
# fmt: off
# mypy: disable-error-code="no-any-return, no-untyped-call"
# This file was automatically generated by algokit-client-generator.
# DO NOT MODIFY IT BY HAND.
# requires: algokit-utils@^1.2.0
import base64
import dataclasses
import decimal
import typing
from abc import ABC, abstractmethod

import algokit_utils
import algosdk
from algosdk.atomic_transaction_composer import (
    AtomicTransactionComposer,
    AtomicTransactionResponse,
    TransactionSigner,
    TransactionWithSigner
)

_APP_SPEC_JSON = r"""{
    "hints": {
        "register_creator(string,string)(bool,bool,uint64,string,string,uint64)": {
            "structs": {
                "output": {
                    "name": "AurallyCreative",
                    "elements": [
                        [
                            "is_music_creative",
                            "bool"
                        ],
                        [
                            "is_art_creative",
                            "bool"
                        ],
                        [
                            "minted",
                            "uint64"
                        ],
                        [
                            "fullname",
                            "string"
                        ],
                        [
                            "username",
                            "string"
                        ],
                        [
                            "d_nft_id",
                            "uint64"
                        ]
                    ]
                }
            },
            "call_config": {
                "no_op": "CALL"
            }
        },
        "create_sound_nft(acfg,string,string,string,string,string,string,uint64,string,string,string,uint64,bool)(uint64,uint64,string,string,string,string,string,uint64,string,string,string,address,bool)": {
            "structs": {
                "output": {
                    "name": "SoundNFT",
                    "elements": [
                        [
                            "asset_id",
                            "uint64"
                        ],
                        [
                            "supply",
                            "uint64"
                        ],
                        [
                            "title",
                            "string"
                        ],
                        [
                            "label",
                            "string"
                        ],
                        [
                            "artist",
                            "string"
                        ],
                        [
                            "release_date",
                            "string"
                        ],
                        [
                            "genre",
                            "string"
                        ],
                        [
                            "price",
                            "uint64"
                        ],
                        [
                            "cover_image_ipfs",
                            "string"
                        ],
                        [
                            "audio_sample_ipfs",
                            "string"
                        ],
                        [
                            "full_track_ipfs",
                            "string"
                        ],
                        [
                            "owner",
                            "address"
                        ],
                        [
                            "for_sale",
                            "bool"
                        ]
                    ]
                }
            },
            "call_config": {
                "no_op": "CALL"
            }
        },
        "create_art_nft(acfg,string,string,uint64,string,string,uint64,bool)(uint64,string,string,uint64,string,string,uint64,uint64,address,bool)": {
            "structs": {
                "output": {
                    "name": "ArtNFT",
                    "elements": [
                        [
                            "asset_id",
                            "uint64"
                        ],
                        [
                            "title",
                            "string"
                        ],
                        [
                            "name",
                            "string"
                        ],
                        [
                            "supply",
                            "uint64"
                        ],
                        [
                            "description",
                            "string"
                        ],
                        [
                            "ipfs_location",
                            "string"
                        ],
                        [
                            "price",
                            "uint64"
                        ],
                        [
                            "sold_price",
                            "uint64"
                        ],
                        [
                            "owner",
                            "address"
                        ],
                        [
                            "for_sale",
                            "bool"
                        ]
                    ]
                }
            },
            "call_config": {
                "no_op": "CALL"
            }
        },
        "create_art_auction(txn,string,string,uint64,uint64,uint64)(address,string,string,uint64,uint64,uint64,uint64,address)": {
            "structs": {
                "output": {
                    "name": "ArtAuctionItem",
                    "elements": [
                        [
                            "auctioneer",
                            "address"
                        ],
                        [
                            "item_id",
                            "string"
                        ],
                        [
                            "item_name",
                            "string"
                        ],
                        [
                            "min_bid",
                            "uint64"
                        ],
                        [
                            "starts_at",
                            "uint64"
                        ],
                        [
                            "ends_at",
                            "uint64"
                        ],
                        [
                            "highest_bid",
                            "uint64"
                        ],
                        [
                            "highest_bidder",
                            "address"
                        ]
                    ]
                }
            },
            "call_config": {
                "no_op": "CALL"
            }
        },
        "bid_on_art_auction(txn,string,uint64)(address,string,string,uint64,uint64,uint64,uint64,address)": {
            "structs": {
                "output": {
                    "name": "ArtAuctionItem",
                    "elements": [
                        [
                            "auctioneer",
                            "address"
                        ],
                        [
                            "item_id",
                            "string"
                        ],
                        [
                            "item_name",
                            "string"
                        ],
                        [
                            "min_bid",
                            "uint64"
                        ],
                        [
                            "starts_at",
                            "uint64"
                        ],
                        [
                            "ends_at",
                            "uint64"
                        ],
                        [
                            "highest_bid",
                            "uint64"
                        ],
                        [
                            "highest_bidder",
                            "address"
                        ]
                    ]
                }
            },
            "call_config": {
                "no_op": "CALL"
            }
        },
        "complete_art_auction(txn,string)(uint64,string,string,uint64,string,string,uint64,uint64,address,bool)": {
            "structs": {
                "output": {
                    "name": "ArtNFT",
                    "elements": [
                        [
                            "asset_id",
                            "uint64"
                        ],
                        [
                            "title",
                            "string"
                        ],
                        [
                            "name",
                            "string"
                        ],
                        [
                            "supply",
                            "uint64"
                        ],
                        [
                            "description",
                            "string"
                        ],
                        [
                            "ipfs_location",
                            "string"
                        ],
                        [
                            "price",
                            "uint64"
                        ],
                        [
                            "sold_price",
                            "uint64"
                        ],
                        [
                            "owner",
                            "address"
                        ],
                        [
                            "for_sale",
                            "bool"
                        ]
                    ]
                }
            },
            "call_config": {
                "no_op": "CALL"
            }
        },
        "purchase_nft(pay,string,string)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "transfer_nft(pay,address,string,string)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "create_proposal(txn,string,string,uint64)(string,uint64,uint64,string)": {
            "structs": {
                "output": {
                    "name": "Proposal",
                    "elements": [
                        [
                            "proposal_id",
                            "string"
                        ],
                        [
                            "yes_votes",
                            "uint64"
                        ],
                        [
                            "no_votes",
                            "uint64"
                        ],
                        [
                            "details",
                            "string"
                        ]
                    ]
                }
            },
            "call_config": {
                "no_op": "CALL"
            }
        },
        "vote_on_proposal(pay,bool,string)(string,uint64,uint64,string)": {
            "structs": {
                "output": {
                    "name": "Proposal",
                    "elements": [
                        [
                            "proposal_id",
                            "string"
                        ],
                        [
                            "yes_votes",
                            "uint64"
                        ],
                        [
                            "no_votes",
                            "uint64"
                        ],
                        [
                            "details",
                            "string"
                        ]
                    ]
                }
            },
            "call_config": {
                "no_op": "CALL"
            }
        },
        "hello(string)string": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDgKcHVzaGludCAwIC8vIDAKcmV0dXJu"
    },
    "state": {
        "global": {
            "num_byte_slices": 0,
            "num_uints": 0
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {},
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "Aurally",
        "methods": [
            {
                "name": "register_creator",
                "args": [
                    {
                        "type": "string",
                        "name": "fullname"
                    },
                    {
                        "type": "string",
                        "name": "username"
                    }
                ],
                "returns": {
                    "type": "(bool,bool,uint64,string,string,uint64)"
                }
            },
            {
                "name": "create_sound_nft",
                "args": [
                    {
                        "type": "acfg",
                        "name": "txn"
                    },
                    {
                        "type": "string",
                        "name": "asset_key"
                    },
                    {
                        "type": "string",
                        "name": "title"
                    },
                    {
                        "type": "string",
                        "name": "label"
                    },
                    {
                        "type": "string",
                        "name": "artist"
                    },
                    {
                        "type": "string",
                        "name": "release_date"
                    },
                    {
                        "type": "string",
                        "name": "genre"
                    },
                    {
                        "type": "uint64",
                        "name": "price"
                    },
                    {
                        "type": "string",
                        "name": "cover_image_ipfs"
                    },
                    {
                        "type": "string",
                        "name": "audio_sample_ipfs"
                    },
                    {
                        "type": "string",
                        "name": "full_track_ipfs"
                    },
                    {
                        "type": "uint64",
                        "name": "supply"
                    },
                    {
                        "type": "bool",
                        "name": "for_sale"
                    }
                ],
                "returns": {
                    "type": "(uint64,uint64,string,string,string,string,string,uint64,string,string,string,address,bool)"
                }
            },
            {
                "name": "create_art_nft",
                "args": [
                    {
                        "type": "acfg",
                        "name": "txn"
                    },
                    {
                        "type": "string",
                        "name": "title"
                    },
                    {
                        "type": "string",
                        "name": "name"
                    },
                    {
                        "type": "uint64",
                        "name": "supply"
                    },
                    {
                        "type": "string",
                        "name": "description"
                    },
                    {
                        "type": "string",
                        "name": "ipfs_location"
                    },
                    {
                        "type": "uint64",
                        "name": "price"
                    },
                    {
                        "type": "bool",
                        "name": "for_sale"
                    }
                ],
                "returns": {
                    "type": "(uint64,string,string,uint64,string,string,uint64,uint64,address,bool)"
                }
            },
            {
                "name": "create_art_auction",
                "args": [
                    {
                        "type": "txn",
                        "name": "txn"
                    },
                    {
                        "type": "string",
                        "name": "auction_key"
                    },
                    {
                        "type": "string",
                        "name": "ipfs_location"
                    },
                    {
                        "type": "uint64",
                        "name": "min_bid"
                    },
                    {
                        "type": "uint64",
                        "name": "starts_at"
                    },
                    {
                        "type": "uint64",
                        "name": "ends_at"
                    }
                ],
                "returns": {
                    "type": "(address,string,string,uint64,uint64,uint64,uint64,address)"
                }
            },
            {
                "name": "bid_on_art_auction",
                "args": [
                    {
                        "type": "txn",
                        "name": "txn"
                    },
                    {
                        "type": "string",
                        "name": "auction_key"
                    },
                    {
                        "type": "uint64",
                        "name": "bid_ammount"
                    }
                ],
                "returns": {
                    "type": "(address,string,string,uint64,uint64,uint64,uint64,address)"
                }
            },
            {
                "name": "complete_art_auction",
                "args": [
                    {
                        "type": "txn",
                        "name": "txn"
                    },
                    {
                        "type": "string",
                        "name": "auction_key"
                    }
                ],
                "returns": {
                    "type": "(uint64,string,string,uint64,string,string,uint64,uint64,address,bool)"
                }
            },
            {
                "name": "purchase_nft",
                "args": [
                    {
                        "type": "pay",
                        "name": "txn"
                    },
                    {
                        "type": "string",
                        "name": "asset_key"
                    },
                    {
                        "type": "string",
                        "name": "nft_type"
                    }
                ],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "transfer_nft",
                "args": [
                    {
                        "type": "pay",
                        "name": "txn"
                    },
                    {
                        "type": "address",
                        "name": "to"
                    },
                    {
                        "type": "string",
                        "name": "asset_key"
                    },
                    {
                        "type": "string",
                        "name": "nft_type"
                    }
                ],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "create_proposal",
                "args": [
                    {
                        "type": "txn",
                        "name": "txn"
                    },
                    {
                        "type": "string",
                        "name": "proposal_key"
                    },
                    {
                        "type": "string",
                        "name": "proposal_detail"
                    },
                    {
                        "type": "uint64",
                        "name": "max_votes"
                    }
                ],
                "returns": {
                    "type": "(string,uint64,uint64,string)"
                }
            },
            {
                "name": "vote_on_proposal",
                "args": [
                    {
                        "type": "pay",
                        "name": "txn"
                    },
                    {
                        "type": "bool",
                        "name": "vote_for"
                    },
                    {
                        "type": "string",
                        "name": "proposal_key"
                    }
                ],
                "returns": {
                    "type": "(string,uint64,uint64,string)"
                }
            },
            {
                "name": "hello",
                "args": [
                    {
                        "type": "string",
                        "name": "name"
                    }
                ],
                "returns": {
                    "type": "string"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "no_op": "CREATE"
    }
}"""
APP_SPEC = algokit_utils.ApplicationSpecification.from_json(_APP_SPEC_JSON)
_TReturn = typing.TypeVar("_TReturn")


class _ArgsBase(ABC, typing.Generic[_TReturn]):
    @staticmethod
    @abstractmethod
    def method() -> str:
        ...


_TArgs = typing.TypeVar("_TArgs", bound=_ArgsBase[typing.Any])


@dataclasses.dataclass(kw_only=True)
class _TArgsHolder(typing.Generic[_TArgs]):
    args: _TArgs


def _filter_none(value: dict | typing.Any) -> dict | typing.Any:
    if isinstance(value, dict):
        return {k: _filter_none(v) for k, v in value.items() if v is not None}
    return value


def _as_dict(data: typing.Any, *, convert_all: bool = True) -> dict[str, typing.Any]:
    if data is None:
        return {}
    if not dataclasses.is_dataclass(data):
        raise TypeError(f"{data} must be a dataclass")
    if convert_all:
        result = dataclasses.asdict(data)
    else:
        result = {f.name: getattr(data, f.name) for f in dataclasses.fields(data)}
    return _filter_none(result)


def _convert_transaction_parameters(
    transaction_parameters: algokit_utils.TransactionParameters | None,
) -> algokit_utils.TransactionParametersDict:
    return typing.cast(algokit_utils.TransactionParametersDict, _as_dict(transaction_parameters))


def _convert_call_transaction_parameters(
    transaction_parameters: algokit_utils.TransactionParameters | None,
) -> algokit_utils.OnCompleteCallParametersDict:
    return typing.cast(algokit_utils.OnCompleteCallParametersDict, _as_dict(transaction_parameters))


def _convert_create_transaction_parameters(
    transaction_parameters: algokit_utils.TransactionParameters | None,
    on_complete: algokit_utils.OnCompleteActionName,
) -> algokit_utils.CreateCallParametersDict:
    result = typing.cast(algokit_utils.CreateCallParametersDict, _as_dict(transaction_parameters))
    on_complete_enum = on_complete.replace("_", " ").title().replace(" ", "") + "OC"
    result["on_complete"] = getattr(algosdk.transaction.OnComplete, on_complete_enum)
    return result


def _convert_deploy_args(
    deploy_args: algokit_utils.DeployCallArgs | None,
) -> algokit_utils.ABICreateCallArgsDict | None:
    if deploy_args is None:
        return None

    deploy_args_dict = typing.cast(algokit_utils.ABICreateCallArgsDict, _as_dict(deploy_args))
    if isinstance(deploy_args, _TArgsHolder):
        deploy_args_dict["args"] = _as_dict(deploy_args.args)
        deploy_args_dict["method"] = deploy_args.args.method()

    return deploy_args_dict


@dataclasses.dataclass(kw_only=True)
class AurallyCreative:
    is_music_creative: bool
    is_art_creative: bool
    minted: int
    fullname: str
    username: str
    d_nft_id: int


@dataclasses.dataclass(kw_only=True)
class RegisterCreatorArgs(_ArgsBase[AurallyCreative]):
    fullname: str
    username: str

    @staticmethod
    def method() -> str:
        return "register_creator(string,string)(bool,bool,uint64,string,string,uint64)"


@dataclasses.dataclass(kw_only=True)
class SoundNft:
    asset_id: int
    supply: int
    title: str
    label: str
    artist: str
    release_date: str
    genre: str
    price: int
    cover_image_ipfs: str
    audio_sample_ipfs: str
    full_track_ipfs: str
    owner: str
    for_sale: bool


@dataclasses.dataclass(kw_only=True)
class CreateSoundNftArgs(_ArgsBase[SoundNft]):
    txn: TransactionWithSigner
    asset_key: str
    title: str
    label: str
    artist: str
    release_date: str
    genre: str
    price: int
    cover_image_ipfs: str
    audio_sample_ipfs: str
    full_track_ipfs: str
    supply: int
    for_sale: bool

    @staticmethod
    def method() -> str:
        return "create_sound_nft(acfg,string,string,string,string,string,string,uint64,string,string,string,uint64,bool)(uint64,uint64,string,string,string,string,string,uint64,string,string,string,address,bool)"


@dataclasses.dataclass(kw_only=True)
class ArtNft:
    asset_id: int
    title: str
    name: str
    supply: int
    description: str
    ipfs_location: str
    price: int
    sold_price: int
    owner: str
    for_sale: bool


@dataclasses.dataclass(kw_only=True)
class CreateArtNftArgs(_ArgsBase[ArtNft]):
    txn: TransactionWithSigner
    title: str
    name: str
    supply: int
    description: str
    ipfs_location: str
    price: int
    for_sale: bool

    @staticmethod
    def method() -> str:
        return "create_art_nft(acfg,string,string,uint64,string,string,uint64,bool)(uint64,string,string,uint64,string,string,uint64,uint64,address,bool)"


@dataclasses.dataclass(kw_only=True)
class ArtAuctionItem:
    auctioneer: str
    item_id: str
    item_name: str
    min_bid: int
    starts_at: int
    ends_at: int
    highest_bid: int
    highest_bidder: str


@dataclasses.dataclass(kw_only=True)
class CreateArtAuctionArgs(_ArgsBase[ArtAuctionItem]):
    txn: TransactionWithSigner
    auction_key: str
    ipfs_location: str
    min_bid: int
    starts_at: int
    ends_at: int

    @staticmethod
    def method() -> str:
        return "create_art_auction(txn,string,string,uint64,uint64,uint64)(address,string,string,uint64,uint64,uint64,uint64,address)"


@dataclasses.dataclass(kw_only=True)
class BidOnArtAuctionArgs(_ArgsBase[ArtAuctionItem]):
    txn: TransactionWithSigner
    auction_key: str
    bid_ammount: int

    @staticmethod
    def method() -> str:
        return "bid_on_art_auction(txn,string,uint64)(address,string,string,uint64,uint64,uint64,uint64,address)"


@dataclasses.dataclass(kw_only=True)
class CompleteArtAuctionArgs(_ArgsBase[ArtNft]):
    txn: TransactionWithSigner
    auction_key: str

    @staticmethod
    def method() -> str:
        return "complete_art_auction(txn,string)(uint64,string,string,uint64,string,string,uint64,uint64,address,bool)"


@dataclasses.dataclass(kw_only=True)
class PurchaseNftArgs(_ArgsBase[None]):
    txn: TransactionWithSigner
    asset_key: str
    nft_type: str

    @staticmethod
    def method() -> str:
        return "purchase_nft(pay,string,string)void"


@dataclasses.dataclass(kw_only=True)
class TransferNftArgs(_ArgsBase[None]):
    txn: TransactionWithSigner
    to: str
    asset_key: str
    nft_type: str

    @staticmethod
    def method() -> str:
        return "transfer_nft(pay,address,string,string)void"


@dataclasses.dataclass(kw_only=True)
class Proposal:
    proposal_id: str
    yes_votes: int
    no_votes: int
    details: str


@dataclasses.dataclass(kw_only=True)
class CreateProposalArgs(_ArgsBase[Proposal]):
    txn: TransactionWithSigner
    proposal_key: str
    proposal_detail: str
    max_votes: int

    @staticmethod
    def method() -> str:
        return "create_proposal(txn,string,string,uint64)(string,uint64,uint64,string)"


@dataclasses.dataclass(kw_only=True)
class VoteOnProposalArgs(_ArgsBase[Proposal]):
    txn: TransactionWithSigner
    vote_for: bool
    proposal_key: str

    @staticmethod
    def method() -> str:
        return "vote_on_proposal(pay,bool,string)(string,uint64,uint64,string)"


@dataclasses.dataclass(kw_only=True)
class HelloArgs(_ArgsBase[str]):
    name: str

    @staticmethod
    def method() -> str:
        return "hello(string)string"


class Composer:

    def __init__(self, app_client: algokit_utils.ApplicationClient, atc: AtomicTransactionComposer):
        self.app_client = app_client
        self.atc = atc

    def build(self) -> AtomicTransactionComposer:
        return self.atc

    def execute(self) -> AtomicTransactionResponse:
        return self.app_client.execute_atc(self.atc)

    def register_creator(
        self,
        *,
        fullname: str,
        username: str,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `register_creator(string,string)(bool,bool,uint64,string,string,uint64)` ABI method
        
        :param str fullname: The `fullname` ABI parameter
        :param str username: The `username` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = RegisterCreatorArgs(
            fullname=fullname,
            username=username,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def create_sound_nft(
        self,
        *,
        txn: TransactionWithSigner,
        asset_key: str,
        title: str,
        label: str,
        artist: str,
        release_date: str,
        genre: str,
        price: int,
        cover_image_ipfs: str,
        audio_sample_ipfs: str,
        full_track_ipfs: str,
        supply: int,
        for_sale: bool,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `create_sound_nft(acfg,string,string,string,string,string,string,uint64,string,string,string,uint64,bool)(uint64,uint64,string,string,string,string,string,uint64,string,string,string,address,bool)` ABI method
        
        :param TransactionWithSigner txn: The `txn` ABI parameter
        :param str asset_key: The `asset_key` ABI parameter
        :param str title: The `title` ABI parameter
        :param str label: The `label` ABI parameter
        :param str artist: The `artist` ABI parameter
        :param str release_date: The `release_date` ABI parameter
        :param str genre: The `genre` ABI parameter
        :param int price: The `price` ABI parameter
        :param str cover_image_ipfs: The `cover_image_ipfs` ABI parameter
        :param str audio_sample_ipfs: The `audio_sample_ipfs` ABI parameter
        :param str full_track_ipfs: The `full_track_ipfs` ABI parameter
        :param int supply: The `supply` ABI parameter
        :param bool for_sale: The `for_sale` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = CreateSoundNftArgs(
            txn=txn,
            asset_key=asset_key,
            title=title,
            label=label,
            artist=artist,
            release_date=release_date,
            genre=genre,
            price=price,
            cover_image_ipfs=cover_image_ipfs,
            audio_sample_ipfs=audio_sample_ipfs,
            full_track_ipfs=full_track_ipfs,
            supply=supply,
            for_sale=for_sale,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def create_art_nft(
        self,
        *,
        txn: TransactionWithSigner,
        title: str,
        name: str,
        supply: int,
        description: str,
        ipfs_location: str,
        price: int,
        for_sale: bool,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `create_art_nft(acfg,string,string,uint64,string,string,uint64,bool)(uint64,string,string,uint64,string,string,uint64,uint64,address,bool)` ABI method
        
        :param TransactionWithSigner txn: The `txn` ABI parameter
        :param str title: The `title` ABI parameter
        :param str name: The `name` ABI parameter
        :param int supply: The `supply` ABI parameter
        :param str description: The `description` ABI parameter
        :param str ipfs_location: The `ipfs_location` ABI parameter
        :param int price: The `price` ABI parameter
        :param bool for_sale: The `for_sale` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = CreateArtNftArgs(
            txn=txn,
            title=title,
            name=name,
            supply=supply,
            description=description,
            ipfs_location=ipfs_location,
            price=price,
            for_sale=for_sale,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def create_art_auction(
        self,
        *,
        txn: TransactionWithSigner,
        auction_key: str,
        ipfs_location: str,
        min_bid: int,
        starts_at: int,
        ends_at: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `create_art_auction(txn,string,string,uint64,uint64,uint64)(address,string,string,uint64,uint64,uint64,uint64,address)` ABI method
        
        :param TransactionWithSigner txn: The `txn` ABI parameter
        :param str auction_key: The `auction_key` ABI parameter
        :param str ipfs_location: The `ipfs_location` ABI parameter
        :param int min_bid: The `min_bid` ABI parameter
        :param int starts_at: The `starts_at` ABI parameter
        :param int ends_at: The `ends_at` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = CreateArtAuctionArgs(
            txn=txn,
            auction_key=auction_key,
            ipfs_location=ipfs_location,
            min_bid=min_bid,
            starts_at=starts_at,
            ends_at=ends_at,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def bid_on_art_auction(
        self,
        *,
        txn: TransactionWithSigner,
        auction_key: str,
        bid_ammount: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `bid_on_art_auction(txn,string,uint64)(address,string,string,uint64,uint64,uint64,uint64,address)` ABI method
        
        :param TransactionWithSigner txn: The `txn` ABI parameter
        :param str auction_key: The `auction_key` ABI parameter
        :param int bid_ammount: The `bid_ammount` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = BidOnArtAuctionArgs(
            txn=txn,
            auction_key=auction_key,
            bid_ammount=bid_ammount,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def complete_art_auction(
        self,
        *,
        txn: TransactionWithSigner,
        auction_key: str,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `complete_art_auction(txn,string)(uint64,string,string,uint64,string,string,uint64,uint64,address,bool)` ABI method
        
        :param TransactionWithSigner txn: The `txn` ABI parameter
        :param str auction_key: The `auction_key` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = CompleteArtAuctionArgs(
            txn=txn,
            auction_key=auction_key,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def purchase_nft(
        self,
        *,
        txn: TransactionWithSigner,
        asset_key: str,
        nft_type: str,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `purchase_nft(pay,string,string)void` ABI method
        
        :param TransactionWithSigner txn: The `txn` ABI parameter
        :param str asset_key: The `asset_key` ABI parameter
        :param str nft_type: The `nft_type` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = PurchaseNftArgs(
            txn=txn,
            asset_key=asset_key,
            nft_type=nft_type,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def transfer_nft(
        self,
        *,
        txn: TransactionWithSigner,
        to: str,
        asset_key: str,
        nft_type: str,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `transfer_nft(pay,address,string,string)void` ABI method
        
        :param TransactionWithSigner txn: The `txn` ABI parameter
        :param str to: The `to` ABI parameter
        :param str asset_key: The `asset_key` ABI parameter
        :param str nft_type: The `nft_type` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = TransferNftArgs(
            txn=txn,
            to=to,
            asset_key=asset_key,
            nft_type=nft_type,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def create_proposal(
        self,
        *,
        txn: TransactionWithSigner,
        proposal_key: str,
        proposal_detail: str,
        max_votes: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `create_proposal(txn,string,string,uint64)(string,uint64,uint64,string)` ABI method
        
        :param TransactionWithSigner txn: The `txn` ABI parameter
        :param str proposal_key: The `proposal_key` ABI parameter
        :param str proposal_detail: The `proposal_detail` ABI parameter
        :param int max_votes: The `max_votes` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = CreateProposalArgs(
            txn=txn,
            proposal_key=proposal_key,
            proposal_detail=proposal_detail,
            max_votes=max_votes,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def vote_on_proposal(
        self,
        *,
        txn: TransactionWithSigner,
        vote_for: bool,
        proposal_key: str,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `vote_on_proposal(pay,bool,string)(string,uint64,uint64,string)` ABI method
        
        :param TransactionWithSigner txn: The `txn` ABI parameter
        :param bool vote_for: The `vote_for` ABI parameter
        :param str proposal_key: The `proposal_key` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = VoteOnProposalArgs(
            txn=txn,
            vote_for=vote_for,
            proposal_key=proposal_key,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def hello(
        self,
        *,
        name: str,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `hello(string)string` ABI method
        
        :param str name: The `name` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = HelloArgs(
            name=name,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def create_bare(
        self,
        *,
        on_complete: typing.Literal["no_op"] = "no_op",
        transaction_parameters: algokit_utils.CreateTransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to create an application using the no_op bare method
        
        :param typing.Literal[no_op] on_complete: On completion type to use
        :param algokit_utils.CreateTransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        self.app_client.compose_create(
            self.atc,
            call_abi_method=False,
            transaction_parameters=_convert_create_transaction_parameters(transaction_parameters, on_complete),
        )
        return self

    def clear_state(
        self,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
        app_args: list[bytes] | None = None,
    ) -> "Composer":
        """Adds a call to the application with on completion set to ClearState
    
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :param list[bytes] | None app_args: (optional) Application args to pass"""
    
        self.app_client.compose_clear_state(self.atc, _convert_transaction_parameters(transaction_parameters), app_args)
        return self


class AurallyClient:
    """A class for interacting with the Aurally app providing high productivity and
    strongly typed methods to deploy and call the app"""

    @typing.overload
    def __init__(
        self,
        algod_client: algosdk.v2client.algod.AlgodClient,
        *,
        app_id: int = 0,
        signer: TransactionSigner | algokit_utils.Account | None = None,
        sender: str | None = None,
        suggested_params: algosdk.transaction.SuggestedParams | None = None,
        template_values: algokit_utils.TemplateValueMapping | None = None,
        app_name: str | None = None,
    ) -> None:
        ...

    @typing.overload
    def __init__(
        self,
        algod_client: algosdk.v2client.algod.AlgodClient,
        *,
        creator: str | algokit_utils.Account,
        indexer_client: algosdk.v2client.indexer.IndexerClient | None = None,
        existing_deployments: algokit_utils.AppLookup | None = None,
        signer: TransactionSigner | algokit_utils.Account | None = None,
        sender: str | None = None,
        suggested_params: algosdk.transaction.SuggestedParams | None = None,
        template_values: algokit_utils.TemplateValueMapping | None = None,
        app_name: str | None = None,
    ) -> None:
        ...

    def __init__(
        self,
        algod_client: algosdk.v2client.algod.AlgodClient,
        *,
        creator: str | algokit_utils.Account | None = None,
        indexer_client: algosdk.v2client.indexer.IndexerClient | None = None,
        existing_deployments: algokit_utils.AppLookup | None = None,
        app_id: int = 0,
        signer: TransactionSigner | algokit_utils.Account | None = None,
        sender: str | None = None,
        suggested_params: algosdk.transaction.SuggestedParams | None = None,
        template_values: algokit_utils.TemplateValueMapping | None = None,
        app_name: str | None = None,
    ) -> None:
        """
        AurallyClient can be created with an app_id to interact with an existing application, alternatively
        it can be created with a creator and indexer_client specified to find existing applications by name and creator.
        
        :param AlgodClient algod_client: AlgoSDK algod client
        :param int app_id: The app_id of an existing application, to instead find the application by creator and name
        use the creator and indexer_client parameters
        :param str | Account creator: The address or Account of the app creator to resolve the app_id
        :param IndexerClient indexer_client: AlgoSDK indexer client, only required if deploying or finding app_id by
        creator and app name
        :param AppLookup existing_deployments:
        :param TransactionSigner | Account signer: Account or signer to use to sign transactions, if not specified and
        creator was passed as an Account will use that.
        :param str sender: Address to use as the sender for all transactions, will use the address associated with the
        signer if not specified.
        :param TemplateValueMapping template_values: Values to use for TMPL_* template variables, dictionary keys should
        *NOT* include the TMPL_ prefix
        :param str | None app_name: Name of application to use when deploying, defaults to name defined on the
        Application Specification
            """

        self.app_spec = APP_SPEC
        
        # calling full __init__ signature, so ignoring mypy warning about overloads
        self.app_client = algokit_utils.ApplicationClient(  # type: ignore[call-overload, misc]
            algod_client=algod_client,
            app_spec=self.app_spec,
            app_id=app_id,
            creator=creator,
            indexer_client=indexer_client,
            existing_deployments=existing_deployments,
            signer=signer,
            sender=sender,
            suggested_params=suggested_params,
            template_values=template_values,
            app_name=app_name,
        )

    @property
    def algod_client(self) -> algosdk.v2client.algod.AlgodClient:
        return self.app_client.algod_client

    @property
    def app_id(self) -> int:
        return self.app_client.app_id

    @app_id.setter
    def app_id(self, value: int) -> None:
        self.app_client.app_id = value

    @property
    def app_address(self) -> str:
        return self.app_client.app_address

    @property
    def sender(self) -> str | None:
        return self.app_client.sender

    @sender.setter
    def sender(self, value: str) -> None:
        self.app_client.sender = value

    @property
    def signer(self) -> TransactionSigner | None:
        return self.app_client.signer

    @signer.setter
    def signer(self, value: TransactionSigner) -> None:
        self.app_client.signer = value

    @property
    def suggested_params(self) -> algosdk.transaction.SuggestedParams | None:
        return self.app_client.suggested_params

    @suggested_params.setter
    def suggested_params(self, value: algosdk.transaction.SuggestedParams | None) -> None:
        self.app_client.suggested_params = value

    def register_creator(
        self,
        *,
        fullname: str,
        username: str,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[AurallyCreative]:
        """Calls `register_creator(string,string)(bool,bool,uint64,string,string,uint64)` ABI method
        
        :param str fullname: The `fullname` ABI parameter
        :param str username: The `username` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[AurallyCreative]: The result of the transaction"""

        args = RegisterCreatorArgs(
            fullname=fullname,
            username=username,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        elements = self.app_spec.hints[args.method()].structs["output"]["elements"]
        result_dict = {element[0]: value for element, value in zip(elements, result.return_value)}
        result.return_value = AurallyCreative(**result_dict)
        return result

    def create_sound_nft(
        self,
        *,
        txn: TransactionWithSigner,
        asset_key: str,
        title: str,
        label: str,
        artist: str,
        release_date: str,
        genre: str,
        price: int,
        cover_image_ipfs: str,
        audio_sample_ipfs: str,
        full_track_ipfs: str,
        supply: int,
        for_sale: bool,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[SoundNft]:
        """Calls `create_sound_nft(acfg,string,string,string,string,string,string,uint64,string,string,string,uint64,bool)(uint64,uint64,string,string,string,string,string,uint64,string,string,string,address,bool)` ABI method
        
        :param TransactionWithSigner txn: The `txn` ABI parameter
        :param str asset_key: The `asset_key` ABI parameter
        :param str title: The `title` ABI parameter
        :param str label: The `label` ABI parameter
        :param str artist: The `artist` ABI parameter
        :param str release_date: The `release_date` ABI parameter
        :param str genre: The `genre` ABI parameter
        :param int price: The `price` ABI parameter
        :param str cover_image_ipfs: The `cover_image_ipfs` ABI parameter
        :param str audio_sample_ipfs: The `audio_sample_ipfs` ABI parameter
        :param str full_track_ipfs: The `full_track_ipfs` ABI parameter
        :param int supply: The `supply` ABI parameter
        :param bool for_sale: The `for_sale` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[SoundNft]: The result of the transaction"""

        args = CreateSoundNftArgs(
            txn=txn,
            asset_key=asset_key,
            title=title,
            label=label,
            artist=artist,
            release_date=release_date,
            genre=genre,
            price=price,
            cover_image_ipfs=cover_image_ipfs,
            audio_sample_ipfs=audio_sample_ipfs,
            full_track_ipfs=full_track_ipfs,
            supply=supply,
            for_sale=for_sale,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        elements = self.app_spec.hints[args.method()].structs["output"]["elements"]
        result_dict = {element[0]: value for element, value in zip(elements, result.return_value)}
        result.return_value = SoundNft(**result_dict)
        return result

    def create_art_nft(
        self,
        *,
        txn: TransactionWithSigner,
        title: str,
        name: str,
        supply: int,
        description: str,
        ipfs_location: str,
        price: int,
        for_sale: bool,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[ArtNft]:
        """Calls `create_art_nft(acfg,string,string,uint64,string,string,uint64,bool)(uint64,string,string,uint64,string,string,uint64,uint64,address,bool)` ABI method
        
        :param TransactionWithSigner txn: The `txn` ABI parameter
        :param str title: The `title` ABI parameter
        :param str name: The `name` ABI parameter
        :param int supply: The `supply` ABI parameter
        :param str description: The `description` ABI parameter
        :param str ipfs_location: The `ipfs_location` ABI parameter
        :param int price: The `price` ABI parameter
        :param bool for_sale: The `for_sale` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[ArtNft]: The result of the transaction"""

        args = CreateArtNftArgs(
            txn=txn,
            title=title,
            name=name,
            supply=supply,
            description=description,
            ipfs_location=ipfs_location,
            price=price,
            for_sale=for_sale,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        elements = self.app_spec.hints[args.method()].structs["output"]["elements"]
        result_dict = {element[0]: value for element, value in zip(elements, result.return_value)}
        result.return_value = ArtNft(**result_dict)
        return result

    def create_art_auction(
        self,
        *,
        txn: TransactionWithSigner,
        auction_key: str,
        ipfs_location: str,
        min_bid: int,
        starts_at: int,
        ends_at: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[ArtAuctionItem]:
        """Calls `create_art_auction(txn,string,string,uint64,uint64,uint64)(address,string,string,uint64,uint64,uint64,uint64,address)` ABI method
        
        :param TransactionWithSigner txn: The `txn` ABI parameter
        :param str auction_key: The `auction_key` ABI parameter
        :param str ipfs_location: The `ipfs_location` ABI parameter
        :param int min_bid: The `min_bid` ABI parameter
        :param int starts_at: The `starts_at` ABI parameter
        :param int ends_at: The `ends_at` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[ArtAuctionItem]: The result of the transaction"""

        args = CreateArtAuctionArgs(
            txn=txn,
            auction_key=auction_key,
            ipfs_location=ipfs_location,
            min_bid=min_bid,
            starts_at=starts_at,
            ends_at=ends_at,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        elements = self.app_spec.hints[args.method()].structs["output"]["elements"]
        result_dict = {element[0]: value for element, value in zip(elements, result.return_value)}
        result.return_value = ArtAuctionItem(**result_dict)
        return result

    def bid_on_art_auction(
        self,
        *,
        txn: TransactionWithSigner,
        auction_key: str,
        bid_ammount: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[ArtAuctionItem]:
        """Calls `bid_on_art_auction(txn,string,uint64)(address,string,string,uint64,uint64,uint64,uint64,address)` ABI method
        
        :param TransactionWithSigner txn: The `txn` ABI parameter
        :param str auction_key: The `auction_key` ABI parameter
        :param int bid_ammount: The `bid_ammount` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[ArtAuctionItem]: The result of the transaction"""

        args = BidOnArtAuctionArgs(
            txn=txn,
            auction_key=auction_key,
            bid_ammount=bid_ammount,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        elements = self.app_spec.hints[args.method()].structs["output"]["elements"]
        result_dict = {element[0]: value for element, value in zip(elements, result.return_value)}
        result.return_value = ArtAuctionItem(**result_dict)
        return result

    def complete_art_auction(
        self,
        *,
        txn: TransactionWithSigner,
        auction_key: str,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[ArtNft]:
        """Calls `complete_art_auction(txn,string)(uint64,string,string,uint64,string,string,uint64,uint64,address,bool)` ABI method
        
        :param TransactionWithSigner txn: The `txn` ABI parameter
        :param str auction_key: The `auction_key` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[ArtNft]: The result of the transaction"""

        args = CompleteArtAuctionArgs(
            txn=txn,
            auction_key=auction_key,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        elements = self.app_spec.hints[args.method()].structs["output"]["elements"]
        result_dict = {element[0]: value for element, value in zip(elements, result.return_value)}
        result.return_value = ArtNft(**result_dict)
        return result

    def purchase_nft(
        self,
        *,
        txn: TransactionWithSigner,
        asset_key: str,
        nft_type: str,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Calls `purchase_nft(pay,string,string)void` ABI method
        
        :param TransactionWithSigner txn: The `txn` ABI parameter
        :param str asset_key: The `asset_key` ABI parameter
        :param str nft_type: The `nft_type` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = PurchaseNftArgs(
            txn=txn,
            asset_key=asset_key,
            nft_type=nft_type,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def transfer_nft(
        self,
        *,
        txn: TransactionWithSigner,
        to: str,
        asset_key: str,
        nft_type: str,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Calls `transfer_nft(pay,address,string,string)void` ABI method
        
        :param TransactionWithSigner txn: The `txn` ABI parameter
        :param str to: The `to` ABI parameter
        :param str asset_key: The `asset_key` ABI parameter
        :param str nft_type: The `nft_type` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = TransferNftArgs(
            txn=txn,
            to=to,
            asset_key=asset_key,
            nft_type=nft_type,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def create_proposal(
        self,
        *,
        txn: TransactionWithSigner,
        proposal_key: str,
        proposal_detail: str,
        max_votes: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[Proposal]:
        """Calls `create_proposal(txn,string,string,uint64)(string,uint64,uint64,string)` ABI method
        
        :param TransactionWithSigner txn: The `txn` ABI parameter
        :param str proposal_key: The `proposal_key` ABI parameter
        :param str proposal_detail: The `proposal_detail` ABI parameter
        :param int max_votes: The `max_votes` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[Proposal]: The result of the transaction"""

        args = CreateProposalArgs(
            txn=txn,
            proposal_key=proposal_key,
            proposal_detail=proposal_detail,
            max_votes=max_votes,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        elements = self.app_spec.hints[args.method()].structs["output"]["elements"]
        result_dict = {element[0]: value for element, value in zip(elements, result.return_value)}
        result.return_value = Proposal(**result_dict)
        return result

    def vote_on_proposal(
        self,
        *,
        txn: TransactionWithSigner,
        vote_for: bool,
        proposal_key: str,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[Proposal]:
        """Calls `vote_on_proposal(pay,bool,string)(string,uint64,uint64,string)` ABI method
        
        :param TransactionWithSigner txn: The `txn` ABI parameter
        :param bool vote_for: The `vote_for` ABI parameter
        :param str proposal_key: The `proposal_key` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[Proposal]: The result of the transaction"""

        args = VoteOnProposalArgs(
            txn=txn,
            vote_for=vote_for,
            proposal_key=proposal_key,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        elements = self.app_spec.hints[args.method()].structs["output"]["elements"]
        result_dict = {element[0]: value for element, value in zip(elements, result.return_value)}
        result.return_value = Proposal(**result_dict)
        return result

    def hello(
        self,
        *,
        name: str,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[str]:
        """Calls `hello(string)string` ABI method
        
        :param str name: The `name` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[str]: The result of the transaction"""

        args = HelloArgs(
            name=name,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def create_bare(
        self,
        *,
        on_complete: typing.Literal["no_op"] = "no_op",
        transaction_parameters: algokit_utils.CreateTransactionParameters | None = None,
    ) -> algokit_utils.TransactionResponse:
        """Creates an application using the no_op bare method
        
        :param typing.Literal[no_op] on_complete: On completion type to use
        :param algokit_utils.CreateTransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.TransactionResponse: The result of the transaction"""

        result = self.app_client.create(
            call_abi_method=False,
            transaction_parameters=_convert_create_transaction_parameters(transaction_parameters, on_complete),
        )
        return result

    def clear_state(
        self,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
        app_args: list[bytes] | None = None,
    ) -> algokit_utils.TransactionResponse:
        """Calls the application with on completion set to ClearState
    
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :param list[bytes] | None app_args: (optional) Application args to pass
        :returns algokit_utils.TransactionResponse: The result of the transaction"""
    
        return self.app_client.clear_state(_convert_transaction_parameters(transaction_parameters), app_args)

    def deploy(
        self,
        version: str | None = None,
        *,
        signer: TransactionSigner | None = None,
        sender: str | None = None,
        allow_update: bool | None = None,
        allow_delete: bool | None = None,
        on_update: algokit_utils.OnUpdate = algokit_utils.OnUpdate.Fail,
        on_schema_break: algokit_utils.OnSchemaBreak = algokit_utils.OnSchemaBreak.Fail,
        template_values: algokit_utils.TemplateValueMapping | None = None,
        create_args: algokit_utils.DeployCallArgs | None = None,
        update_args: algokit_utils.DeployCallArgs | None = None,
        delete_args: algokit_utils.DeployCallArgs | None = None,
    ) -> algokit_utils.DeployResponse:
        """Deploy an application and update client to reference it.
        
        Idempotently deploy (create, update/delete if changed) an app against the given name via the given creator
        account, including deploy-time template placeholder substitutions.
        To understand the architecture decisions behind this functionality please see
        <https://github.com/algorandfoundation/algokit-cli/blob/main/docs/architecture-decisions/2023-01-12_smart-contract-deployment.md>
        
        ```{note}
        If there is a breaking state schema change to an existing app (and `on_schema_break` is set to
        'ReplaceApp' the existing app will be deleted and re-created.
        ```
        
        ```{note}
        If there is an update (different TEAL code) to an existing app (and `on_update` is set to 'ReplaceApp')
        the existing app will be deleted and re-created.
        ```
        
        :param str version: version to use when creating or updating app, if None version will be auto incremented
        :param algosdk.atomic_transaction_composer.TransactionSigner signer: signer to use when deploying app
        , if None uses self.signer
        :param str sender: sender address to use when deploying app, if None uses self.sender
        :param bool allow_delete: Used to set the `TMPL_DELETABLE` template variable to conditionally control if an app
        can be deleted
        :param bool allow_update: Used to set the `TMPL_UPDATABLE` template variable to conditionally control if an app
        can be updated
        :param OnUpdate on_update: Determines what action to take if an application update is required
        :param OnSchemaBreak on_schema_break: Determines what action to take if an application schema requirements
        has increased beyond the current allocation
        :param dict[str, int|str|bytes] template_values: Values to use for `TMPL_*` template variables, dictionary keys
        should *NOT* include the TMPL_ prefix
        :param algokit_utils.DeployCallArgs | None create_args: Arguments used when creating an application
        :param algokit_utils.DeployCallArgs | None update_args: Arguments used when updating an application
        :param algokit_utils.DeployCallArgs | None delete_args: Arguments used when deleting an application
        :return DeployResponse: details action taken and relevant transactions
        :raises DeploymentError: If the deployment failed"""

        return self.app_client.deploy(
            version,
            signer=signer,
            sender=sender,
            allow_update=allow_update,
            allow_delete=allow_delete,
            on_update=on_update,
            on_schema_break=on_schema_break,
            template_values=template_values,
            create_args=_convert_deploy_args(create_args),
            update_args=_convert_deploy_args(update_args),
            delete_args=_convert_deploy_args(delete_args),
        )

    def compose(self, atc: AtomicTransactionComposer | None = None) -> Composer:
        return Composer(self.app_client, atc or AtomicTransactionComposer())
