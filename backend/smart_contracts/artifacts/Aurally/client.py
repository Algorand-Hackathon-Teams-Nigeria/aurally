# flake8: noqa
# fmt: off
# mypy: disable-error-code="no-any-return, no-untyped-call"
# This file was automatically generated by algokit-client-generator.
# DO NOT MODIFY IT BY HAND.
# requires: algokit-utils@^1.2.0
import base64
import dataclasses
import decimal
import typing
from abc import ABC, abstractmethod

import algokit_utils
import algosdk
from algosdk.atomic_transaction_composer import (
    AtomicTransactionComposer,
    AtomicTransactionResponse,
    TransactionSigner,
    TransactionWithSigner
)

_APP_SPEC_JSON = r"""{
    "hints": {
        "promote_to_admin(pay,account)string": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "demote_from_admin(pay,account)string": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "register_creator(txn,string,string)(bool,bool,uint64,string,string,uint64)": {
            "structs": {
                "output": {
                    "name": "AurallyCreative",
                    "elements": [
                        [
                            "is_music_creative",
                            "bool"
                        ],
                        [
                            "is_art_creative",
                            "bool"
                        ],
                        [
                            "minted",
                            "uint64"
                        ],
                        [
                            "fullname",
                            "string"
                        ],
                        [
                            "username",
                            "string"
                        ],
                        [
                            "d_nft_id",
                            "uint64"
                        ]
                    ]
                }
            },
            "call_config": {
                "no_op": "CALL"
            }
        },
        "get_registered_creative(address)(bool,bool,uint64,string,string,uint64)": {
            "read_only": true,
            "structs": {
                "output": {
                    "name": "AurallyCreative",
                    "elements": [
                        [
                            "is_music_creative",
                            "bool"
                        ],
                        [
                            "is_art_creative",
                            "bool"
                        ],
                        [
                            "minted",
                            "uint64"
                        ],
                        [
                            "fullname",
                            "string"
                        ],
                        [
                            "username",
                            "string"
                        ],
                        [
                            "d_nft_id",
                            "uint64"
                        ]
                    ]
                }
            },
            "call_config": {
                "no_op": "CALL"
            }
        },
        "create_sound_nft(txn,string,string,string,string,string,string,string,uint64,string,string,string,uint64,bool,asset,account)(uint64,string,uint64,string,string,string,string,string,uint64,string,string,string,address,bool)": {
            "structs": {
                "output": {
                    "name": "SoundNFT",
                    "elements": [
                        [
                            "asset_id",
                            "uint64"
                        ],
                        [
                            "asset_key",
                            "string"
                        ],
                        [
                            "supply",
                            "uint64"
                        ],
                        [
                            "title",
                            "string"
                        ],
                        [
                            "label",
                            "string"
                        ],
                        [
                            "artist",
                            "string"
                        ],
                        [
                            "release_date",
                            "string"
                        ],
                        [
                            "genre",
                            "string"
                        ],
                        [
                            "price",
                            "uint64"
                        ],
                        [
                            "cover_image_ipfs",
                            "string"
                        ],
                        [
                            "audio_sample_ipfs",
                            "string"
                        ],
                        [
                            "full_track_ipfs",
                            "string"
                        ],
                        [
                            "owner",
                            "address"
                        ],
                        [
                            "for_sale",
                            "bool"
                        ]
                    ]
                }
            },
            "call_config": {
                "no_op": "CALL"
            }
        },
        "create_art_nft(pay,string,string,string,string,uint64,string,string,uint64,asset,account)(uint64,string,string,string,uint64,string,string,uint64,uint64,address,bool)": {
            "structs": {
                "output": {
                    "name": "ArtNFT",
                    "elements": [
                        [
                            "asset_id",
                            "uint64"
                        ],
                        [
                            "asset_key",
                            "string"
                        ],
                        [
                            "title",
                            "string"
                        ],
                        [
                            "name",
                            "string"
                        ],
                        [
                            "supply",
                            "uint64"
                        ],
                        [
                            "description",
                            "string"
                        ],
                        [
                            "ipfs_location",
                            "string"
                        ],
                        [
                            "price",
                            "uint64"
                        ],
                        [
                            "sold_price",
                            "uint64"
                        ],
                        [
                            "owner",
                            "address"
                        ],
                        [
                            "for_sale",
                            "bool"
                        ]
                    ]
                }
            },
            "call_config": {
                "no_op": "CALL"
            }
        },
        "create_art_auction(pay,string,string,uint64,uint64,uint64)(address,string,string,uint64,uint64,uint64,uint64,address)": {
            "structs": {
                "output": {
                    "name": "ArtAuctionItem",
                    "elements": [
                        [
                            "auctioneer",
                            "address"
                        ],
                        [
                            "item_id",
                            "string"
                        ],
                        [
                            "item_name",
                            "string"
                        ],
                        [
                            "min_bid",
                            "uint64"
                        ],
                        [
                            "starts_at",
                            "uint64"
                        ],
                        [
                            "ends_at",
                            "uint64"
                        ],
                        [
                            "highest_bid",
                            "uint64"
                        ],
                        [
                            "highest_bidder",
                            "address"
                        ]
                    ]
                }
            },
            "call_config": {
                "no_op": "CALL"
            }
        },
        "bid_on_art_auction(pay,string,uint64)(address,string,string,uint64,uint64,uint64,uint64,address)": {
            "structs": {
                "output": {
                    "name": "ArtAuctionItem",
                    "elements": [
                        [
                            "auctioneer",
                            "address"
                        ],
                        [
                            "item_id",
                            "string"
                        ],
                        [
                            "item_name",
                            "string"
                        ],
                        [
                            "min_bid",
                            "uint64"
                        ],
                        [
                            "starts_at",
                            "uint64"
                        ],
                        [
                            "ends_at",
                            "uint64"
                        ],
                        [
                            "highest_bid",
                            "uint64"
                        ],
                        [
                            "highest_bidder",
                            "address"
                        ]
                    ]
                }
            },
            "call_config": {
                "no_op": "CALL"
            }
        },
        "complete_art_auction(pay,string)(uint64,string,string,string,uint64,string,string,uint64,uint64,address,bool)": {
            "structs": {
                "output": {
                    "name": "ArtNFT",
                    "elements": [
                        [
                            "asset_id",
                            "uint64"
                        ],
                        [
                            "asset_key",
                            "string"
                        ],
                        [
                            "title",
                            "string"
                        ],
                        [
                            "name",
                            "string"
                        ],
                        [
                            "supply",
                            "uint64"
                        ],
                        [
                            "description",
                            "string"
                        ],
                        [
                            "ipfs_location",
                            "string"
                        ],
                        [
                            "price",
                            "uint64"
                        ],
                        [
                            "sold_price",
                            "uint64"
                        ],
                        [
                            "owner",
                            "address"
                        ],
                        [
                            "for_sale",
                            "bool"
                        ]
                    ]
                }
            },
            "call_config": {
                "no_op": "CALL"
            }
        },
        "purchase_nft(pay,axfer,string,string,account,asset,asset,axfer,account)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "transfer_nft(pay,address,string,string)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "create_proposal(pay,string,string)(string,uint64,uint64,string)": {
            "structs": {
                "output": {
                    "name": "Proposal",
                    "elements": [
                        [
                            "proposal_id",
                            "string"
                        ],
                        [
                            "yes_votes",
                            "uint64"
                        ],
                        [
                            "no_votes",
                            "uint64"
                        ],
                        [
                            "details",
                            "string"
                        ]
                    ]
                }
            },
            "call_config": {
                "no_op": "CALL"
            }
        },
        "vote_on_proposal(pay,bool,asset,account,string)(string,uint64,uint64,string)": {
            "structs": {
                "output": {
                    "name": "Proposal",
                    "elements": [
                        [
                            "proposal_id",
                            "string"
                        ],
                        [
                            "yes_votes",
                            "uint64"
                        ],
                        [
                            "no_votes",
                            "uint64"
                        ],
                        [
                            "details",
                            "string"
                        ]
                    ]
                }
            },
            "call_config": {
                "no_op": "CALL"
            }
        },
        "end_proposal_voting(pay,string)(string,uint64,uint64,string)": {
            "structs": {
                "output": {
                    "name": "Proposal",
                    "elements": [
                        [
                            "proposal_id",
                            "string"
                        ],
                        [
                            "yes_votes",
                            "uint64"
                        ],
                        [
                            "no_votes",
                            "uint64"
                        ],
                        [
                            "details",
                            "string"
                        ]
                    ]
                }
            },
            "call_config": {
                "no_op": "CALL"
            }
        },
        "unfreeze_auras(pay,asset,account)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "create_aura_tokens()(uint64,string,uint64)": {
            "structs": {
                "output": {
                    "name": "AurallyToken",
                    "elements": [
                        [
                            "asset_id",
                            "uint64"
                        ],
                        [
                            "asset_key",
                            "string"
                        ],
                        [
                            "asset_total",
                            "uint64"
                        ]
                    ]
                }
            },
            "call_config": {
                "no_op": "CALL"
            }
        },
        "create_event(pay,string,string,uint64,uint64,string,uint64)(uint64,string,string,uint64,uint64,string,uint64,address)": {
            "structs": {
                "output": {
                    "name": "Event",
                    "elements": [
                        [
                            "asset_id",
                            "uint64"
                        ],
                        [
                            "key",
                            "string"
                        ],
                        [
                            "name",
                            "string"
                        ],
                        [
                            "start_date",
                            "uint64"
                        ],
                        [
                            "end_date",
                            "uint64"
                        ],
                        [
                            "cover_image_ipfs",
                            "string"
                        ],
                        [
                            "ticket_price",
                            "uint64"
                        ],
                        [
                            "owner",
                            "address"
                        ]
                    ]
                }
            },
            "call_config": {
                "no_op": "CALL"
            }
        },
        "purchase_event_ticket(pay,string,string,account)(uint64,string,string,uint64,address)": {
            "structs": {
                "output": {
                    "name": "EventTicket",
                    "elements": [
                        [
                            "asset_id",
                            "uint64"
                        ],
                        [
                            "ticket_key",
                            "string"
                        ],
                        [
                            "event_asset_key",
                            "string"
                        ],
                        [
                            "purchase_price",
                            "uint64"
                        ],
                        [
                            "owner",
                            "address"
                        ]
                    ]
                }
            },
            "call_config": {
                "no_op": "CALL"
            }
        },
        "hello(string)string": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDgKcHVzaGludCAwIC8vIDAKcmV0dXJu"
    },
    "state": {
        "global": {
            "num_byte_slices": 1,
            "num_uints": 0
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "active_proposal": {
                    "type": "bytes",
                    "key": "active_proposal",
                    "descr": ""
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "Aurally",
        "methods": [
            {
                "name": "promote_to_admin",
                "args": [
                    {
                        "type": "pay",
                        "name": "txn"
                    },
                    {
                        "type": "account",
                        "name": "acc"
                    }
                ],
                "returns": {
                    "type": "string"
                }
            },
            {
                "name": "demote_from_admin",
                "args": [
                    {
                        "type": "pay",
                        "name": "txn"
                    },
                    {
                        "type": "account",
                        "name": "acc"
                    }
                ],
                "returns": {
                    "type": "string"
                }
            },
            {
                "name": "register_creator",
                "args": [
                    {
                        "type": "txn",
                        "name": "txn"
                    },
                    {
                        "type": "string",
                        "name": "fullname"
                    },
                    {
                        "type": "string",
                        "name": "username"
                    }
                ],
                "returns": {
                    "type": "(bool,bool,uint64,string,string,uint64)"
                }
            },
            {
                "name": "get_registered_creative",
                "args": [
                    {
                        "type": "address",
                        "name": "addr"
                    }
                ],
                "returns": {
                    "type": "(bool,bool,uint64,string,string,uint64)"
                }
            },
            {
                "name": "create_sound_nft",
                "args": [
                    {
                        "type": "txn",
                        "name": "txn"
                    },
                    {
                        "type": "string",
                        "name": "nft_name"
                    },
                    {
                        "type": "string",
                        "name": "asset_key"
                    },
                    {
                        "type": "string",
                        "name": "title"
                    },
                    {
                        "type": "string",
                        "name": "label"
                    },
                    {
                        "type": "string",
                        "name": "artist"
                    },
                    {
                        "type": "string",
                        "name": "release_date"
                    },
                    {
                        "type": "string",
                        "name": "genre"
                    },
                    {
                        "type": "uint64",
                        "name": "price"
                    },
                    {
                        "type": "string",
                        "name": "cover_image_ipfs"
                    },
                    {
                        "type": "string",
                        "name": "audio_sample_ipfs"
                    },
                    {
                        "type": "string",
                        "name": "full_track_ipfs"
                    },
                    {
                        "type": "uint64",
                        "name": "supply"
                    },
                    {
                        "type": "bool",
                        "name": "for_sale"
                    },
                    {
                        "type": "asset",
                        "name": "aura_asset"
                    },
                    {
                        "type": "account",
                        "name": "creator"
                    }
                ],
                "returns": {
                    "type": "(uint64,string,uint64,string,string,string,string,string,uint64,string,string,string,address,bool)"
                }
            },
            {
                "name": "create_art_nft",
                "args": [
                    {
                        "type": "pay",
                        "name": "txn"
                    },
                    {
                        "type": "string",
                        "name": "asset_key"
                    },
                    {
                        "type": "string",
                        "name": "nft_name"
                    },
                    {
                        "type": "string",
                        "name": "title"
                    },
                    {
                        "type": "string",
                        "name": "name"
                    },
                    {
                        "type": "uint64",
                        "name": "supply"
                    },
                    {
                        "type": "string",
                        "name": "description"
                    },
                    {
                        "type": "string",
                        "name": "ipfs_location"
                    },
                    {
                        "type": "uint64",
                        "name": "price"
                    },
                    {
                        "type": "asset",
                        "name": "aura_asset"
                    },
                    {
                        "type": "account",
                        "name": "creator"
                    }
                ],
                "returns": {
                    "type": "(uint64,string,string,string,uint64,string,string,uint64,uint64,address,bool)"
                }
            },
            {
                "name": "create_art_auction",
                "args": [
                    {
                        "type": "pay",
                        "name": "txn"
                    },
                    {
                        "type": "string",
                        "name": "auction_key"
                    },
                    {
                        "type": "string",
                        "name": "asset_key"
                    },
                    {
                        "type": "uint64",
                        "name": "min_bid"
                    },
                    {
                        "type": "uint64",
                        "name": "starts_at"
                    },
                    {
                        "type": "uint64",
                        "name": "ends_at"
                    }
                ],
                "returns": {
                    "type": "(address,string,string,uint64,uint64,uint64,uint64,address)"
                }
            },
            {
                "name": "bid_on_art_auction",
                "args": [
                    {
                        "type": "pay",
                        "name": "txn"
                    },
                    {
                        "type": "string",
                        "name": "auction_key"
                    },
                    {
                        "type": "uint64",
                        "name": "bid_ammount"
                    }
                ],
                "returns": {
                    "type": "(address,string,string,uint64,uint64,uint64,uint64,address)"
                }
            },
            {
                "name": "complete_art_auction",
                "args": [
                    {
                        "type": "pay",
                        "name": "txn"
                    },
                    {
                        "type": "string",
                        "name": "auction_key"
                    }
                ],
                "returns": {
                    "type": "(uint64,string,string,string,uint64,string,string,uint64,uint64,address,bool)"
                }
            },
            {
                "name": "purchase_nft",
                "args": [
                    {
                        "type": "pay",
                        "name": "txn"
                    },
                    {
                        "type": "axfer",
                        "name": "optin_txn"
                    },
                    {
                        "type": "string",
                        "name": "asset_key"
                    },
                    {
                        "type": "string",
                        "name": "nft_type"
                    },
                    {
                        "type": "account",
                        "name": "seller"
                    },
                    {
                        "type": "asset",
                        "name": "nft_id"
                    },
                    {
                        "type": "asset",
                        "name": "aura_id"
                    },
                    {
                        "type": "axfer",
                        "name": "aura_optin_txn"
                    },
                    {
                        "type": "account",
                        "name": "buyer"
                    }
                ],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "transfer_nft",
                "args": [
                    {
                        "type": "pay",
                        "name": "txn"
                    },
                    {
                        "type": "address",
                        "name": "to"
                    },
                    {
                        "type": "string",
                        "name": "asset_key"
                    },
                    {
                        "type": "string",
                        "name": "nft_type"
                    }
                ],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "create_proposal",
                "args": [
                    {
                        "type": "pay",
                        "name": "txn"
                    },
                    {
                        "type": "string",
                        "name": "proposal_key"
                    },
                    {
                        "type": "string",
                        "name": "proposal_detail"
                    }
                ],
                "returns": {
                    "type": "(string,uint64,uint64,string)"
                }
            },
            {
                "name": "vote_on_proposal",
                "args": [
                    {
                        "type": "pay",
                        "name": "txn"
                    },
                    {
                        "type": "bool",
                        "name": "vote_for"
                    },
                    {
                        "type": "asset",
                        "name": "aura_id"
                    },
                    {
                        "type": "account",
                        "name": "voter"
                    },
                    {
                        "type": "string",
                        "name": "proposal_key"
                    }
                ],
                "returns": {
                    "type": "(string,uint64,uint64,string)"
                }
            },
            {
                "name": "end_proposal_voting",
                "args": [
                    {
                        "type": "pay",
                        "name": "txn"
                    },
                    {
                        "type": "string",
                        "name": "proposal_key"
                    }
                ],
                "returns": {
                    "type": "(string,uint64,uint64,string)"
                }
            },
            {
                "name": "unfreeze_auras",
                "args": [
                    {
                        "type": "pay",
                        "name": "txn"
                    },
                    {
                        "type": "asset",
                        "name": "aura"
                    },
                    {
                        "type": "account",
                        "name": "acc"
                    }
                ],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "create_aura_tokens",
                "args": [],
                "returns": {
                    "type": "(uint64,string,uint64)"
                }
            },
            {
                "name": "create_event",
                "args": [
                    {
                        "type": "pay",
                        "name": "txn"
                    },
                    {
                        "type": "string",
                        "name": "key"
                    },
                    {
                        "type": "string",
                        "name": "name"
                    },
                    {
                        "type": "uint64",
                        "name": "start_date"
                    },
                    {
                        "type": "uint64",
                        "name": "end_date"
                    },
                    {
                        "type": "string",
                        "name": "cover_image_ipfs"
                    },
                    {
                        "type": "uint64",
                        "name": "ticket_price"
                    }
                ],
                "returns": {
                    "type": "(uint64,string,string,uint64,uint64,string,uint64,address)"
                }
            },
            {
                "name": "purchase_event_ticket",
                "args": [
                    {
                        "type": "pay",
                        "name": "txn"
                    },
                    {
                        "type": "string",
                        "name": "event_key"
                    },
                    {
                        "type": "string",
                        "name": "ticket_key"
                    },
                    {
                        "type": "account",
                        "name": "event_owner"
                    }
                ],
                "returns": {
                    "type": "(uint64,string,string,uint64,address)"
                }
            },
            {
                "name": "hello",
                "args": [
                    {
                        "type": "string",
                        "name": "name"
                    }
                ],
                "returns": {
                    "type": "string"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "delete_application": "CALL",
        "no_op": "CREATE",
        "update_application": "CALL"
    }
}"""
APP_SPEC = algokit_utils.ApplicationSpecification.from_json(_APP_SPEC_JSON)
_TReturn = typing.TypeVar("_TReturn")


class _ArgsBase(ABC, typing.Generic[_TReturn]):
    @staticmethod
    @abstractmethod
    def method() -> str:
        ...


_TArgs = typing.TypeVar("_TArgs", bound=_ArgsBase[typing.Any])


@dataclasses.dataclass(kw_only=True)
class _TArgsHolder(typing.Generic[_TArgs]):
    args: _TArgs


def _filter_none(value: dict | typing.Any) -> dict | typing.Any:
    if isinstance(value, dict):
        return {k: _filter_none(v) for k, v in value.items() if v is not None}
    return value


def _as_dict(data: typing.Any, *, convert_all: bool = True) -> dict[str, typing.Any]:
    if data is None:
        return {}
    if not dataclasses.is_dataclass(data):
        raise TypeError(f"{data} must be a dataclass")
    if convert_all:
        result = dataclasses.asdict(data)
    else:
        result = {f.name: getattr(data, f.name) for f in dataclasses.fields(data)}
    return _filter_none(result)


def _convert_transaction_parameters(
    transaction_parameters: algokit_utils.TransactionParameters | None,
) -> algokit_utils.TransactionParametersDict:
    return typing.cast(algokit_utils.TransactionParametersDict, _as_dict(transaction_parameters))


def _convert_call_transaction_parameters(
    transaction_parameters: algokit_utils.TransactionParameters | None,
) -> algokit_utils.OnCompleteCallParametersDict:
    return typing.cast(algokit_utils.OnCompleteCallParametersDict, _as_dict(transaction_parameters))


def _convert_create_transaction_parameters(
    transaction_parameters: algokit_utils.TransactionParameters | None,
    on_complete: algokit_utils.OnCompleteActionName,
) -> algokit_utils.CreateCallParametersDict:
    result = typing.cast(algokit_utils.CreateCallParametersDict, _as_dict(transaction_parameters))
    on_complete_enum = on_complete.replace("_", " ").title().replace(" ", "") + "OC"
    result["on_complete"] = getattr(algosdk.transaction.OnComplete, on_complete_enum)
    return result


def _convert_deploy_args(
    deploy_args: algokit_utils.DeployCallArgs | None,
) -> algokit_utils.ABICreateCallArgsDict | None:
    if deploy_args is None:
        return None

    deploy_args_dict = typing.cast(algokit_utils.ABICreateCallArgsDict, _as_dict(deploy_args))
    if isinstance(deploy_args, _TArgsHolder):
        deploy_args_dict["args"] = _as_dict(deploy_args.args)
        deploy_args_dict["method"] = deploy_args.args.method()

    return deploy_args_dict


@dataclasses.dataclass(kw_only=True)
class PromoteToAdminArgs(_ArgsBase[str]):
    txn: TransactionWithSigner
    acc: str | bytes

    @staticmethod
    def method() -> str:
        return "promote_to_admin(pay,account)string"


@dataclasses.dataclass(kw_only=True)
class DemoteFromAdminArgs(_ArgsBase[str]):
    txn: TransactionWithSigner
    acc: str | bytes

    @staticmethod
    def method() -> str:
        return "demote_from_admin(pay,account)string"


@dataclasses.dataclass(kw_only=True)
class AurallyCreative:
    is_music_creative: bool
    is_art_creative: bool
    minted: int
    fullname: str
    username: str
    d_nft_id: int


@dataclasses.dataclass(kw_only=True)
class RegisterCreatorArgs(_ArgsBase[AurallyCreative]):
    txn: TransactionWithSigner
    fullname: str
    username: str

    @staticmethod
    def method() -> str:
        return "register_creator(txn,string,string)(bool,bool,uint64,string,string,uint64)"


@dataclasses.dataclass(kw_only=True)
class GetRegisteredCreativeArgs(_ArgsBase[AurallyCreative]):
    addr: str

    @staticmethod
    def method() -> str:
        return "get_registered_creative(address)(bool,bool,uint64,string,string,uint64)"


@dataclasses.dataclass(kw_only=True)
class SoundNft:
    asset_id: int
    asset_key: str
    supply: int
    title: str
    label: str
    artist: str
    release_date: str
    genre: str
    price: int
    cover_image_ipfs: str
    audio_sample_ipfs: str
    full_track_ipfs: str
    owner: str
    for_sale: bool


@dataclasses.dataclass(kw_only=True)
class CreateSoundNftArgs(_ArgsBase[SoundNft]):
    txn: TransactionWithSigner
    nft_name: str
    asset_key: str
    title: str
    label: str
    artist: str
    release_date: str
    genre: str
    price: int
    cover_image_ipfs: str
    audio_sample_ipfs: str
    full_track_ipfs: str
    supply: int
    for_sale: bool
    aura_asset: int
    creator: str | bytes

    @staticmethod
    def method() -> str:
        return "create_sound_nft(txn,string,string,string,string,string,string,string,uint64,string,string,string,uint64,bool,asset,account)(uint64,string,uint64,string,string,string,string,string,uint64,string,string,string,address,bool)"


@dataclasses.dataclass(kw_only=True)
class ArtNft:
    asset_id: int
    asset_key: str
    title: str
    name: str
    supply: int
    description: str
    ipfs_location: str
    price: int
    sold_price: int
    owner: str
    for_sale: bool


@dataclasses.dataclass(kw_only=True)
class CreateArtNftArgs(_ArgsBase[ArtNft]):
    txn: TransactionWithSigner
    asset_key: str
    nft_name: str
    title: str
    name: str
    supply: int
    description: str
    ipfs_location: str
    price: int
    aura_asset: int
    creator: str | bytes

    @staticmethod
    def method() -> str:
        return "create_art_nft(pay,string,string,string,string,uint64,string,string,uint64,asset,account)(uint64,string,string,string,uint64,string,string,uint64,uint64,address,bool)"


@dataclasses.dataclass(kw_only=True)
class ArtAuctionItem:
    auctioneer: str
    item_id: str
    item_name: str
    min_bid: int
    starts_at: int
    ends_at: int
    highest_bid: int
    highest_bidder: str


@dataclasses.dataclass(kw_only=True)
class CreateArtAuctionArgs(_ArgsBase[ArtAuctionItem]):
    txn: TransactionWithSigner
    auction_key: str
    asset_key: str
    min_bid: int
    starts_at: int
    ends_at: int

    @staticmethod
    def method() -> str:
        return "create_art_auction(pay,string,string,uint64,uint64,uint64)(address,string,string,uint64,uint64,uint64,uint64,address)"


@dataclasses.dataclass(kw_only=True)
class BidOnArtAuctionArgs(_ArgsBase[ArtAuctionItem]):
    txn: TransactionWithSigner
    auction_key: str
    bid_ammount: int

    @staticmethod
    def method() -> str:
        return "bid_on_art_auction(pay,string,uint64)(address,string,string,uint64,uint64,uint64,uint64,address)"


@dataclasses.dataclass(kw_only=True)
class CompleteArtAuctionArgs(_ArgsBase[ArtNft]):
    txn: TransactionWithSigner
    auction_key: str

    @staticmethod
    def method() -> str:
        return "complete_art_auction(pay,string)(uint64,string,string,string,uint64,string,string,uint64,uint64,address,bool)"


@dataclasses.dataclass(kw_only=True)
class PurchaseNftArgs(_ArgsBase[None]):
    txn: TransactionWithSigner
    optin_txn: TransactionWithSigner
    asset_key: str
    nft_type: str
    seller: str | bytes
    nft_id: int
    aura_id: int
    aura_optin_txn: TransactionWithSigner
    buyer: str | bytes

    @staticmethod
    def method() -> str:
        return "purchase_nft(pay,axfer,string,string,account,asset,asset,axfer,account)void"


@dataclasses.dataclass(kw_only=True)
class TransferNftArgs(_ArgsBase[None]):
    txn: TransactionWithSigner
    to: str
    asset_key: str
    nft_type: str

    @staticmethod
    def method() -> str:
        return "transfer_nft(pay,address,string,string)void"


@dataclasses.dataclass(kw_only=True)
class Proposal:
    proposal_id: str
    yes_votes: int
    no_votes: int
    details: str


@dataclasses.dataclass(kw_only=True)
class CreateProposalArgs(_ArgsBase[Proposal]):
    txn: TransactionWithSigner
    proposal_key: str
    proposal_detail: str

    @staticmethod
    def method() -> str:
        return "create_proposal(pay,string,string)(string,uint64,uint64,string)"


@dataclasses.dataclass(kw_only=True)
class VoteOnProposalArgs(_ArgsBase[Proposal]):
    txn: TransactionWithSigner
    vote_for: bool
    aura_id: int
    voter: str | bytes
    proposal_key: str

    @staticmethod
    def method() -> str:
        return "vote_on_proposal(pay,bool,asset,account,string)(string,uint64,uint64,string)"


@dataclasses.dataclass(kw_only=True)
class EndProposalVotingArgs(_ArgsBase[Proposal]):
    txn: TransactionWithSigner
    proposal_key: str

    @staticmethod
    def method() -> str:
        return "end_proposal_voting(pay,string)(string,uint64,uint64,string)"


@dataclasses.dataclass(kw_only=True)
class UnfreezeAurasArgs(_ArgsBase[None]):
    txn: TransactionWithSigner
    aura: int
    acc: str | bytes

    @staticmethod
    def method() -> str:
        return "unfreeze_auras(pay,asset,account)void"


@dataclasses.dataclass(kw_only=True)
class AurallyToken:
    asset_id: int
    asset_key: str
    asset_total: int


@dataclasses.dataclass(kw_only=True)
class CreateAuraTokensArgs(_ArgsBase[AurallyToken]):
    @staticmethod
    def method() -> str:
        return "create_aura_tokens()(uint64,string,uint64)"


@dataclasses.dataclass(kw_only=True)
class Event:
    asset_id: int
    key: str
    name: str
    start_date: int
    end_date: int
    cover_image_ipfs: str
    ticket_price: int
    owner: str


@dataclasses.dataclass(kw_only=True)
class CreateEventArgs(_ArgsBase[Event]):
    txn: TransactionWithSigner
    key: str
    name: str
    start_date: int
    end_date: int
    cover_image_ipfs: str
    ticket_price: int

    @staticmethod
    def method() -> str:
        return "create_event(pay,string,string,uint64,uint64,string,uint64)(uint64,string,string,uint64,uint64,string,uint64,address)"


@dataclasses.dataclass(kw_only=True)
class EventTicket:
    asset_id: int
    ticket_key: str
    event_asset_key: str
    purchase_price: int
    owner: str


@dataclasses.dataclass(kw_only=True)
class PurchaseEventTicketArgs(_ArgsBase[EventTicket]):
    txn: TransactionWithSigner
    event_key: str
    ticket_key: str
    event_owner: str | bytes

    @staticmethod
    def method() -> str:
        return "purchase_event_ticket(pay,string,string,account)(uint64,string,string,uint64,address)"


@dataclasses.dataclass(kw_only=True)
class HelloArgs(_ArgsBase[str]):
    name: str

    @staticmethod
    def method() -> str:
        return "hello(string)string"


class ByteReader:
    def __init__(self, data: bytes):
        self._data = data

    @property
    def as_bytes(self) -> bytes:
        return self._data

    @property
    def as_str(self) -> str:
        return self._data.decode("utf8")

    @property
    def as_base64(self) -> str:
        return base64.b64encode(self._data).decode("utf8")

    @property
    def as_hex(self) -> str:
        return self._data.hex()


class GlobalState:
    def __init__(self, data: dict[bytes, bytes | int]):
        self.active_proposal = ByteReader(typing.cast(bytes, data.get(b"active_proposal")))


class Composer:

    def __init__(self, app_client: algokit_utils.ApplicationClient, atc: AtomicTransactionComposer):
        self.app_client = app_client
        self.atc = atc

    def build(self) -> AtomicTransactionComposer:
        return self.atc

    def execute(self) -> AtomicTransactionResponse:
        return self.app_client.execute_atc(self.atc)

    def promote_to_admin(
        self,
        *,
        txn: TransactionWithSigner,
        acc: str | bytes,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `promote_to_admin(pay,account)string` ABI method
        
        :param TransactionWithSigner txn: The `txn` ABI parameter
        :param str | bytes acc: The `acc` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = PromoteToAdminArgs(
            txn=txn,
            acc=acc,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def demote_from_admin(
        self,
        *,
        txn: TransactionWithSigner,
        acc: str | bytes,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `demote_from_admin(pay,account)string` ABI method
        
        :param TransactionWithSigner txn: The `txn` ABI parameter
        :param str | bytes acc: The `acc` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = DemoteFromAdminArgs(
            txn=txn,
            acc=acc,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def register_creator(
        self,
        *,
        txn: TransactionWithSigner,
        fullname: str,
        username: str,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `register_creator(txn,string,string)(bool,bool,uint64,string,string,uint64)` ABI method
        
        :param TransactionWithSigner txn: The `txn` ABI parameter
        :param str fullname: The `fullname` ABI parameter
        :param str username: The `username` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = RegisterCreatorArgs(
            txn=txn,
            fullname=fullname,
            username=username,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def get_registered_creative(
        self,
        *,
        addr: str,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `get_registered_creative(address)(bool,bool,uint64,string,string,uint64)` ABI method
        
        :param str addr: The `addr` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = GetRegisteredCreativeArgs(
            addr=addr,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def create_sound_nft(
        self,
        *,
        txn: TransactionWithSigner,
        nft_name: str,
        asset_key: str,
        title: str,
        label: str,
        artist: str,
        release_date: str,
        genre: str,
        price: int,
        cover_image_ipfs: str,
        audio_sample_ipfs: str,
        full_track_ipfs: str,
        supply: int,
        for_sale: bool,
        aura_asset: int,
        creator: str | bytes,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `create_sound_nft(txn,string,string,string,string,string,string,string,uint64,string,string,string,uint64,bool,asset,account)(uint64,string,uint64,string,string,string,string,string,uint64,string,string,string,address,bool)` ABI method
        
        :param TransactionWithSigner txn: The `txn` ABI parameter
        :param str nft_name: The `nft_name` ABI parameter
        :param str asset_key: The `asset_key` ABI parameter
        :param str title: The `title` ABI parameter
        :param str label: The `label` ABI parameter
        :param str artist: The `artist` ABI parameter
        :param str release_date: The `release_date` ABI parameter
        :param str genre: The `genre` ABI parameter
        :param int price: The `price` ABI parameter
        :param str cover_image_ipfs: The `cover_image_ipfs` ABI parameter
        :param str audio_sample_ipfs: The `audio_sample_ipfs` ABI parameter
        :param str full_track_ipfs: The `full_track_ipfs` ABI parameter
        :param int supply: The `supply` ABI parameter
        :param bool for_sale: The `for_sale` ABI parameter
        :param int aura_asset: The `aura_asset` ABI parameter
        :param str | bytes creator: The `creator` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = CreateSoundNftArgs(
            txn=txn,
            nft_name=nft_name,
            asset_key=asset_key,
            title=title,
            label=label,
            artist=artist,
            release_date=release_date,
            genre=genre,
            price=price,
            cover_image_ipfs=cover_image_ipfs,
            audio_sample_ipfs=audio_sample_ipfs,
            full_track_ipfs=full_track_ipfs,
            supply=supply,
            for_sale=for_sale,
            aura_asset=aura_asset,
            creator=creator,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def create_art_nft(
        self,
        *,
        txn: TransactionWithSigner,
        asset_key: str,
        nft_name: str,
        title: str,
        name: str,
        supply: int,
        description: str,
        ipfs_location: str,
        price: int,
        aura_asset: int,
        creator: str | bytes,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `create_art_nft(pay,string,string,string,string,uint64,string,string,uint64,asset,account)(uint64,string,string,string,uint64,string,string,uint64,uint64,address,bool)` ABI method
        
        :param TransactionWithSigner txn: The `txn` ABI parameter
        :param str asset_key: The `asset_key` ABI parameter
        :param str nft_name: The `nft_name` ABI parameter
        :param str title: The `title` ABI parameter
        :param str name: The `name` ABI parameter
        :param int supply: The `supply` ABI parameter
        :param str description: The `description` ABI parameter
        :param str ipfs_location: The `ipfs_location` ABI parameter
        :param int price: The `price` ABI parameter
        :param int aura_asset: The `aura_asset` ABI parameter
        :param str | bytes creator: The `creator` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = CreateArtNftArgs(
            txn=txn,
            asset_key=asset_key,
            nft_name=nft_name,
            title=title,
            name=name,
            supply=supply,
            description=description,
            ipfs_location=ipfs_location,
            price=price,
            aura_asset=aura_asset,
            creator=creator,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def create_art_auction(
        self,
        *,
        txn: TransactionWithSigner,
        auction_key: str,
        asset_key: str,
        min_bid: int,
        starts_at: int,
        ends_at: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `create_art_auction(pay,string,string,uint64,uint64,uint64)(address,string,string,uint64,uint64,uint64,uint64,address)` ABI method
        
        :param TransactionWithSigner txn: The `txn` ABI parameter
        :param str auction_key: The `auction_key` ABI parameter
        :param str asset_key: The `asset_key` ABI parameter
        :param int min_bid: The `min_bid` ABI parameter
        :param int starts_at: The `starts_at` ABI parameter
        :param int ends_at: The `ends_at` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = CreateArtAuctionArgs(
            txn=txn,
            auction_key=auction_key,
            asset_key=asset_key,
            min_bid=min_bid,
            starts_at=starts_at,
            ends_at=ends_at,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def bid_on_art_auction(
        self,
        *,
        txn: TransactionWithSigner,
        auction_key: str,
        bid_ammount: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `bid_on_art_auction(pay,string,uint64)(address,string,string,uint64,uint64,uint64,uint64,address)` ABI method
        
        :param TransactionWithSigner txn: The `txn` ABI parameter
        :param str auction_key: The `auction_key` ABI parameter
        :param int bid_ammount: The `bid_ammount` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = BidOnArtAuctionArgs(
            txn=txn,
            auction_key=auction_key,
            bid_ammount=bid_ammount,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def complete_art_auction(
        self,
        *,
        txn: TransactionWithSigner,
        auction_key: str,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `complete_art_auction(pay,string)(uint64,string,string,string,uint64,string,string,uint64,uint64,address,bool)` ABI method
        
        :param TransactionWithSigner txn: The `txn` ABI parameter
        :param str auction_key: The `auction_key` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = CompleteArtAuctionArgs(
            txn=txn,
            auction_key=auction_key,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def purchase_nft(
        self,
        *,
        txn: TransactionWithSigner,
        optin_txn: TransactionWithSigner,
        asset_key: str,
        nft_type: str,
        seller: str | bytes,
        nft_id: int,
        aura_id: int,
        aura_optin_txn: TransactionWithSigner,
        buyer: str | bytes,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `purchase_nft(pay,axfer,string,string,account,asset,asset,axfer,account)void` ABI method
        
        :param TransactionWithSigner txn: The `txn` ABI parameter
        :param TransactionWithSigner optin_txn: The `optin_txn` ABI parameter
        :param str asset_key: The `asset_key` ABI parameter
        :param str nft_type: The `nft_type` ABI parameter
        :param str | bytes seller: The `seller` ABI parameter
        :param int nft_id: The `nft_id` ABI parameter
        :param int aura_id: The `aura_id` ABI parameter
        :param TransactionWithSigner aura_optin_txn: The `aura_optin_txn` ABI parameter
        :param str | bytes buyer: The `buyer` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = PurchaseNftArgs(
            txn=txn,
            optin_txn=optin_txn,
            asset_key=asset_key,
            nft_type=nft_type,
            seller=seller,
            nft_id=nft_id,
            aura_id=aura_id,
            aura_optin_txn=aura_optin_txn,
            buyer=buyer,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def transfer_nft(
        self,
        *,
        txn: TransactionWithSigner,
        to: str,
        asset_key: str,
        nft_type: str,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `transfer_nft(pay,address,string,string)void` ABI method
        
        :param TransactionWithSigner txn: The `txn` ABI parameter
        :param str to: The `to` ABI parameter
        :param str asset_key: The `asset_key` ABI parameter
        :param str nft_type: The `nft_type` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = TransferNftArgs(
            txn=txn,
            to=to,
            asset_key=asset_key,
            nft_type=nft_type,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def create_proposal(
        self,
        *,
        txn: TransactionWithSigner,
        proposal_key: str,
        proposal_detail: str,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `create_proposal(pay,string,string)(string,uint64,uint64,string)` ABI method
        
        :param TransactionWithSigner txn: The `txn` ABI parameter
        :param str proposal_key: The `proposal_key` ABI parameter
        :param str proposal_detail: The `proposal_detail` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = CreateProposalArgs(
            txn=txn,
            proposal_key=proposal_key,
            proposal_detail=proposal_detail,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def vote_on_proposal(
        self,
        *,
        txn: TransactionWithSigner,
        vote_for: bool,
        aura_id: int,
        voter: str | bytes,
        proposal_key: str,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `vote_on_proposal(pay,bool,asset,account,string)(string,uint64,uint64,string)` ABI method
        
        :param TransactionWithSigner txn: The `txn` ABI parameter
        :param bool vote_for: The `vote_for` ABI parameter
        :param int aura_id: The `aura_id` ABI parameter
        :param str | bytes voter: The `voter` ABI parameter
        :param str proposal_key: The `proposal_key` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = VoteOnProposalArgs(
            txn=txn,
            vote_for=vote_for,
            aura_id=aura_id,
            voter=voter,
            proposal_key=proposal_key,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def end_proposal_voting(
        self,
        *,
        txn: TransactionWithSigner,
        proposal_key: str,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `end_proposal_voting(pay,string)(string,uint64,uint64,string)` ABI method
        
        :param TransactionWithSigner txn: The `txn` ABI parameter
        :param str proposal_key: The `proposal_key` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = EndProposalVotingArgs(
            txn=txn,
            proposal_key=proposal_key,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def unfreeze_auras(
        self,
        *,
        txn: TransactionWithSigner,
        aura: int,
        acc: str | bytes,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `unfreeze_auras(pay,asset,account)void` ABI method
        
        :param TransactionWithSigner txn: The `txn` ABI parameter
        :param int aura: The `aura` ABI parameter
        :param str | bytes acc: The `acc` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = UnfreezeAurasArgs(
            txn=txn,
            aura=aura,
            acc=acc,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def create_aura_tokens(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `create_aura_tokens()(uint64,string,uint64)` ABI method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = CreateAuraTokensArgs()
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def create_event(
        self,
        *,
        txn: TransactionWithSigner,
        key: str,
        name: str,
        start_date: int,
        end_date: int,
        cover_image_ipfs: str,
        ticket_price: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `create_event(pay,string,string,uint64,uint64,string,uint64)(uint64,string,string,uint64,uint64,string,uint64,address)` ABI method
        
        :param TransactionWithSigner txn: The `txn` ABI parameter
        :param str key: The `key` ABI parameter
        :param str name: The `name` ABI parameter
        :param int start_date: The `start_date` ABI parameter
        :param int end_date: The `end_date` ABI parameter
        :param str cover_image_ipfs: The `cover_image_ipfs` ABI parameter
        :param int ticket_price: The `ticket_price` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = CreateEventArgs(
            txn=txn,
            key=key,
            name=name,
            start_date=start_date,
            end_date=end_date,
            cover_image_ipfs=cover_image_ipfs,
            ticket_price=ticket_price,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def purchase_event_ticket(
        self,
        *,
        txn: TransactionWithSigner,
        event_key: str,
        ticket_key: str,
        event_owner: str | bytes,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `purchase_event_ticket(pay,string,string,account)(uint64,string,string,uint64,address)` ABI method
        
        :param TransactionWithSigner txn: The `txn` ABI parameter
        :param str event_key: The `event_key` ABI parameter
        :param str ticket_key: The `ticket_key` ABI parameter
        :param str | bytes event_owner: The `event_owner` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = PurchaseEventTicketArgs(
            txn=txn,
            event_key=event_key,
            ticket_key=ticket_key,
            event_owner=event_owner,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def hello(
        self,
        *,
        name: str,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `hello(string)string` ABI method
        
        :param str name: The `name` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = HelloArgs(
            name=name,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def create_bare(
        self,
        *,
        on_complete: typing.Literal["no_op"] = "no_op",
        transaction_parameters: algokit_utils.CreateTransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to create an application using the no_op bare method
        
        :param typing.Literal[no_op] on_complete: On completion type to use
        :param algokit_utils.CreateTransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        self.app_client.compose_create(
            self.atc,
            call_abi_method=False,
            transaction_parameters=_convert_create_transaction_parameters(transaction_parameters, on_complete),
        )
        return self

    def update_bare(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a calls to the update_application bare method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        self.app_client.compose_update(
            self.atc,
            call_abi_method=False,
            transaction_parameters=_convert_transaction_parameters(transaction_parameters),
        )
        return self

    def delete_bare(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a calls to the delete_application bare method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        self.app_client.compose_delete(
            self.atc,
            call_abi_method=False,
            transaction_parameters=_convert_transaction_parameters(transaction_parameters),
        )
        return self

    def clear_state(
        self,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
        app_args: list[bytes] | None = None,
    ) -> "Composer":
        """Adds a call to the application with on completion set to ClearState
    
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :param list[bytes] | None app_args: (optional) Application args to pass"""
    
        self.app_client.compose_clear_state(self.atc, _convert_transaction_parameters(transaction_parameters), app_args)
        return self


class AurallyClient:
    """A class for interacting with the Aurally app providing high productivity and
    strongly typed methods to deploy and call the app"""

    @typing.overload
    def __init__(
        self,
        algod_client: algosdk.v2client.algod.AlgodClient,
        *,
        app_id: int = 0,
        signer: TransactionSigner | algokit_utils.Account | None = None,
        sender: str | None = None,
        suggested_params: algosdk.transaction.SuggestedParams | None = None,
        template_values: algokit_utils.TemplateValueMapping | None = None,
        app_name: str | None = None,
    ) -> None:
        ...

    @typing.overload
    def __init__(
        self,
        algod_client: algosdk.v2client.algod.AlgodClient,
        *,
        creator: str | algokit_utils.Account,
        indexer_client: algosdk.v2client.indexer.IndexerClient | None = None,
        existing_deployments: algokit_utils.AppLookup | None = None,
        signer: TransactionSigner | algokit_utils.Account | None = None,
        sender: str | None = None,
        suggested_params: algosdk.transaction.SuggestedParams | None = None,
        template_values: algokit_utils.TemplateValueMapping | None = None,
        app_name: str | None = None,
    ) -> None:
        ...

    def __init__(
        self,
        algod_client: algosdk.v2client.algod.AlgodClient,
        *,
        creator: str | algokit_utils.Account | None = None,
        indexer_client: algosdk.v2client.indexer.IndexerClient | None = None,
        existing_deployments: algokit_utils.AppLookup | None = None,
        app_id: int = 0,
        signer: TransactionSigner | algokit_utils.Account | None = None,
        sender: str | None = None,
        suggested_params: algosdk.transaction.SuggestedParams | None = None,
        template_values: algokit_utils.TemplateValueMapping | None = None,
        app_name: str | None = None,
    ) -> None:
        """
        AurallyClient can be created with an app_id to interact with an existing application, alternatively
        it can be created with a creator and indexer_client specified to find existing applications by name and creator.
        
        :param AlgodClient algod_client: AlgoSDK algod client
        :param int app_id: The app_id of an existing application, to instead find the application by creator and name
        use the creator and indexer_client parameters
        :param str | Account creator: The address or Account of the app creator to resolve the app_id
        :param IndexerClient indexer_client: AlgoSDK indexer client, only required if deploying or finding app_id by
        creator and app name
        :param AppLookup existing_deployments:
        :param TransactionSigner | Account signer: Account or signer to use to sign transactions, if not specified and
        creator was passed as an Account will use that.
        :param str sender: Address to use as the sender for all transactions, will use the address associated with the
        signer if not specified.
        :param TemplateValueMapping template_values: Values to use for TMPL_* template variables, dictionary keys should
        *NOT* include the TMPL_ prefix
        :param str | None app_name: Name of application to use when deploying, defaults to name defined on the
        Application Specification
            """

        self.app_spec = APP_SPEC
        
        # calling full __init__ signature, so ignoring mypy warning about overloads
        self.app_client = algokit_utils.ApplicationClient(  # type: ignore[call-overload, misc]
            algod_client=algod_client,
            app_spec=self.app_spec,
            app_id=app_id,
            creator=creator,
            indexer_client=indexer_client,
            existing_deployments=existing_deployments,
            signer=signer,
            sender=sender,
            suggested_params=suggested_params,
            template_values=template_values,
            app_name=app_name,
        )

    @property
    def algod_client(self) -> algosdk.v2client.algod.AlgodClient:
        return self.app_client.algod_client

    @property
    def app_id(self) -> int:
        return self.app_client.app_id

    @app_id.setter
    def app_id(self, value: int) -> None:
        self.app_client.app_id = value

    @property
    def app_address(self) -> str:
        return self.app_client.app_address

    @property
    def sender(self) -> str | None:
        return self.app_client.sender

    @sender.setter
    def sender(self, value: str) -> None:
        self.app_client.sender = value

    @property
    def signer(self) -> TransactionSigner | None:
        return self.app_client.signer

    @signer.setter
    def signer(self, value: TransactionSigner) -> None:
        self.app_client.signer = value

    @property
    def suggested_params(self) -> algosdk.transaction.SuggestedParams | None:
        return self.app_client.suggested_params

    @suggested_params.setter
    def suggested_params(self, value: algosdk.transaction.SuggestedParams | None) -> None:
        self.app_client.suggested_params = value

    def get_global_state(self) -> GlobalState:
        """Returns the application's global state wrapped in a strongly typed class with options to format the stored value"""

        state = typing.cast(dict[bytes, bytes | int], self.app_client.get_global_state(raw=True))
        return GlobalState(state)

    def promote_to_admin(
        self,
        *,
        txn: TransactionWithSigner,
        acc: str | bytes,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[str]:
        """Calls `promote_to_admin(pay,account)string` ABI method
        
        :param TransactionWithSigner txn: The `txn` ABI parameter
        :param str | bytes acc: The `acc` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[str]: The result of the transaction"""

        args = PromoteToAdminArgs(
            txn=txn,
            acc=acc,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def demote_from_admin(
        self,
        *,
        txn: TransactionWithSigner,
        acc: str | bytes,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[str]:
        """Calls `demote_from_admin(pay,account)string` ABI method
        
        :param TransactionWithSigner txn: The `txn` ABI parameter
        :param str | bytes acc: The `acc` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[str]: The result of the transaction"""

        args = DemoteFromAdminArgs(
            txn=txn,
            acc=acc,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def register_creator(
        self,
        *,
        txn: TransactionWithSigner,
        fullname: str,
        username: str,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[AurallyCreative]:
        """Calls `register_creator(txn,string,string)(bool,bool,uint64,string,string,uint64)` ABI method
        
        :param TransactionWithSigner txn: The `txn` ABI parameter
        :param str fullname: The `fullname` ABI parameter
        :param str username: The `username` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[AurallyCreative]: The result of the transaction"""

        args = RegisterCreatorArgs(
            txn=txn,
            fullname=fullname,
            username=username,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        elements = self.app_spec.hints[args.method()].structs["output"]["elements"]
        result_dict = {element[0]: value for element, value in zip(elements, result.return_value)}
        result.return_value = AurallyCreative(**result_dict)
        return result

    def get_registered_creative(
        self,
        *,
        addr: str,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[AurallyCreative]:
        """Calls `get_registered_creative(address)(bool,bool,uint64,string,string,uint64)` ABI method
        
        :param str addr: The `addr` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[AurallyCreative]: The result of the transaction"""

        args = GetRegisteredCreativeArgs(
            addr=addr,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        elements = self.app_spec.hints[args.method()].structs["output"]["elements"]
        result_dict = {element[0]: value for element, value in zip(elements, result.return_value)}
        result.return_value = AurallyCreative(**result_dict)
        return result

    def create_sound_nft(
        self,
        *,
        txn: TransactionWithSigner,
        nft_name: str,
        asset_key: str,
        title: str,
        label: str,
        artist: str,
        release_date: str,
        genre: str,
        price: int,
        cover_image_ipfs: str,
        audio_sample_ipfs: str,
        full_track_ipfs: str,
        supply: int,
        for_sale: bool,
        aura_asset: int,
        creator: str | bytes,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[SoundNft]:
        """Calls `create_sound_nft(txn,string,string,string,string,string,string,string,uint64,string,string,string,uint64,bool,asset,account)(uint64,string,uint64,string,string,string,string,string,uint64,string,string,string,address,bool)` ABI method
        
        :param TransactionWithSigner txn: The `txn` ABI parameter
        :param str nft_name: The `nft_name` ABI parameter
        :param str asset_key: The `asset_key` ABI parameter
        :param str title: The `title` ABI parameter
        :param str label: The `label` ABI parameter
        :param str artist: The `artist` ABI parameter
        :param str release_date: The `release_date` ABI parameter
        :param str genre: The `genre` ABI parameter
        :param int price: The `price` ABI parameter
        :param str cover_image_ipfs: The `cover_image_ipfs` ABI parameter
        :param str audio_sample_ipfs: The `audio_sample_ipfs` ABI parameter
        :param str full_track_ipfs: The `full_track_ipfs` ABI parameter
        :param int supply: The `supply` ABI parameter
        :param bool for_sale: The `for_sale` ABI parameter
        :param int aura_asset: The `aura_asset` ABI parameter
        :param str | bytes creator: The `creator` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[SoundNft]: The result of the transaction"""

        args = CreateSoundNftArgs(
            txn=txn,
            nft_name=nft_name,
            asset_key=asset_key,
            title=title,
            label=label,
            artist=artist,
            release_date=release_date,
            genre=genre,
            price=price,
            cover_image_ipfs=cover_image_ipfs,
            audio_sample_ipfs=audio_sample_ipfs,
            full_track_ipfs=full_track_ipfs,
            supply=supply,
            for_sale=for_sale,
            aura_asset=aura_asset,
            creator=creator,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        elements = self.app_spec.hints[args.method()].structs["output"]["elements"]
        result_dict = {element[0]: value for element, value in zip(elements, result.return_value)}
        result.return_value = SoundNft(**result_dict)
        return result

    def create_art_nft(
        self,
        *,
        txn: TransactionWithSigner,
        asset_key: str,
        nft_name: str,
        title: str,
        name: str,
        supply: int,
        description: str,
        ipfs_location: str,
        price: int,
        aura_asset: int,
        creator: str | bytes,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[ArtNft]:
        """Calls `create_art_nft(pay,string,string,string,string,uint64,string,string,uint64,asset,account)(uint64,string,string,string,uint64,string,string,uint64,uint64,address,bool)` ABI method
        
        :param TransactionWithSigner txn: The `txn` ABI parameter
        :param str asset_key: The `asset_key` ABI parameter
        :param str nft_name: The `nft_name` ABI parameter
        :param str title: The `title` ABI parameter
        :param str name: The `name` ABI parameter
        :param int supply: The `supply` ABI parameter
        :param str description: The `description` ABI parameter
        :param str ipfs_location: The `ipfs_location` ABI parameter
        :param int price: The `price` ABI parameter
        :param int aura_asset: The `aura_asset` ABI parameter
        :param str | bytes creator: The `creator` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[ArtNft]: The result of the transaction"""

        args = CreateArtNftArgs(
            txn=txn,
            asset_key=asset_key,
            nft_name=nft_name,
            title=title,
            name=name,
            supply=supply,
            description=description,
            ipfs_location=ipfs_location,
            price=price,
            aura_asset=aura_asset,
            creator=creator,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        elements = self.app_spec.hints[args.method()].structs["output"]["elements"]
        result_dict = {element[0]: value for element, value in zip(elements, result.return_value)}
        result.return_value = ArtNft(**result_dict)
        return result

    def create_art_auction(
        self,
        *,
        txn: TransactionWithSigner,
        auction_key: str,
        asset_key: str,
        min_bid: int,
        starts_at: int,
        ends_at: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[ArtAuctionItem]:
        """Calls `create_art_auction(pay,string,string,uint64,uint64,uint64)(address,string,string,uint64,uint64,uint64,uint64,address)` ABI method
        
        :param TransactionWithSigner txn: The `txn` ABI parameter
        :param str auction_key: The `auction_key` ABI parameter
        :param str asset_key: The `asset_key` ABI parameter
        :param int min_bid: The `min_bid` ABI parameter
        :param int starts_at: The `starts_at` ABI parameter
        :param int ends_at: The `ends_at` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[ArtAuctionItem]: The result of the transaction"""

        args = CreateArtAuctionArgs(
            txn=txn,
            auction_key=auction_key,
            asset_key=asset_key,
            min_bid=min_bid,
            starts_at=starts_at,
            ends_at=ends_at,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        elements = self.app_spec.hints[args.method()].structs["output"]["elements"]
        result_dict = {element[0]: value for element, value in zip(elements, result.return_value)}
        result.return_value = ArtAuctionItem(**result_dict)
        return result

    def bid_on_art_auction(
        self,
        *,
        txn: TransactionWithSigner,
        auction_key: str,
        bid_ammount: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[ArtAuctionItem]:
        """Calls `bid_on_art_auction(pay,string,uint64)(address,string,string,uint64,uint64,uint64,uint64,address)` ABI method
        
        :param TransactionWithSigner txn: The `txn` ABI parameter
        :param str auction_key: The `auction_key` ABI parameter
        :param int bid_ammount: The `bid_ammount` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[ArtAuctionItem]: The result of the transaction"""

        args = BidOnArtAuctionArgs(
            txn=txn,
            auction_key=auction_key,
            bid_ammount=bid_ammount,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        elements = self.app_spec.hints[args.method()].structs["output"]["elements"]
        result_dict = {element[0]: value for element, value in zip(elements, result.return_value)}
        result.return_value = ArtAuctionItem(**result_dict)
        return result

    def complete_art_auction(
        self,
        *,
        txn: TransactionWithSigner,
        auction_key: str,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[ArtNft]:
        """Calls `complete_art_auction(pay,string)(uint64,string,string,string,uint64,string,string,uint64,uint64,address,bool)` ABI method
        
        :param TransactionWithSigner txn: The `txn` ABI parameter
        :param str auction_key: The `auction_key` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[ArtNft]: The result of the transaction"""

        args = CompleteArtAuctionArgs(
            txn=txn,
            auction_key=auction_key,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        elements = self.app_spec.hints[args.method()].structs["output"]["elements"]
        result_dict = {element[0]: value for element, value in zip(elements, result.return_value)}
        result.return_value = ArtNft(**result_dict)
        return result

    def purchase_nft(
        self,
        *,
        txn: TransactionWithSigner,
        optin_txn: TransactionWithSigner,
        asset_key: str,
        nft_type: str,
        seller: str | bytes,
        nft_id: int,
        aura_id: int,
        aura_optin_txn: TransactionWithSigner,
        buyer: str | bytes,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Calls `purchase_nft(pay,axfer,string,string,account,asset,asset,axfer,account)void` ABI method
        
        :param TransactionWithSigner txn: The `txn` ABI parameter
        :param TransactionWithSigner optin_txn: The `optin_txn` ABI parameter
        :param str asset_key: The `asset_key` ABI parameter
        :param str nft_type: The `nft_type` ABI parameter
        :param str | bytes seller: The `seller` ABI parameter
        :param int nft_id: The `nft_id` ABI parameter
        :param int aura_id: The `aura_id` ABI parameter
        :param TransactionWithSigner aura_optin_txn: The `aura_optin_txn` ABI parameter
        :param str | bytes buyer: The `buyer` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = PurchaseNftArgs(
            txn=txn,
            optin_txn=optin_txn,
            asset_key=asset_key,
            nft_type=nft_type,
            seller=seller,
            nft_id=nft_id,
            aura_id=aura_id,
            aura_optin_txn=aura_optin_txn,
            buyer=buyer,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def transfer_nft(
        self,
        *,
        txn: TransactionWithSigner,
        to: str,
        asset_key: str,
        nft_type: str,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Calls `transfer_nft(pay,address,string,string)void` ABI method
        
        :param TransactionWithSigner txn: The `txn` ABI parameter
        :param str to: The `to` ABI parameter
        :param str asset_key: The `asset_key` ABI parameter
        :param str nft_type: The `nft_type` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = TransferNftArgs(
            txn=txn,
            to=to,
            asset_key=asset_key,
            nft_type=nft_type,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def create_proposal(
        self,
        *,
        txn: TransactionWithSigner,
        proposal_key: str,
        proposal_detail: str,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[Proposal]:
        """Calls `create_proposal(pay,string,string)(string,uint64,uint64,string)` ABI method
        
        :param TransactionWithSigner txn: The `txn` ABI parameter
        :param str proposal_key: The `proposal_key` ABI parameter
        :param str proposal_detail: The `proposal_detail` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[Proposal]: The result of the transaction"""

        args = CreateProposalArgs(
            txn=txn,
            proposal_key=proposal_key,
            proposal_detail=proposal_detail,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        elements = self.app_spec.hints[args.method()].structs["output"]["elements"]
        result_dict = {element[0]: value for element, value in zip(elements, result.return_value)}
        result.return_value = Proposal(**result_dict)
        return result

    def vote_on_proposal(
        self,
        *,
        txn: TransactionWithSigner,
        vote_for: bool,
        aura_id: int,
        voter: str | bytes,
        proposal_key: str,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[Proposal]:
        """Calls `vote_on_proposal(pay,bool,asset,account,string)(string,uint64,uint64,string)` ABI method
        
        :param TransactionWithSigner txn: The `txn` ABI parameter
        :param bool vote_for: The `vote_for` ABI parameter
        :param int aura_id: The `aura_id` ABI parameter
        :param str | bytes voter: The `voter` ABI parameter
        :param str proposal_key: The `proposal_key` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[Proposal]: The result of the transaction"""

        args = VoteOnProposalArgs(
            txn=txn,
            vote_for=vote_for,
            aura_id=aura_id,
            voter=voter,
            proposal_key=proposal_key,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        elements = self.app_spec.hints[args.method()].structs["output"]["elements"]
        result_dict = {element[0]: value for element, value in zip(elements, result.return_value)}
        result.return_value = Proposal(**result_dict)
        return result

    def end_proposal_voting(
        self,
        *,
        txn: TransactionWithSigner,
        proposal_key: str,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[Proposal]:
        """Calls `end_proposal_voting(pay,string)(string,uint64,uint64,string)` ABI method
        
        :param TransactionWithSigner txn: The `txn` ABI parameter
        :param str proposal_key: The `proposal_key` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[Proposal]: The result of the transaction"""

        args = EndProposalVotingArgs(
            txn=txn,
            proposal_key=proposal_key,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        elements = self.app_spec.hints[args.method()].structs["output"]["elements"]
        result_dict = {element[0]: value for element, value in zip(elements, result.return_value)}
        result.return_value = Proposal(**result_dict)
        return result

    def unfreeze_auras(
        self,
        *,
        txn: TransactionWithSigner,
        aura: int,
        acc: str | bytes,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Calls `unfreeze_auras(pay,asset,account)void` ABI method
        
        :param TransactionWithSigner txn: The `txn` ABI parameter
        :param int aura: The `aura` ABI parameter
        :param str | bytes acc: The `acc` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = UnfreezeAurasArgs(
            txn=txn,
            aura=aura,
            acc=acc,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def create_aura_tokens(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[AurallyToken]:
        """Calls `create_aura_tokens()(uint64,string,uint64)` ABI method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[AurallyToken]: The result of the transaction"""

        args = CreateAuraTokensArgs()
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        elements = self.app_spec.hints[args.method()].structs["output"]["elements"]
        result_dict = {element[0]: value for element, value in zip(elements, result.return_value)}
        result.return_value = AurallyToken(**result_dict)
        return result

    def create_event(
        self,
        *,
        txn: TransactionWithSigner,
        key: str,
        name: str,
        start_date: int,
        end_date: int,
        cover_image_ipfs: str,
        ticket_price: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[Event]:
        """Calls `create_event(pay,string,string,uint64,uint64,string,uint64)(uint64,string,string,uint64,uint64,string,uint64,address)` ABI method
        
        :param TransactionWithSigner txn: The `txn` ABI parameter
        :param str key: The `key` ABI parameter
        :param str name: The `name` ABI parameter
        :param int start_date: The `start_date` ABI parameter
        :param int end_date: The `end_date` ABI parameter
        :param str cover_image_ipfs: The `cover_image_ipfs` ABI parameter
        :param int ticket_price: The `ticket_price` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[Event]: The result of the transaction"""

        args = CreateEventArgs(
            txn=txn,
            key=key,
            name=name,
            start_date=start_date,
            end_date=end_date,
            cover_image_ipfs=cover_image_ipfs,
            ticket_price=ticket_price,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        elements = self.app_spec.hints[args.method()].structs["output"]["elements"]
        result_dict = {element[0]: value for element, value in zip(elements, result.return_value)}
        result.return_value = Event(**result_dict)
        return result

    def purchase_event_ticket(
        self,
        *,
        txn: TransactionWithSigner,
        event_key: str,
        ticket_key: str,
        event_owner: str | bytes,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[EventTicket]:
        """Calls `purchase_event_ticket(pay,string,string,account)(uint64,string,string,uint64,address)` ABI method
        
        :param TransactionWithSigner txn: The `txn` ABI parameter
        :param str event_key: The `event_key` ABI parameter
        :param str ticket_key: The `ticket_key` ABI parameter
        :param str | bytes event_owner: The `event_owner` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[EventTicket]: The result of the transaction"""

        args = PurchaseEventTicketArgs(
            txn=txn,
            event_key=event_key,
            ticket_key=ticket_key,
            event_owner=event_owner,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        elements = self.app_spec.hints[args.method()].structs["output"]["elements"]
        result_dict = {element[0]: value for element, value in zip(elements, result.return_value)}
        result.return_value = EventTicket(**result_dict)
        return result

    def hello(
        self,
        *,
        name: str,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[str]:
        """Calls `hello(string)string` ABI method
        
        :param str name: The `name` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[str]: The result of the transaction"""

        args = HelloArgs(
            name=name,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def create_bare(
        self,
        *,
        on_complete: typing.Literal["no_op"] = "no_op",
        transaction_parameters: algokit_utils.CreateTransactionParameters | None = None,
    ) -> algokit_utils.TransactionResponse:
        """Creates an application using the no_op bare method
        
        :param typing.Literal[no_op] on_complete: On completion type to use
        :param algokit_utils.CreateTransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.TransactionResponse: The result of the transaction"""

        result = self.app_client.create(
            call_abi_method=False,
            transaction_parameters=_convert_create_transaction_parameters(transaction_parameters, on_complete),
        )
        return result

    def update_bare(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.TransactionResponse:
        """Calls the update_application bare method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.TransactionResponse: The result of the transaction"""

        result = self.app_client.update(
            call_abi_method=False,
            transaction_parameters=_convert_transaction_parameters(transaction_parameters),
        )
        return result

    def delete_bare(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.TransactionResponse:
        """Calls the delete_application bare method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.TransactionResponse: The result of the transaction"""

        result = self.app_client.delete(
            call_abi_method=False,
            transaction_parameters=_convert_transaction_parameters(transaction_parameters),
        )
        return result

    def clear_state(
        self,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
        app_args: list[bytes] | None = None,
    ) -> algokit_utils.TransactionResponse:
        """Calls the application with on completion set to ClearState
    
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :param list[bytes] | None app_args: (optional) Application args to pass
        :returns algokit_utils.TransactionResponse: The result of the transaction"""
    
        return self.app_client.clear_state(_convert_transaction_parameters(transaction_parameters), app_args)

    def deploy(
        self,
        version: str | None = None,
        *,
        signer: TransactionSigner | None = None,
        sender: str | None = None,
        allow_update: bool | None = None,
        allow_delete: bool | None = None,
        on_update: algokit_utils.OnUpdate = algokit_utils.OnUpdate.Fail,
        on_schema_break: algokit_utils.OnSchemaBreak = algokit_utils.OnSchemaBreak.Fail,
        template_values: algokit_utils.TemplateValueMapping | None = None,
        create_args: algokit_utils.DeployCallArgs | None = None,
        update_args: algokit_utils.DeployCallArgs | None = None,
        delete_args: algokit_utils.DeployCallArgs | None = None,
    ) -> algokit_utils.DeployResponse:
        """Deploy an application and update client to reference it.
        
        Idempotently deploy (create, update/delete if changed) an app against the given name via the given creator
        account, including deploy-time template placeholder substitutions.
        To understand the architecture decisions behind this functionality please see
        <https://github.com/algorandfoundation/algokit-cli/blob/main/docs/architecture-decisions/2023-01-12_smart-contract-deployment.md>
        
        ```{note}
        If there is a breaking state schema change to an existing app (and `on_schema_break` is set to
        'ReplaceApp' the existing app will be deleted and re-created.
        ```
        
        ```{note}
        If there is an update (different TEAL code) to an existing app (and `on_update` is set to 'ReplaceApp')
        the existing app will be deleted and re-created.
        ```
        
        :param str version: version to use when creating or updating app, if None version will be auto incremented
        :param algosdk.atomic_transaction_composer.TransactionSigner signer: signer to use when deploying app
        , if None uses self.signer
        :param str sender: sender address to use when deploying app, if None uses self.sender
        :param bool allow_delete: Used to set the `TMPL_DELETABLE` template variable to conditionally control if an app
        can be deleted
        :param bool allow_update: Used to set the `TMPL_UPDATABLE` template variable to conditionally control if an app
        can be updated
        :param OnUpdate on_update: Determines what action to take if an application update is required
        :param OnSchemaBreak on_schema_break: Determines what action to take if an application schema requirements
        has increased beyond the current allocation
        :param dict[str, int|str|bytes] template_values: Values to use for `TMPL_*` template variables, dictionary keys
        should *NOT* include the TMPL_ prefix
        :param algokit_utils.DeployCallArgs | None create_args: Arguments used when creating an application
        :param algokit_utils.DeployCallArgs | None update_args: Arguments used when updating an application
        :param algokit_utils.DeployCallArgs | None delete_args: Arguments used when deleting an application
        :return DeployResponse: details action taken and relevant transactions
        :raises DeploymentError: If the deployment failed"""

        return self.app_client.deploy(
            version,
            signer=signer,
            sender=sender,
            allow_update=allow_update,
            allow_delete=allow_delete,
            on_update=on_update,
            on_schema_break=on_schema_break,
            template_values=template_values,
            create_args=_convert_deploy_args(create_args),
            update_args=_convert_deploy_args(update_args),
            delete_args=_convert_deploy_args(delete_args),
        )

    def compose(self, atc: AtomicTransactionComposer | None = None) -> Composer:
        return Composer(self.app_client, atc or AtomicTransactionComposer())
